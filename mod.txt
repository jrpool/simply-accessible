==> mod/agsize/index.html <==
<!--Use 529 example for partial nonresponsiveness.
Set Chrome font size to Very large. Then visit https://about.utopia.com. Then vary window width and see bizarre variation.-->
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Accessibility is a mixture of universalism (one thing designed to be good for everybody) and customizability. Size is an example of that. Most people can read and navigate with reasonably large font and input sizes, but not everybody can. Some need to enlarge the text and/or inputs in order to browse comfortably, or at all.</p>
        <p>The need to enlarge items on a web page extends beyond persons with poor vision. It includes users in poor lighting conditions, users with mobile devices that shrink the text, and users who are in motion while browsing and cannot touch precisely.</p>
        <p>Accessible UIs permit the user to enlarge items without suffering adverse consequences.</p>
      </section>
      <section>
        <header>
          <h2>How users enlarge</h2>
        </header>
        <p>The most common methods for enlarging items displayed by browsers are:</p>
        <ul>
          <li>Browser zoom with reflow</li>
          <li>Browser zoom without reflow</li>
          <li>Browser setting</li>
          <li>Operating system setting</li>
        </ul>
        <p>These differ significantly. Operating system settings affect multiple applications, <strong>perhaps including the browser</strong>, while browser settings affect only the browser. Browser settings affect only the text, while browser zoom affects all of the content. Browser zoom with reflow reflows (i.e. rewraps) the lines of text and thereby lets the user continue to read normally after enlarging the content, but browser zoom without reflow doesn&rsquo;t reflow the text. Without reflow, the lines extend beyond the side edges of the screen, requiring the user to scroll left and right on each line of text.</p>
        <p>Perform these operations:</p>
        <ol>
          <li><mark id="hint-00" class="hint covert">Make your browser zoom in <strong>with</strong> reflow, using the <kbd>ctrl/cmd</kbd>-<kbd>+</kbd> shortcut. Repeat a few times. Note that the text reflows and remains entirely visible.</mark> Note also the popup message telling you what magnification you have produced. Note whether your view has suffered from any truncated or overlapping text.</li>
          <li>Do the same to zoom out, with the <kbd>ctrl/cmd</kbd>-<kbd>-</kbd> shortcut.</li>
          <li><mark id="hint-01" class="hint covert">Zoom in and out with reflow again, this time using the Chrome zoom setting/preference</mark> (via the <code>&vellip;</code> icon in the upper right corner or <q>Preferences</q> menu).</li>
          <li>Restore the non-zoomed view with the <kbd>ctrl/cmd</kbd>-<kbd>0</kbd> shortcut.</li>
          <li>Open an <a href="../../gen/examples/imgsize">example of image and font sizing</a>. Note that it contains two images.</li>
          <li>Use the <q>Font size</q> browser setting to change the font size. The setting is in the <q>Appearance</q> category, which becomes visible after you click <q>Settings</q>. This setting may take effect immediately, but if not then it takes effect after you reload the page. Note that the text and only one of the images changes size; the other image remains unchanged.</li>
          <li>Restore your preferred font size and reload the page.</li>
          <li>Why did one image change size but not the other? Inspect both images with the developer tools. Note that each image has a style declaration setting its width, but the units differ. One image has a width defined in pixels, and the other has a width defined in <code>rem</code> (the <q>root</q> font size). When you change your preferred font size, you are changing <code>rem</code>, so the <code>rem</code>-dependent width changes, too, but not the width defined in pixels.</li>
          <li>If you can, view any web page in any browser on an iOS or Android device. Zoom in by using a <kbd>spread</kbd> gesture, and then zoom out by using a <kbd>pinch</kbd> gesture. Note that the zooming takes place <em>without</em> reflow.</li>
          <li>
            If you wish, explore other browsers&rsquo; and operating systems&rsquo; settings. They may include:
            <ol>
              <li><code>Open Menu:Zoom</code> in Firefox</li>
              <li><code>Open Menu:Options:Language and Appearance:Fonts &amp; Colors</code> in Firefox</li>
              <li><code>Customize and control Google Chrome:Zoom</code> in Chrome</li>
              <li><code>Customize and control Google Chrome:Settings:Appearance</code> in Chrome</li>
              <li><code>menu button:Settings:Accessibility</code> in Chrome for Android</li>
              <li><code>Safari:Preferences:Appearance</code> in Safari for OS X</li>
              <li><code>Apple menu:System Preferences:Displays:Scaled</code> on OS X</li>
              <li><code>Settings:Display &amp; Brightness:Text Size</code> on iOS</li>
              <li><code>Settings:General:Accessibility:Zoom</code> on iOS</li>
              <li><code>Settings:General:Accessibility:Larger Text</code> on iOS</li>
            </ol>
          </li>
        </ol>
      </section>
      <section id="howtext" class="section-quiz"></section>
      <section>
        <header>
          <h2>Letting users enlarge</h2>
        </header>
        <section>
          <header>
            <h3>Principles</h3>
          </header>
          <p>Today there is an emerging consensus that users have the right to manipulate sizes. Some UI designers still prefer to take size control away from users, but that idea has become less popular as the harm to accessibility has become understood. Utopia has some UIs that restrict users&rsquo; discretion on sizes, but they are being changed or phased out.</p>
          <p>The consensus is reflected in two of the Success Criteria of WCAG 2.1:</p>
          <ul>
            <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html">Success Criterion <i>1.4.4</i></a> says that <mark id="hint-02" class="hint covert">a UI should let the user double the text size without suffering a penalty. More specifically, a user who does this should lose no <q>content</q> or <q>functionality</q>.</mark></li>
            <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html">Success Criterion <i>1.4.10</i></a> says that <mark id="hint-03" class="hint covert">a UI should let the user quadruple the content size (including both text and graphics) without suffering a penalty. In this case the user is to be protected from loss of <q>information</q>, loss of <q>functionality</q>, and a need to scroll more than just vertically.</mark></li>
          </ul>
          <p>Of course, <mark id="hint-04" class="hint covert">these criteria require that users may also increase sizes to <strong>less</strong> than 200% (for text) or 400% (for content) and still be protected.</mark></p>
          <p>Who, then, is responsible for conforming to these criteria? The creators of WCAG have expressed the opinion that <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html#intent">text reflow on zooming is the browser maker&rsquo;s responsibility, not the UI maker&rsquo;s</a>. The UI maker must make it <strong>possible</strong> for text to reflow when the user zooms in, but the browser must make the reflow actually happen.</p>
        </section>
        <section id="lettextprinc" class="section-quiz"></section>
        <section>
          <header>
            <h3>Browser support</h3>
          </header>
          <p><mark id="hint-05" class="hint covert">Browsers for Windows, OS X, and Linux implement reflow, as these criteria require. When a user increases the font sizes or the scale of the entire view, the browser reflows</mark> the text so each line wraps before reaching the edge of the visible area.</p>
          <p><mark id="hint-06" class="hint covert">But most mobile browsers, those operating on iOS and Android, do not. Zooming in does not make the text reflow.</mark> Instead, the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Viewport_concepts"><q>layout viewport</q> expands beyond the <q>visual viewport</q></a>. The web page is as wide as the layout viewport, so only part of the page width is visible at any one time.</p>
        </section>
        <section id="browser" class="section-quiz"></section>
        <section>
          <header>
            <h3>Strategy</h3>
          </header>
          <p>Conforming to the above-mentioned guidelines is easy for delivery of UIs to computer browsers. To conform, simply don&rsquo;t complicate your code with restrictions on how items are positioned and sized. If you leave your text-containing elements&rsquo; styles free of any height or maximum-height declarations and allow items to move as preceding items become larger, the user can enlarge the text and this will expand text containers as needed. Otherwise, a text node could grow larger than its container&rsquo;s permitted size, or its container could collide with another item, making some of the text invisible or overlapping, or requiring the user to scroll in two dimensions.</p>
          <p>But <mark id="hint-07" class="hint covert">conforming for mobile browsers is not so easy. It requires compensating for the browsers&rsquo; failure to perform reflow.</mark></p>
          <p>So, an effective strategy on size customization is:</p>
          <ol>
            <li>Keep it simple: Do not insert into your CSS rulesets any height limits or fixed positions that might block the growth of preceding text containers. This will ensure benign behavior in <strong>non-mobile</strong> browsers.</li>
            <li><mark id="hint-08" class="hint covert">Decide whether to take responsibility for accessible size control in mobile browsers. You can conform to WCAG without adding a size feature, but if you choose to add one you will improve some users&rsquo; experiences on mobile browsers. If your (or your team&rsquo;s) decision is to take this responsibility, add a text-size or zoom control to the UI.</mark></li>
          </ol>
          <p>Utopia websites have adopted both of these strategies. Most do not offer any size controls, but some do, and the latter usually let the user control text size, rather than content size. Here are two examples:</p>
          <ul>
            <li>Strategy 1: <a href="https://www.utopiainvestments.com.au/retail/ret/articles/insights/research-commentary/retirement-and-superannuation/plan-for-your-life.jsp">Utopia Australia retail retirement article</a></li>
            <li>Strategy 2: <a href="https://advisors.utopia.com/VGApp/iip/site/advisor/researchcommentary/article/IWE_InvComBrexitAndVluDvsfdPtfls">Utopia financial advisor research and commentary article</a></li>
          </ul>
        </section>
        <section id="strategy" class="section-quiz"></section>
        <section>
          <header>
            <h3>Text-Size controls</h3>
          </header>
          <p>If your strategy is to take responsibility for accessible size control, you may choose to let the user adjust only text sizes or entire content sizes. Utopia UIs have mostly chosen to offer only text-size controls, like the one on the above-cited financial advisor page.</p>
          <p>Perform these operations:</p>
          <ol>
            <li><mark id="hint-09" class="hint covert">Open the above-cited financial-advisor page.</mark></li>
            <li>Note its text-size controls, rendered as three buttons labeled <q>A</q> in different sizes.</li>
            <li>Operate all three controls. Note that the text sizes change, but the sizes of the social-media icons and the video preview image remain unchanged. Note also that, if you click any text-size button, clicking it again does nothing. So the controls offer a choice among three text-size levels.</li>
            <li><mark id="hint-10" class="hint covert">Use the <q>Font size</q> browser setting to change the font size to <q>Very large</q>, then operate the three text-size controls again.</mark></li>
            <li><mark id="hint-11" class="hint covert">Use the <q>Font size</q> browser setting to change the font size to <q>Very small</q>, then operate the three text-size controls again. Note that this time the text-size controls don&rsquo;t change anything.</mark></li>
          </ol>
          <p>As you have seen, <mark id="hint-12" class="hint covert">UI controls, browser controls, and operating-system controls may interact, sometimes in surprising ways, to determine the sizes of items.</mark></p>
          <p>If you can, open the same page in a mobile browser and operate the text-size control. Note that text sizes change with reflow. Trying zooming in and out with spread and pinch gestures, and note that zooming does not cause reflow.</p>
        </section>
        <section id="textcontrol" class="section-quiz"></section>
        <section>
          <header>
            <h3>Content-size controls</h3>
          </header>
          <p>You may achieve superior accessibility by offering content-size control instead of text-size control. Why?</p>
          <ul>
            <li>Users who need enlargement are likely to need more than just text enlarged.</li>
            <li>Enlarging some but not all of the items on a page sometimes produces confusing layouts.</li>
          </ul>
          <p>If you want to let the user enlarge both text and graphics together, with reflow on all devices, you can do so most easily with two tactics:</p>
          <ul>
            <li>Set the sizes of graphics in font-size units (<code>rem</code>) rather than in pixels, inches, or any other absolute lengths.</li>
            <li>Add font-size controls to your UI.</li>
          </ul>
          <p>Perform these operations:</p>
          <ol>
            <li>Open a <a href="../../gen/examples/zoom" target="_blank">size-customization example</a>.</li>
            <li>Use its content-size adjustment form at the top of the page. Make the content as large as possible and as small as possible.</li>
            <li>
              Do that again while also manipulating three other variables:
              <ul>
                <li>the font-size setting</li>
                <li>the browser zoom</li>
                <li>the width of the browser window</li>
              </ul>
            </li>
            <li>Note that the largest possible sizes in the narrowest possible window are impractical. However, users who need enlargement can still benefit from it if they use large monitors.</li>
            <li>Note that the text reflows as needed.</li>
            <li>Open Utopia&rsquo;s <a href="https://investor.utopia.com/529-plan/" target="_blank">page about 529 plans</a>.</li>
            <li>Using the browser&rsquo;s built-in zooming feature, try combinations of content sizes and window widths, including sizes and widths as large and as small as possible.</li>
            <li>Note that, when you enlarge the content on the 529-plans page and then narrow the window, the text stops reflowing and you can&rsquo;t see whole lines without scrolling horizontally.</li>
            <li>Make the size-customization example the active tab or window. Reload the page.</li>
            <li>Open the developer tools and select the <code>html</code> element in the <q>Elements</q> panel.</li>
            <li>Click the <q>+</q> and <q>&minus;</q> buttons and note in the <q>Elements</q> panel that the <code>html</code> element&rsquo;s <code>font-size</code> attribute changes to show the new <q>root</q> font size.</li>
            <li>Keep pressing </li>
          </ol>
        </section>
        <section id="method" class="section-quiz"></section>
      </section>
    </main>
  </body>
</html>

==> mod/atechtest/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script defer src="../../gen/homeData.js"></script>
    <script defer src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The <a href="../ats">Assistive Technologies module</a> states that the makers of assistive technologies cooperate with UI creators by conforming to the same standards. In principle, if your UI conforms and a user&rsquo;s assistive technology conforms, the user should experience success in enjoying the UI&rsquo;s features. But failures occur, and it is in Utopia&rsquo;s interest to limit the impact of such failures on its users. Selective testing of UIs with assistive technologies helps achieve this goal.</p>
      </section>
      <section>
        <header>
          <h2>Who tests</h2>
        </header>
        <p>At Utopia,testing with assistive technologies occurs in multiple venues:</p>
        <ul>
        </ul>
      </section>
      <section id="who" class="section-quiz"></section>
      <section>
        <header>
          <h2>When to test</h2>
        </header>
        <p>Testing with assistive technologies is usually the last kind of testing. <mark id="hint-01" class="hint covert">Typically, you do linting, then automated testing, and then testing that emulates keyboard-only browsing, in each case revising your code until it passes all tests. You then test with some assistive technologies.</mark></p>
        <p>By the time you (or others) test with assistive technologies, you have reason to believe that your UI conforms to all applicable accessibility norms. The testing with assistive technologies verifies that this is true, or raises questions for investigation.</p>
      </section>
      <section id="when" class="section-quiz"></section>
      <section>
        <header>
          <h2>Which assistive technologies</h2>
        </header>
        <p>If you are developing a typical Utopia UI, it is visually oriented. So, it can be helpful to verify that your UI is compatible with some common assistive technologies designed to overcome vision disabilities. Those technologies include:</p>
        <ul>
          <li>screen readers</li>
          <li>magnifiers</li>
          <li>contrast enhancers</li>
        </ul>
        <p>These assistive technologies change the rendering of the views and interactions in your UI. <mark id="hint-02" class="hint covert">A screen reader re-renders them as speech</mark>, enhanced with metadata. <mark id="hint-03" class="hint covert">Magnifiers and contrast enhancers change the way they look.</mark> Testing with these technologies lets you verify that, even when they manipulate your UI, it still works as you intend.</p>
      </section>
      <section id="which" class="section-quiz"></section>
      <section>
        <header>
          <h2>Testing with screen readers</h2>
        </header>
        <section>
          <header>
            <h3>What to test with</h3>
          </header>
          <p><mark id="hint-04" class="hint covert">Developers at Utopia have access to these screen readers for testing, either built into operating systems or as applications:</mark></p>
          <ul>
            <li>Narrator (built into Windows)</li>
            <li>NVDA (for Windows)</li>
            <li>JAWS (for Windows)</li>
            <li>VoiceOver (built into OS X)</li>
            <li>VoiceOver (built into iOS)</li>
            <li>TalkBack (built into Android)</li>
          </ul>
          <p>The user experience on websites can vary among screen readers, and for each screen reader can also vary among browsers. Browsers available for testing at Utopia include:</p>
          <ul>
            <li>Internet Explorer (built into Windows)</li>
            <li>Chrome (for Windows)</li>
            <li>Firefox (for Windows)</li>
            <li>Safari (built into OS X)</li>
            <li>Chrome (for OS X)</li>
            <li>Firefox (for OS X)</li>
            <li>Safari (built into iOS)</li>
            <li>Chrome (for iOS)</li>
            <li>Firefox (for iOS)</li>
            <li>Chrome (built into Android)</li>
            <li>Firefox (for Android)</li>
          </ul>
          <p>To obtain some of the above devices, browsers, and screen readers for testing, you may need to submit requests or borrow devices.</p>
          <p>When choosing which combination(s) of a screen reader and a browser to test with, you can consider which of them you already have access to. If you have access to multiple combinations, you can also consider the most popular combinations, which are:</p>
          <ul>
            <li>Windows: NVDA with Firefox, JAWS with Internet Explorer</li>
            <li>OS X: VoiceOver with Safari</li>
            <li>iOS: VoiceOver with Safari</li>
            <li>Android: TalkBack with Chrome</li>
          </ul>
          <p>Testing with at least one screen reader and at least one browser gives you much more insight than not doing any such testing. For additional insight, it can be most effective to test with a screen reader on both a computer and a mobile operating system.</p>
        </section>
        <section id="whatsr" class="section-quiz"></section>
        <section>
          <header>
            <h3>A first test</h3>
          </header>
          <p>Just for training (and contrary to normal practice), let us begin with an interface that has <strong>not</strong> passed all automated tests. Perform these operations:</p>
          <ol>
            <li>Open an example of a <a href="../../gen/examples/image" target="_blank">page with an inaccessible image</a>.</li>
            <li>
              Test the accessibility of the page with axe. Note that it reports four issues, all classified as deviations from &ldquo;best practices&rdquo;:
              <ul>
                <li>a gap in heading levels</li>
                <li>the absence of a <code>main</code> element</li>
                <li>two blocks of content that are not in any <a href="https://www.w3.org/TR/wai-aria-1.1/#landmark">landmark</a> (including a <code>main</code> element)</li>
              </ul>
            </li>
          </ol>
          <p>But there are two more accessibility problems not detected by axe. To see them, perform these operations:</p>
          <ol>
            <li>Inspect the image with the developer tools. Note that it has an <code>alt</code> attribute, with an empty value. Is there information in the image? Yes. Review the text below the image. Does that text reproduce all the facts stated in the image? Some, but not all. Assistive technologies need to get the rest of the information from the <code>alt</code> attribute, but the information isn&rsquo;t there.</li>
            <li>Inspect the <q>Sources</q> note with the developer tools. Note that it is an <code>h6</code> element. But <code>h6</code> is a heading element. This content is not a heading.</li>
          </ol>
          <p>Imagine that you had failed to discover these six accessibility issues. Would testing the image example page with a screen reader reveal any of them? To find out, perform these operations:</p>
          <ol>
            <li>
              Turn on a screen reader.
              <ul>
                <li>Narrator: press <kbd>CTL</kbd>-<kbd>WIN</kbd>-<kbd>ENTER</kbd>.</li>
                <li>NVDA: press <kbd>CTL</kbd>-<kbd>ALT</kbd>-<kbd>n</kbd> or launch the application, then click <q>OK</q>.</li>
                <li>JAWS: Launch the application.</li>
                <li>VoiceOver on OS X: press <kbd>CMD</kbd>-<kbd>F5</kbd>.</li>
              </ul>
            </li>
            <li>Click the image example page to make it the active window, if it isn&rsquo;t already.</li>
            <li>Reload the page.</li>
            <li>Note the following if you are testing with JAWS and your keyboard layout is not ENG INTL: JAWS uses the ENG INTL layout, regardless of the layout currently in effect.</li>
            <li>
              Ask the screen reader to go to the top of the page:
              <ul>
                <li>Narrator: press <kbd>&leftarrow;</kbd> until Narrator announces <q>No previous item</q>.</li>
                <li>NVDA: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>JAWS: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>VoiceOver: press <kbd>CAPSLOCK</kbd>-<kbd>h</kbd>.</li>
              </ul>
            </li>
            <li>
              <mark id="hint-05" class="hint covert">Ask the screen reader to go to the next heading:</mark>
              <ul>
                <li>Narrator: impossible with Chrome.</li>
                <li>NVDA: press <kbd>h</kbd>.</li>
                <li>JAWS: press <kbd>h</kbd>.</li>
                <li>VoiceOver: press <kbd>CAPSLOCK</kbd>-<kbd>h</kbd>.</li>
              </ul>
            </li>
            <li><mark id="hint-06" class="hint covert">Repeat. Note how the <code>h6</code> element is announced.</mark></li>
            <li>
              Ask the screen reader to go to the top of the window:
              <ul>
                <li>Narrator: already done.</li>
                <li>NVDA: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>JAWS: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>VoiceOver: press <kbd>CTL</kbd>-<kbd>OPT</kbd>-<kbd>HOME</kbd>.</li>
              </ul>
            </li>
            <li>
              Ask the screen reader to announce the next and previous landmarks (also called <q>regions</q>) on the page:
              <ul>
                <li>Narrator: impossible with Chrome.</li>
                <li>NVDA: Press <kbd>d</kbd> and <kbd>SHIFT</kbd>-<kbd>d</kbd>.</li>
                <li>JAWS: Press <kbd>r</kbd> and <kbd>SHIFT</kbd>-<kbd>r</kbd>.</li>
                <li>VoiceOver: impossible.</li>
              </ul>
              Note that NVDA finds no landmark, but JAWS properly finds the <code>banner</code> landmark, <a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/banner.html">automatically assigned to the <code>header</code> element</a>.
            </li>
            <li>
              Ask the screen reader to announce the next paragraph or heading on the page:
              <ul>
                <li>Narrator: Press <kbd>CAPSLOCK</kbd>-<kbd>&rightarrow;</kbd>.</li>
                <li>NVDA: Press <kbd>CTL</kbd>-<kbd>&downarrow;</kbd>.</li>
                <li>JAWS: Press <kbd>p</kbd>.</li>
                <li>VoiceOver: Press <kbd>CTL</kbd>-<kbd>OPT</kbd>-<kbd>&rightarrow;</kbd>.</li>
              </ul>
            </li>
            <li>Repeat until you have passed the image. Note that the screen reader (except Narrator) ignores the image, which is correct, because an empty <code>alt</code> attribute means that the image is unnecessary for assistive technologies.</li>
          </ol>
          <p>If you had not previously discovered the five accessibility issues listed above, testing with a screen reader would have revealed them. But this method would have been relatively inefficient.</p>
          <p><mark id="hint-07" class="hint covert">This testing with a screen reader might have revealed a new accessibility issue otherwise not discoverable. In this case, that did not happen. When it does, most often the problem is a failure of the screen reader to support the applicable standards. For that reason, testing with screen readers is particularly valuable if you intend to make your UI compensate for such defects.</mark> In that case, it will be beneficial to test with more than one combination of screen reader and browser, because correcting a fault in one combination could create a fault in another.</p>
        </section>
        <section id="first" class="section-quiz"></section>
        <section>
          <header>
            <h3>Corrections</h3>
          </header>
          <p>In the <q>Elements</q> panel of the developer tools, temporarily correct the accessibility defects noted above, specifically:</p>
          <ol>
            <li>Insert a <code>main</code> element between the <code>body</code> element and all of its content.</li>
            <li>Change the <code>h6</code> element to a <code>p</code> element.</li>
            <li>Give the <code>alt</code> attribute of the <code>img</code> element a value that provides all of the information in the image.</li>
            <li>Commit these temporary corrections by clicking anywhere else in the <q>Elements</q> panel.</li>
          </ol>
        </section>
        <section>
          <header>
            <h3>Retest</h3>
          </header>
          <p>Perform these operations:</p>
          <ol>
            <li>Conduct the same tests with a screen reader as above, but do not reload the page. Reloading would delete your changes.</li>
            <li>Note that the screen reader (except Narrator) recognizes the <code>main</code> landmark.</li>
            <li>Note that the screen reader (except Narrator) recognizes only an <code>h1</code> and an <code>h2</code> heading.</li>
            <li>Note that the screen reader now recognizes the image and announces it with the accessible name you gave it. (<mark id="hint-08" class="hint covert">Narrator treats the <q>Sources</q> text as part of the image&rsquo;s accessible name.</mark>)</li>
            <li>
              Turn off the screen reader:
              <ul>
                <li>Narrator: press <kbd>CTL</kbd>-<kbd>WIN</kbd>-<kbd>ENTER</kbd>.</li>
                <li>NVDA: press <kbd>INSERT</kbd>-<kbd>q</kbd>, or open the hidden icons near the bottom of the taskbar, click the NVDA icon, and choose <q>Exit</q> in the menu. Confirm with <q>OK</q>.</li>
                <li>JAWS: Hover over the JAWS icon in the taskbar and click the close button in the popup window thumbnail. Confirm with <q>OK</q>.</li>
                <li>VoiceOver: press <kbd>CMD</kbd>-<kbd>F5</kbd>.</li>
              </ul>
            </li>
          </ol>
        </section>
        <section>
          <header>
            <h3>Testing more complex pages</h3>
          </header>
          <p>This section has given you practice with only a small fraction of the features of screen readers. To test pages with forms, tables, streaming media, embedding, or other features, you will need to study and follow screen-reader documentation. In addition to built-in documentation offered by their help options, there is manufacturer and third-party documentation, but it is not always accurate, up-to-date, and applicable to all browsers, so you will probably need to experiment. Deque, a Utopia contractor, offers a <a href="https://dequeuniversity.com/screenreaders/">set of guides to the keyboard shortcuts of several screen readers</a>. The Utah State University Center for Persons with Disabilities also publishes a <a href="https://webaim.org/articles/screenreader_testing/">guide to screen-reader testing</a>, with links to its documentation on JAWS, NVDA, and VoiceOver.</p>
        </section>
        <section id="retest" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Testing with magnifiers</h2>
        </header>
        <p>Whole-content magnifiers and text-only magnifiers are built into operating systems, and other hardware and software magnifiers are available as separate products.</p>
        <p>Testing with magnifiers can reveal accessibility problems that would be difficult to discover otherwise. Here are some reasons:</p>
        <ul>
          <li>Automated code-inspection tools, such as axe, don&rsquo;t try to test for magnification errors.</li>
          <li>Some magnification problems are matters of degree, so you may need to exercise judgment as to whether the problems are serious enough to merit resolution.</li>
          <li>The norms on magnifiability are vague, because they require the preservation of <q>content</q> and <q>functionality</q>, so you might be unable to decide on magnification issues without input from colleagues and users who rely on magnification.</li>
        </ul>
        <p>Testing with a magnifier is straightforward. You navigate and operate with magnification on. You also vary the width of the browser window. Various methods of magnification that you can use are described in the <a href="../size">Accessible Sizing</a> module. Perform these operations:</p>
        <ol>
          <li>Set whole-content magnification (zoom) to 400%, to test for conformity to WCAG Success Criterion <i>1.4.10</i>.</li>
          <li>Navigate to some Utopia web pages, also narrowing the window width, to check for any loss of content or functionality.</li>
          <li>Return the whole-content magnification to 100%.</li>
          <li><mark id="hint-09" class="hint covert">In Chrome, you can&rsquo;t fully test for conformity to WCAG Success Criterion <i>1.4.4</i> by using the font-size setting, because its maximum size is less than 200% of normal. But on any web page you can open the developer tools and edit the font size of the <code>html</code> element in the <q>Styles</q> pane, making it <code>32px</code>, double the normal size.</mark> Try this on a few pages and check for any loss of content or functionality.</li>
        </ol>
        <p>You can also test with both whole-content and text magnification on at the same time. The <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html#the-relation-of-reflow-to-the-success-criterion-<i>1.4.4</i>-resize-text">W3C says that both should be possible together</a>.</p>
        <p>An example of what you can discover is a <a href="https://retirementplans.utopia.com/VGApp/pe/pubeducation/calculators/RetirementNestEggCalc.jsf">page explaining Monte Carlo simulations</a>. As of April 2020, if you followed the &ldquo;What is Monte Carlo Simulation?&rdquo; link at the bottom of the page, set whole-content magnification to 400%, and minimized the window width, you got overlapping text, shown below:</p>
        <p class="exhibit"><img src="../../gen/static/overlap.png" alt="heading overlapping with the text below it"></p>
        <p>Another example is a <a href="https://investor.utopia.com/mutual-funds/profile/performance/W186?FundIntExt=EXT">table that becomes hard to read when magnification is on</a>. You can see numbers, such as $11.79, but you can&rsquo;t easily see what they mean, because the column and row headers that explain them are so far away that they become off-screen if the content is magnified.</p>
        <p class="exhibit"><img src="../../gen/static/headersgone.png" alt="table headers off-screen because of magnification"></p>
        <p>Testing with magnifiers doesn&rsquo;t diagnose problems, but does  reveal them, helping you discover what you need to investigate.</p>
      </section>
      <section id="mag" class="section-quiz"></section>
      <section>
        <header>
          <h2>Testing with contrast enhancers</h2>
        </header>
        <p>Contrast enhancers are built into operating systems, and others are available as separate products.</p>
        <p>Testing with contrast enhancers can reveal accessibility problems that would be difficult to discover otherwise. Here are some reasons:</p>
        <ul>
          <li>Automated code-inspection tools, such as axe, don&rsquo;t try to simulate contrast enhancement.</li>
          <li>If you turn on a contrast enhancer and then perform an automated code inspection, you will get the same result as without a contrast enhancer. So personal inspection or testing on users becomes necessary.</li>
          <li>There are no WCAG principles on contrast enhancement, so mainstream testing systems tend to ignore it.</li>
          <li>There is an infinitely large set of possible contrast enhancements, so it would be problematic to calculate any norm of contrast-compatible accessibility.</li>
        </ul>
        <p>Testing with a contrast enhancer should be straightforward, and it is on OS X, but not on Windows.</p>
        <p>On OS X, perform these operations:</p>
        <ol>
          <li>Navigate to the <a href="https://about.utopia.com">About Utopia</a> page.</li>
          <li>Open System Preferences and select the <q>Accessibility</q> preference pane.</li>
          <li>Choose the <q>Display</q> tab.</li>
          <li>Check the <q>Increase contrast</q> checkbox.</li>
          <li>Move the <q>Display contrast</q> slider to <q>Maximum</q>.</li>
          <li>Scroll down to the <q>Community Stewardship</q> heading.</li>
          <li>Move the slider back and forth. Note that high contrast actually <strong>decreases</strong> the contrast between <q>Community Stewardship</q> and its background.</li>
          <li>Experiment with the other settings in that panel.</li>
        </ol>
        <p>On Windows, the <q>Ease of access</q> settings include contrast alterations, and they affect the rendering of pages in other browsers, but not Chrome. Chrome has a <q>High contrast</q> extension, but it is not available at Utopia. So, to test with high contrast, you need to use Firefox or Internet Explorer.</p>
      </section>
    </main>
  </body>
</html>

==> mod/ats/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>UIs and Assistive Technologies</h2>
        </header>
        <p>Developers collaborate with <a href="../agent">many other agents at Utopia</a> to make UIs accessible.</p>
        <p>But the division of labor for accessibility extends beyond Utopia. No effort by us would make our UIs accessible in practice without cooperation from other agents.</p>
        <p>Users discover UIs with the help of search engines and utilize UIs with the help of operating systems, browsers, devices, and peripherals. So, the idea that users <strong>directly</strong> interact with UIs is an oversimplification. In addition, <mark id="hint-00" class="hint covert">a user with a particular disability is likely to make use of a special-purpose hardware and/or software device designed to address that disability: an <dfn>assistive technology</dfn>.</mark><p>
        <p>There are <a href="https://en.wikipedia.org/wiki/Assistive_technology">hundreds of assistive-technology products</a>. Computer and mobile-device operating systems typically have about 20 to 40 assistive technologies built in. Other assistive technologies are open-source or commercial products. Examples:</p>
        <ul>
          <li>Magnifiers</li>
          <li>Screen readers</li>
          <li>Contrast enhancers</li>
          <li>Color adjusters</li>
          <li>Video caption modifiers</li>
          <li>Special keyboards</li>
          <li>Speech recognizers</li>
          <li>Translators</li>
          <li>Eye trackers</li>
          <li>Mouth sticks</li>
          <li>Special joysticks</li>
          <li>Special switches</li>
          <li>Nonmanual input devices</li>
          <li>Braille displays</li>
        </ul>
        <p>Functions performed by assistive technologies include:</p>
        <ul>
          <li>Visibility improvement</li>
          <li>Text-to-speech conversion</li>
          <li>Text-to-braille conversion</li>
          <li>Speech recognition</li>
          <li>Language translation</li>
          <li>Input classification</li>
          <li>Input-to-keycode conversion</li>
          <li>Structure recognition</li>
          <li>Navigation support</li>
          <li>Text reflow</li>
        </ul>
        <p>One of the responsibilities of UI creators is to <a href="https://www.w3.org/TR/WCAG21/#compatible">make their UIs compatible with assistive technologies</a>. This is not as difficult as it might seem, because compatibility is symmetric. Just as your UIs must be compatible, assistive technologies must also be compatible. Both are expected to conform to a shared set of standards. Instead of checking to ensure that each UI is compatible with each assistive technology, UI creators can ensure their UIs conform to the standards.</p>
        <p>But <strong>selective</strong> UI testing with assistive technologies is practical and helpful. It helps you verify compatibility and investigate any failures. The <a href="../atechtest">Testing with Assistive Technologies</a> module discusses this.</p>
      </section>
      <section id="ats" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/axe/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Various open-source and proprietary algorithms have been created for accessibility testing. Some of them are implemented in extensions for web browsers. Utopia has deployed an open-source tool of this kind named <a href="https://github.com/dequelabs/axe-core">axe</a>. The set of algorithms that it implements is named &ldquo;axe-core&rdquo;. Axe is sponsored by Deque and has about a hundred contributors.</p>
        <p>At Utopia, axe is installed with Firefox, and you can install it yourself on Chrome.</p>
      </section>
      <section>
        <header>
          <h2>Navigating and using</h2>
        </header>
        <p>Once axe is installed as a Chrome extension, perform these operations:</p>
        <ol>
          <li>Visit <a href="https://www.fidelity.com" target="_blank">the Fidelity Investments home page</a> and drag it to a new window, so you can see these instructions at the same time.</li>
          <li>With that window active, <mark id="hint-00" class="hint covert">open the Chrome developer tools. Look for <q>axe</q> among the panel names. Open it.</mark></li>
          <li>Click the <q>Analyze</q> button. This runs the axe-core test, the same one used in <a href="../success">the comparison of Utopia with its competitors</a>. In that comparison, as of January 2019, this tool reported 110 issues on Fidelity&rsquo;s home page (versus only 1 on Utopia&rsquo;s home page). Note how many are reported now. It is the number in the left column after <q>All issues found</q>.</li>
          <li><mark id="hint-01" class="hint covert">Note a tabulation in the left column of the categories of issues reported.</mark> Select one category, such as <q>Images must have alternative text</q>.</li>
          <li>In the next column on the right, at the top, note the same category description, and, under it, two options. Select the <q>Highlight</q> option. Note on the web page an element is outlined with a blue line and black dots. Axe has identified this as an element with the specified accessibility issue. Below, under <q>Element source</q>, note the code for the element. To the right, axe specifies several possible methods for resolving the issue.</li>
          <li>If the issue category has multiple instances, in the upper-right corner of the panel note the <q>1 of <var>n</var></q> iterator. You can use it to cycle through the issues of the given category.</li>
          <li>Axe gives you some control over the issues it reports. Open the <q>All issues found</q> menu in the left column. You can limit the issue types with that menu.</li>
          <li>Close the Fidelity window.</li>
          <li><mark id="hint-02" class="hint covert">Visit an <a href="../../gen/examples/formbad.html" target="_blank">example of an inaccessible form page</a> and drag it to a new window.</mark></li>
          <li>Use axe to analyze that page.</li>
          <li>Note that axe reports form elements without labels. In particular, it says the text input field and all of the radio buttons have missing labels. They all look labeled on the web page, but that is because there is text next to each one. Text does not become a label for an input merely by being near it. An accessible label must be coded as a label.</li>
          <li>Visit Utopia&rsquo;s <a href="https://www.utopia.com.hk/portal/mvc/detail/etf/overview?portId=9586&assetCode=EQUITY##overview">page on the FTSE Asia ex Japan High Dividend Yield Index ETF</a>. Analyze it with axe.</li>
          <li>Visit the <a href="../tree" target="_blank">Accessibility Tree module</a> and analyze it with axe.</li>
          <li>Note that axe reports some color-contrast issues, but also says it is not sure whether they are real issues. This illustrates that axe, like most tools, has limits. Axe is one of the best tools of its type, but not perfect. It is designed to test for only some issue categories. Occasionally it may report issues that are not real. The lesson: Use axe, because it is many times faster than a human performing the same tests, but don&rsquo;t assume it does the whole job, and don&rsquo;t blindly trust its findings.</li>
        </ol>
      </section>
      <section id="axe" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/better/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Is best good enough?</h2>
        </header>
        <p>Utopia&rsquo;s home page has become much more accessible, and it&rsquo;s now better than most or all of its major competitors. We can be proud of years of hard work making us an industry leader.</p>
        <p>Is that enough?</p>
        <p>In accessibility, as in other domains, leadership is precarious. We can backslide if we add rich UI features without attention to accessibility. And competitors will either decide or be forced to rectify their accessibility faults.</p>
        <p>But it isn&rsquo;t only competition that drives accessibility at Utopia. If our UIs are good but can be better, and if we can make them serve a more diverse user base, we want to make those improvements. This will, incidentally, also widen our industry lead in accessibility.</p>
        <p>We have thousands of web and app pages or views. When we inspect them with our diverse clientele in mind, we discover opportunities to solidify our industry lead while also improving user experiences.</p>
        <p>Let&rsquo;s look at a few examples.</p>
      </section>
      <section>
        <header>
          <h2>Making text easier to read</h2>
        </header>
        <p>Users in some situations can read the text in our UIs more easily if we make some simple configuration changes. The image below shows one example: a <a href="https://www.utopiajobs.com/">disclosure of Utopia&rsquo;s commitment to equal employment opportunity</a> (you can see this disclosure by performing a job search and choosing any job). The readability barrier arises from the small font size (8.3pt) and the text color (#999999), <q>dusty gray</q>. <mark id="hint-00" class="hint covert">We can improve readability by increasing the foreground-background contrast. Any darker color from medium gray (#666666) to black (#000000) would conform to common accessibility norms. Enlarging the font would also improve readability.</mark></p>
        <p class="exhibit"><img src="../../gen/static/contrast.png" alt="excerpt from equal-opportunity statement on Utopia careers page"></p>
        <p>In fact, this content has now been made more accessible. The color was darkened to #4d4d4d, and the font size was increased to 12 pixels.</p>
      </section>
      <section id="contrast" class="section-quiz"></section>
      <section>
        <header>
          <h2>Explaining form buttons better</h2>
        </header>
        <p><a href="https://personal.utopia.com/us/buysell/BuyFunds?nonRetirementMode=true">The dialog below</a> (which requires a login) appears when a user asks to cancel a transaction. It contains 2 buttons, labeled <q>NO</q> and <q>YES</q>, but a user could mistakenly press the wrong one.</p>
        <p class="exhibit"><img src="../../gen/static/yes-no-buttons.png" alt="cancelation dialog, asking the user to press NO not to cancel or YES to cancel a transaction"></p>
        <p>The buttons&rsquo; explanations are at the top, and an inattentive, distracted, or hasty reader may not obey them. <mark id="hint-01" class="hint covert">Nothing in the HTML code connects them to the buttons.</mark> Imagine a blind user listening to an assistive technology that interprets the content vocally (a screen reader). The user reaches the buttons with the tab key. <mark id="hint-02" class="hint covert">The screen reader says <q>NO: button</q> or <q>YES: button</q>.</mark> The user might guess that the <q>NO</q> button cancels the transaction, although in fact it&rsquo;s the opposite.</p>
        <p>We can put the explanations next to (or in) the buttons and connect them in the code for the benefit of assistive technologies. We can also try other design changes and test them on a sample of users.</p>
      </section>
      <section id="formbutton" class="section-quiz"></section>
      <section>
        <header>
          <h2>Presenting fund price changes more understandably</h2>
        </header>
        <p>Utopia lets the public compare its funds and ETFs. If you go to the <a href="https://investor.utopia.com/mutual-funds/list#/etf/asset-class/month-end-returns">ETF list</a>, choose some ETFs, click &ldquo;COMPARE&rdquo;, and then click &ldquo;Growth of $10,000 chart&rdquo;, you can see a graph, which, when this module was written, looked like the one below. It aims to show how a $10,000 investment in each ETF would have grown. But it can be improved in several ways.</p>
        <p class="exhibit"><img src="../../gen/static/fund-compare.png" alt="graph comparing 5 funds&rsquo; performance"></p>
        <p>We can make it easier to understand by:</p>
        <ul>
          <li>Using non-color coding. <mark id="hint-03" class="hint covert">A user with color vision deficiency may be unable to identify which line describes which ETF.</mark></li>
          <li>Expanding the date abbreviations. <mark id="hint-04" class="hint covert">It is not clear whether <q>Dec 14</q> and <q>Dec 16</q> are 2 years apart or 2 days apart.</mark></li>
          <li>Making the hovering tips more informative. <mark id="hint-05" class="hint covert">They show prices to the nearest penny, but they don&rsquo;t show the date at all.</mark></li>
          <li>Improving the basis of comparison. The ETFs began at different times, and each ETF started with $10,000. This makes it impossible to meaningfully compare the amounts or the rates of change.</li>
        </ul>
        <p><mark id="hint-06" class="hint covert">If you can see the graph, you can infer that two of the ETFs had price increases to about $30,000 and one of the ETFs decreased in price.</mark> However, the graph could be more informative if some improvements in accessibility were made.</p>
        <p>Tabular data accompany the graphs, so users who want unambiguous numbers can consult the tables. But the tables do not give the granular price data given by the graphs. Therefore, improving the graphs would unlock more data for some users, especially those who can&rsquo;t easily distinguish the colors.</p>
      </section>
      <section id="graph" class="section-quiz"></section>
      <section>
        <header>
          <h2>Prioritizing improvements</h2>
        </header>
        <p>Project managers prioritize accessibility improvements, like all other work. The usual factors such as time required, user traffic, reusability, and life expectancy of the UI are considered. Accessibility issues are often rated on a scale from &ldquo;blockers&rdquo; (they stop a user from using the UI) to &ldquo;minor&rdquo;. Also, making a UI conform to WCAG is usually more urgent than implementing a &ldquo;best practice&rdquo;. Finally, if a client has reported an accessibility problem to Utopia, eliminating that problem is prioritized.</p>
        <p>Experts agree that <mark id="hint-07" class="hint covert">one can produce accessibility most efficiently and effectively if one starts early, when a new UI is first contemplated.</mark> So accessibility deserves a high priority especially in the planning and design of a project.</p>
      </section>
      <section id="priority" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/cctest/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script defer src="../../gen/homeData.js"></script>
    <script defer src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Contrast enhancers help users with vision disabilities and users in difficult lighting conditions.</p>
        <p>These tools are built into operating systems and some browsers. They are also sometimes offered as controls by UIs. Others are available as separate products.</p>
      </section>
      <section>
        <header>
          <h2>Testing with contrast enhancers</h2>
        </header>
        <p>Testing with contrast enhancers can reveal accessibility problems that would be difficult to discover otherwise. Here are some reasons:</p>
        <ul>
          <li>Automated code-inspection tools, such as axe, don&rsquo;t try to simulate contrast enhancement.</li>
          <li>If you turn on a contrast enhancer and then perform an automated code inspection, you will get the same result as without a contrast enhancer. So personal inspection or testing on users becomes necessary.</li>
          <li>There are no WCAG principles on contrast enhancement, so mainstream testing systems tend to ignore it.</li>
          <li>There is an infinitely large set of possible contrast enhancements, so it would be problematic to calculate any norm of contrast-compatible accessibility.</li>
        </ul>
        <p>Testing with a contrast enhancer is straightforward.</p>
        <p>On OS X, perform these operations:</p>
        <ol>
          <li>Navigate to the <a href="https://about.utopia.com">About Utopia</a> page.</li>
          <li>Open System Preferences and select the <q>Accessibility</q> preference pane.</li>
          <li>Choose the <q>Display</q> tab.</li>
          <li>Check the <q>Increase contrast</q> checkbox.</li>
          <li>Move the <q>Display contrast</q> slider to <q>Maximum</q>.</li>
          <li>Scroll down to the <q>Community Stewardship</q> heading.</li>
          <li>Move the slider back and forth. Note that high contrast actually <strong>decreases</strong> the contrast between <q>Community Stewardship</q> and its background.</li>
          <li>Experiment with the other settings in that panel.</li>
        </ol>
        <p>On Windows, the <q>Ease of access</q> settings include contrast alterations, and they affect the rendering of pages in browsers other than Chrome. Chrome has its own <q>High contrast</q> extension, which is one of the <q>Utopia Approved Extensions</q>.</p>
        <p>To test with high contrast, turn it on and then check whether you can still see all the items and make all the distinctions that you otherwise could. In particular:</p>
        <ol>
          <li>Can you see all links and identify them as links?</li>
          <li>Have any images disappeared? (Background images vanish in some high-contrast configurations!)</li>
          <li>Are any color-coded graphs still understandable?</li>
          <li>When you hover over actionable elements with a mouse, can you still easily see the hover indicator?</li>
        </ol>
      </section>
    </main>
  </body>
</html>

==> mod/devtool/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The major web browsers include <dfn>developer tools</dfn>, an application for inspecting, testing, and debugging web code. Their features are similar, but currently Chrome&rsquo;s developer tools support the most advanced accessibility inspection. This module assumes you have opened it in Chrome on Windows, OS X, or Linux.</p>
      </section>
      <section>
        <header>
          <h2>Navigating and using</h2>
        </header>
        <p>Perform these operations now:</p>
        <ol>
          <li>Press the <code>F12</code> function key. This opens the developer tools.</li>
          <li>Note that there are several <dfn>panel</dfn>s. Normally, the panel that is initially open is <q>Elements</q>. If it isn&rsquo;t open, click on its tab to open it.</li>
          <li>Note that each panel may have one or more <dfn>pane</dfn>s. Normally the pane of the <q>Elements</q> panel that is initially open is <q>Styles</q>. If it isn&rsquo;t open, click on its tab to open it.</li>
          <li>In the <q>Elements</q> panel note the HTML code. Normally the <code>body</code> element is initially selected. If it isn&rsquo;t selected, click on it to select it.</li>
          <li>In the <q>Styles</q> pane note the style rulesets. A <dfn>ruleset</dfn> is a stylesheet entry, and it assigns values to style properties. Each statement assigning a value is a <dfn>declaration</dfn>. Because the <code>body</code> element is selected, the rulesets you see are those that apply to the <code>body</code> element.</li>
          <li>As an example, note the rulesets containing declarations that give values to the CSS property <code>margin</code>. One ruleset&rsquo;s declaration sets the value to <code>8px</code>, but another ruleset&rsquo;s declaration overrides that by setting the value to <code>0 auto</code>. How this works is not our concern now.</li>
          <li>In the <q>Styles</q> pane expand the <code>0 auto</code> value for <code>margin</code>. Note that the top and bottom margins have values <code>0</code>, and the left and right margins have values <code>auto</code>.</li>
          <li>In the <q>Elements</q> panel, expand the <code>main</code> element, then the <code>header</code> element, then the <code>div</code> element with the <code>doc-info</code> class, and then the <code>dl</code> element.</li>
          <li>Select the first <code>dt</code> element. Note that selecting it, or even hovering over it, highlights the corresponding part of the web page, in this case the <q>Author</q> element.</li>
          <li>Note that one of the rulesets for this <code>dt</code> element contains a declaration that sets the value of the <code>font-style</code> property to <code>italic</code>. Hover over that declaration. Note that a checked box appears. Click that box to clear it. Note what happens to the font style of <q>Author</q> and other elements governed by the same ruleset. You have (temporarily) removed the <code>font-style</code> condition, allowing the text to revert to its default style. Click the box again to reinstate that declaration.</li>
          <li>Select any of the other elements (such as <code>h1</code> or <code>h2</code>) in the <q>Elements</q> panel. You will see the styles change to those applicable to the selected element.</li>
          <li>Some elements in the <q>Elements</q> panel are initially collapsed. Expand one and see the code inside it by clicking on the expansion triangle at its left.</li>
          <li>Right-click any element on the web page (not in the developer tools) and select <q>Inspect</q>. That will open the developer tools if not yet open, expand all the ancestor elements of the element you chose, and select that element in the <q>Elements</q> panel.</li>
          <li>The content of the <q>Elements</q> panel and the <q>Styles</q> pane is editable. If you edit it, you immediately change the page accordingly, but only in your current browser display. You don&rsquo;t modify the code on the server that you loaded the page from. Clear the checkbox on the left of the <code>margin</code> property of the style of the <code>body</code> element, and note what happens.</li>
          <li>Right-click the <q>Test yourself</q> button at the bottom of this page and select <q>Inspect</q>.</li>
          <li>In the upper-right corner of the <q>Styles</q> pane, click the <q>Toggle Element State</q> button, which is labeled <code>:hov</code>.</li>
          <li>Force the element state to <code>:focus</code>. Note that a new ruleset gets inserted into the pane. Elements&rsquo; styles can depend on the states they are in. This <q>Toggle Element State</q> tool lets you simulate states and see what styles will apply.</li>
          <li>Switch to the <q>Sources</q> panel. That panel lets you see the files that the web page is composed from. It contains two columns. The <q>Page</q> pane in the left column shows all the file names in a filesystem tree. The right column has panes for individual files.</li>
          <li>Select <code>mod/devtool/(index)</code> in the left column. Note that it appears in a pane in the right column.</li>
          <li>Select <code>gen/style.css</code> in the left column. Note that it, too, appears in a pane in the right column.</li>
        </ol>
      </section>
      <section id="dtnav" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/embed/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Although links from one document to another are the main mechanism that integrates the web, embedding is a mechanism that creates tighter connections. Embedding is a kind of linkage that makes one document a part of another.</p>
        <p>Before you ensure that the embedding in your UI is accessible, those who design it will have decided to embed, rather than simply link. These alternatives have consequences for security, risk management, and reliability, as well as accessibility.</p>
      </section>
      <section>
        <header>
          <h2>What is embedding?</h2>
        </header>
        <p>Embedding is the inclusion of a document or application in another document or application. For convenience, let&rsquo;s call them the <dfn>host</dfn> and the <dfn>guest</dfn>. The host provides a place for the guest. The user consumes (or experiences) the guest while consuming the host, without leaving the host. <mark id="hint-00" class="hint covert">The host and the guest may or may not have the power to affect one another&rsquo;s appearance or operation.</mark></p>
        <p>Embedding on the web takes place by means of several technologies. Currently, the most common of these are:</p>
        <ul>
          <li><code>iframe</code></li>
          <li><code>video</code></li>
          <li><code>audio</code></li>
          <li><code>canvas</code></li>
        </ul>
        <p>Other embedding technologies, including <code>object</code> and <code>embed</code>, are in use, too, especially for embedding PDF files, SVG graphics, and Flash animations, but are becoming obsolete.</p>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>Embedding versus linking</h2>
        </header>
        <p>Currently, UI creators most often have reason to embed resources of these kinds:</p>
        <ul>
          <li>web pages</li>
          <li>graphics</li>
          <li>maps</li>
          <li>audio recordings</li>
          <li>video (with audio) recordings</li>
          <li>comments and discussions</li>
        </ul>
        <p>These could be linked to instead of embedded. Which is better? Some <strong>advantages</strong> of embedding:</p>
        <ul>
          <li><mark id="hint-01" class="hint covert">Embedding keeps the user on the host page when the user finishes consuming the guest content. The user does not need to navigate back to the host.</mark></li>
          <li><mark id="hint-02" class="hint covert">Therefore, embedding makes navigation easier for the user than linking, if the user does, in fact, consume the guest content and then resume consuming the host content.</mark></li>
        </ul>
        <p>Some <strong>disadvantages</strong> of embedding:</p>
        <ul>
          <li>Embedding non-Utopia content can create <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies#Security_concerns">vulnerabilities, such as <q>clickjacking</q></a>.</li>
          <li><mark id="hint-03" class="hint covert">Embedding makes a web page more complex.</mark> It becomes 2 documents, one inside the other. Or, recursively, it can become multiple documents, because guests can be hosts to other guests, without limit. This can complicate your efforts to make your content simple, coherent, responsive, and accessible.</li>
          <li>Not all embedding mechanisms lend themselves to accessibility.</li>
          <li>Embedding can make content load more slowly and consume more memory.</li>
        </ul>
      </section>
      <section id="versus" class="section-quiz"></section>
      <section>
        <header>
          <h2>Embedding mechanisms</h2>
        </header>
        <p>The most common current embedding mechanisms have these typical uses:</p>
        <ul>
          <li><code>iframe</code>: embedding an HTML document that provides audio, video, or map content</li>
          <li><code>video</code>: embedding a videocast</li>
          <li><code>audio</code>: embedding an audiocast</li>
          <li><code>canvas</code>: embedding a drawing</li>
        </ul>
        <p>Embedding can involve more than one of these. For example, <mark id="hint-04" class="hint covert">a <a href="https://investor.utopia.com/why-utopia" target="_blank">page</a> at <code>investor.utopia.com</code> uses the <code>iframe</code> mechanism to embed an HTML document, and this guest document, in turn, uses the <code>video</code> mechanism to embed a video.</p>
        <p>But it can be simpler, too. StaffNet news articles about events use the <code>video</code> mechanism to directly embed videos.</mark></p>
      </section>
      <section id="mechanism" class="section-quiz"></section>
      <section>
        <header>
          <h2>Accessible <code>iframe</code> embedding</h2>
        </header>
        <p>Embedding with the <code>iframe</code> mechanism requires decisions about security precautions, ownership, credit to guest-content owners, full-screen optionality, download priority, and guest height and width. This module does not address <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies">those decisions</a>, since it focuses on accessibility.</p>
        <p>Making an <code>iframe</code> element accessible requires that you:</p>
        <ul>
          <li>Give the <code>iframe</code> element a <code>title</code> attribute, with a value that describes the guest&rsquo;s content. This permits a user to know something about the guest without navigating into the guest to read the <code>title</code> element of the guest. <mark id="hint-06" class="hint covert">If you have multiple <code>iframe</code> elements on the same page, you will contribute to accessibility by making the <code>title</code> values different</mark>, for the benefit of users and assistive technologies that rely on the <code>title</code> attributes to choose which <code>iframe</code> element to navigate into.</li>
          <li><mark id="hint-07" class="hint covert">Ensure that the guest itself is accessible.</mark></li>
        </ul>
      </section>
      <section id="iframe" class="section-quiz"></section>
      <section>
        <header>
          <h2>Other accessible embedding</h2>
        </header>
        <p>Some Utopia websites contain video recordings with audio, audio-only recordings, and other embedded media. There are additional techniques, not covered in this module, for making such embedded content accessible.</p>
      </section>
    </main>
  </body>
</html>

==> mod/error/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The previous module, <a href="../inputval">Accessible Input Validation</a>, presents techniques that help users avoid errors. Your UI can advise users immediately if they begin to enter anything that is not valid.</p>
        <p>In addition, any good UI is organized so as to prevent preventable errors. For example, if a user owns no ETFs, then a <q>Which of your investments do you want a summary of?</q> form should not offer <q>ETFs</q> as one of the options.</p>
        <p>Even when you minimize the potential for error, however, errors are possible, and they include not only genuine errors but also deliberate ones. Consequently, you need to check user inputs on a server that (unlike a browser) is under Utopia&rsquo;s control and has access to needed data. When your server-based checking routine discovers errors, the server must respond appropriately, telling the user what was wrong and how to correct it.</p>
      </section>
      <section>
        <header>
          <h2>Accessibility through simplicity?</h2>
        </header>
        <p>Complexity makes accessible error handling more difficult to achieve. Conversely, simplicity make it relatively easy to achieve, though it may have other good and bad side effects.</p>
        <p>Imagine a form that contains only one control. It asks one question to the user and awaits an answer to that question. When the answer arrives, the server incorporates the answer into the decision on what simple form to present next. If the answer is erroneous, the server presents the same form again, with an explanation of what was wrong and how to correct it. The explanation is adjacent to the control that produced the error. The user doesn&rsquo;t need to wonder which control the error message is about. And, in fact, <mark id="hint-00" class="hint covert">the application can often prevent errors by limiting the options, based on what has been chosen already.</mark></p>
        <p>Now imagine a form with numerous controls. It asks several questions, and the user answers all of them before submitting the form for processing. Suppose some of the answers were erroneous. Then the UI needs to tell the user about several errors. In doing this, you want to avoid some problems for the user:</p>
        <ul>
          <li>Confusion about which answers are erroneous</li>
          <li>If there are multiple error messages, failure to understand which message applies to which answer</li>
          <li>Interactions that make the correction of one answer change the validity of another answer</li>
          <li>Interactions that make the amendment of a correct answer change the validity of that and/or other answers</li>
        </ul>
        <p>The implications for accessible error handling are clear: Simpler forms make error handling more accessible. For example:</p>
        <ul>
          <li><mark id="hint-01" class="hint covert">If the user wants to transact on shares, ask <q>Buy or sell?</q> first, then <q>Shares of what?</q>, and then <q>How many shares?</q>. Then, if the first answer is <q>Sell</q>, the <q>Shares of what?</q> form can make errors impossible by asking the user to choose among positions actually owned. And the <q>How many shares?</q> form can make errors impossible by limiting the quantity to the quantity of the selected position that the user owns.</mark></li>
          <li><mark id="hint-02" class="hint covert">If you want the user&rsquo;s address, ask for the country first. Then, depending on the country specified, provide an appropriate address form (e.g., with <q>ZIP Code</q> only if the country is the United States).</mark></li>
        </ul>
        <p>Another accessibility benefit of simple forms is that they work better on small touch devices. Textual inputs often cause a virtual keyboard to pop up and occupy part of the screen. That shrinks the area available to see the form. If the relevant information for the user&rsquo;s answer is spread over a large area, most of it may be invisible while the user is answering. That places a burden on the user&rsquo;s memory, making the interface especially difficult for users who are cognitively challenged or who have trouble moving the shrunken viewport.</p>
        <p>On a simple, one-control form, any error message will be most accessible if it:</p>
        <ul>
          <li>appears immediately above or immediately below the control</li>
          <li>is styled so as to be easily noticeable</li>
          <li>is brought to the attention of assistive technologies</li>
          <li>is associated semantically with the control</li>
        </ul>
        <p>However, simplicity is not always beneficial for all users. In testing UIs on users, we find that some users want to explore an entire interaction and then begin answering questions. How they answer a question might depend on questions that appear later. Therefore, simple step-by-step forms and large all-in-one forms are legitimate alternatives. Utopia forms are often hybrids: multiple-question forms split into several steps, so that each form is not so large.</p>
      </section>
      <section>
        <header>
          <h2>Notifying the user</h2>
        </header>
        <p>How do you bring an error message to the attention of users? For users of assistive technologies, you have various techniques to choose among:</p>
        <ul>
          <li>Put the message into an element that has an <code>aria-live="polite"</code> or <code>aria-live="assertive"</code> attribute.</li>
          <li>Put the message into focus after displaying it.</li>
          <li>Launch a <a href="../layer">modal alert dialog</a> with a specific error message or instructions for how to find and correct the error.</li>
        </ul>
        <p>There may be situations making either of these options preferable. One benefit of the <code>aria-live</code> option is that the focus can remain on the input and the user can correct it without first navigating back to it. But, since the message will have no focus indicator, you may want to make it extra-prominent with styling.</p>
        <p>The two <code>aria-live</code> values should be equivalent where only a single error message will appear after the user submits a form. The <code>polite</code> value would make an assistive technology wait for a pause in activity before announcing the message, but there is normally a pause anyway after the user submits a form.</p>
        <p>The error message should be associated with its control. See the &ldquo;ARIA attributes&rdquo; section below for details.</p>
        <p>There is <strong>no</strong> example of these techniques below. Why? These modules are (currently) static web applications without any server on the back end to receive and respond to form submissions. So this module can&rsquo;t illustrate a UI getting error messages from a server.</p>
      </section>
      <section id="simple" class="section-quiz"></section>
      <section>
        <header>
          <h2>Accessibility despite complexity</h2>
        </header>
        <p>What can you do if your UI contains a multi-control form with numerous potential error messages, which might even appear far apart so that they aren&rsquo;t all visible at the same time?</p>
        <p>Accessible error handling&mdash;even if not as great&mdash;is still possible. There are various promising alternatives to choose among. Here are three.</p>
        <p>The summary approach (common in Utopia UIs):</p>
        <ul>
          <li>Equip the form with an empty container near the top that is styled to make its contents (when it has contents) easy to notice.</li>
          <li>Precede each control on the form with a similar empty container.</li>
          <li>In case of errors on the submitted form, populate the summary container with a <strong>summary</strong> error message, such as <q>There are 4 errors below. You can use the <kbd>TAB</kbd> key to reach them.</q>, give the container a <code>tabindex="0"</code> attribute, and put the container into focus.</li>
          <li>For each control that submitted an erroneous answer, populate a preceding <code>label</code> element with an appropriate error message.</li>
          <li>If you wish, give each <code>label</code> element that now contains an error message a <code>tabindex="0"</code> attribute, so the user brings it into focus during sequential <kbd>TAB</kbd> navigation.</li>
          <li><mark id="hint-03" class="hint covert">If you wish, set <code>tabindex="-1"</code> on all non-erroneous controls and all links so that <kbd>TAB</kbd> navigation is limited to error correction.</mark></li>
          <li>When the form is submitted again, delete the error messages and <mark id="hint-04" class="hint covert">restore all <code>tabindex</code> attributes to their original values.</mark></li>
        </ul>
        <p>The user will be directed to the summary message. Then each press of the <kbd>TAB</kbd> key will take the user to the next specific error message, and then to the control it is about.</p>
        <p><mark id="hint-05" class="hint covert">The aggregate approach: Collect all the error messages into a single container at the top, and then use the <code>tabindex</code> attribute to ensure that the user can navigate with the keyboard to the controls, and only to the controls, that need correction.</mark> This approach is likely to work best when the errors are similar.</p>
        <p><mark id="hint-06" class="hint covert">The helper-form approach: Abandon the complex form after errors occur and use simple forms to help the user correct those errors.</mark> That may be the most accessible for the user and also the easiest to implement. It does, however, change the context, so it might be less transparent.</p>
      </section>
      <section id="complex" class="section-quiz"></section>
      <section>
        <header>
          <h2>ARIA attributes</h2>
        </header>
        <p>Accessible forms, whether simple or complex, in addition to the above techniques, make use of the attributes <code>aria-invalid</code> and <code>aria-errormessage</code>. These attributes belong to each form input.</p>
        <ul>
          <li><code>aria-invalid</code>: This attribute has the default value <code>false</code>. If it is not explicitly present, it is implicitly present with the default value. It doesn&rsquo;t distinguish between inputs that have not been completed and inputs that have been correctly completed. When it is explicitly present with the value <code>true</code>, it identifies an input that has an invalid value.</li>
          <li><code>aria-errormessage</code>: This attribute&rsquo;s value is the <code>id</code> value of an element containing an error message about this input. You can include it from the beginning, when that element is empty, because assistive technologies will ignore <code>aria-errormessage</code> if the input doesn&rsquo;t have an <code>aria-invalid</code> value of <code>true</code>. By using this attribute, you can, if you wish, place error messages outside their inputs&rsquo; labels. For maximum compatibility, you can do both.</li>
        </ul>
        <p><mark id="hint-07" class="hint covert">Built-in HTML5 validators set a control&rsquo;s <code>aria-invalid</code> attribute to <code>true</code> when they reject an input, and custom validators do the same, as explained in <a href="../inputval">Accessible Input Validation</a>. In addition, your server code can set the same attribute to <code>true</code> when sending an error message to the browser.</mark> This gives the user of assistive technologies the option to find errors by searching for inputs with <code>aria-invalid="true"</code>, as an alternative to the techniques described above.</p>
        <p>The server or client code must also reset the values of the <code>aria-invalid</code> attribute to <code>false</code> each time the form is submitted.</p>
      </section>
      <section id="aria" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/form/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
    <script src="nav.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>In case you are new to front-end development, here is a quick introduction to forms.</p>
        <p>Utopia uses its UIs to conduct business transactions with clients and crew. This requires soliciting their information or action, and then responding. The <dfn>form</dfn> is the main mechanism for soliciting information or action. HTML5 includes a <code>form</code> element designed to contain one of the forms on a web page.</p>
        <p>An example of a Utopia form is <a href="https://institutional.utopia.com/web/c1/insights-subscribe/" target="_blank">the subscription form for institutional news</a>. It asks the user to choose publications, certify a status, and provide a name, email address, company, and role.</p>
        <p><mark id="hint-00" class="hint covert">Any item in a form that a user has power over is called a <dfn>control</dfn>. It may be a text field, text area, radio button, checkbox, option list, or button.</mark> More complex controls include trackpad gestures, sliders, and drag-and-drop objects. A form can also treat a keypress or pointer movement as a control.</p>
        <p>The controls in Utopia UIs are mostly simple, so this module focuses on making those accessible. If you incorporate more complex controls (such as sliders) into controls, you may need to do additional research to make those accessible.</p>
        <p>This module introduces the most useful mechanisms for making forms accessible, but other techniques exist that you may find appropriate for some situations.</p>
      </section>
      <section id="intro" class="section-quiz"></section>
      <section>
        <header>
          <h2>Form semantics</h2>
        </header>
        <p>HTML5 lets you specify <mark id="hint-01" class="hint covert">form <dfn>semantics</dfn>. That means how controls in a form are related to each other, how controls are labeled by text, and what function each control performs.</mark> An accessible form makes use of these HTML5 mechanisms, thereby fulfilling <a href="https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships.html">WCAG Success Criterion <i>1.3.1</i></a>. That, combined with other methods, gives your form advantages for a diverse set of users, including those who cannot see forms and use assistive technologies to understand and complete them, and users with mobility limitations that make keyboards or keyboard-equivalent devices their only input mechanisms. The advantages of accessible forms include these:</p>
        <ul>
          <li>Users know which control of the form, if any, is in <dfn>focus</dfn>. That means which control will be activated by an activating keypress (<kbd>ENTER</kbd> or <kbd>SPACE</kbd>).</li>
          <li>Users can navigate and operate the form with a wide variety of input devices, with or without a mouse or trackpad.</li>
          <li><mark id="hint-02" class="hint covert">Before a user activates a control, the user is informed about its expected effect.</mark></li>
          <li>If the control supplies a standard type of information about the user to the application, user-side autofill technologies can automatically enter the information.</li>
          <li><mark id="hint-03" class="hint covert">If there is a logical group of controls in the form, its existence, membership, and purpose are communicated to users.</mark></li>
          <li>Users can select controls for activation with little risk of missing them or selecting the wrong one.</li>
          <li><mark id="hint-04" class="hint covert">If a user performs an invalid action, sufficient corrective information will come to the user&rsquo;s attention and the control it applies to will be identifiable.</mark></li>
          <li>The mechanisms for undoing or changing actions are communicated clearly.</li>
        </ul>
      </section>
      <section id="semantics" class="section-quiz"></section>
      <section>
        <header>
          <h2>Control groups</h2>
        </header>
        <p>Some controls on forms are grouped. For example, text fields for the parts of a user&rsquo;s name, address, or telephone number, or radio buttons letting a user choose among options, form a group.</p>
        <p>Accessible forms don&rsquo;t rely on visual appearance to let users identify groups of controls. They also use HTML5 mechanisms, so assistive technologies can recognize groups.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>Open examples of <a href="../../gen/examples/form/simple/bad/form-bad.html" target="_blank">an inaccessible form</a> and <a href="../../gen/examples/form/simple/good/form-good.html" target="_blank">an accessible form</a> in Chrome.</li>
          <li>If you wish, drag these new tabs to new windows to make them easier to compare.</li>
          <li>Note how the positions of <q>Form of ownership</q> differ. On <code>form-good.html</code> it is superimposed on the border around the radio buttons.</li>
          <li>On each page, <mark id="hint-05" class="hint covert">inspect the HTML code of <q>Form of ownership</q> in the <q>Elements</q> panel of the developer tools. Note how this element was differently coded. On <code>form-bad.html</code>, it&rsquo;s a <code>div</code> element inside another <code>div</code> element. But, on <code>form-good.html</code>, it&rsquo;s a <code>legend</code> element inside a <code>fieldset</code> element.</mark></li>
        </ol>
        <p>A <dfn>fieldset</dfn>, implemented with the HTML5 <code>fieldset</code> element, contains a set of related form inputs. In this case, it&rsquo;s a set of radio buttons allowing the user to choose among options. <mark id="hint-06" class="hint covert">A fieldset may contain a <dfn>legend</dfn>, describing what the inputs have in common. It is implemented with a <code>legend</code> element. It provides the accessible name for its <code>fieldset</code> element.</mark> On <code>form-bad.html</code>, an assistive technology that is analyzing the page can determine only that <q>Form of ownership</q> is in the same container as the radio buttons and precedes them. But on <code>form-good.html</code> the assistive technology can determine that <q>Form of ownership</q> <strong>describes</strong> the set of radio buttons. So it can tell the user that all the radio buttons represent options for <q>Form of ownership</q>. That helps make <code>form-good.html</code> a more accessible page.</p>
        <p>Browsers render <code>fieldset</code> and <code>legend</code> elements in characteristic ways. Here you see the <code>legend</code> element superimposed on a border surrounding the contents of the <code>fieldset</code> element. This happens without any extra coding. The developer of <code>form-bad.html</code> needed extra (CSS) code to create an outline around the radio buttons, but that wouldn&rsquo;t be informative to somebody relying on an assistive technology.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>On <code>form-bad.html</code>, select the <code>div</code> element containing <q>Form of ownership</q> in the <q>Elements</q> panel. Then examine its node in the Accessibility Tree. Note that its role is <code>GenericContainer</code>, and it&rsquo;s nameless.</li>
          <li>On <code>form-good.html</code>, select the <code>legend</code> element containing <q>Form of ownership</q> in the <q>Elements</q> panel. Then examine it in the Accessibility Tree. Note that its role is <code>Legend</code>, and its text content has been used as the accessible name of its parent, whose role is <code>group</code> (the role of a <code>fieldset</code> element).</li>
        </ol>
      </section>
      <section id="groups" class="section-quiz"></section>
      <section>
        <header>
          <h2>Control naming</h2>
        </header>
        <p>In addition to any accessible name describing a group of controls, each control also needs its own accessible name. Otherwise, an assistive technology explaining a form to a user will say that an item is a control of a particular type, but the user won&rsquo;t know what the control is for. Imagine a form for buying or selling, where there is a button for each of these but the user doesn&rsquo;t know which button will buy and which will sell.</p>
        <p class="exhibit"><img src="../../gen/static/ambilabel.jpg" alt="buttons with text between them"></p>
        <p>The fact that some text is near a control does not make that text an accessible name for the control. What if the text is near two controls (like the text in a Utopia elevator above)? Which one would it name? A user looking at the form could be confused. <mark id="hint-07" class="hint covert">Some assistive technologies are designed to guess, but they could guess wrong.</mark></p>
        <p><mark id="hint-08" class="hint covert">For users relying on their eyes, unambiguous layout can avoid confusion. For those using assistive technologies, HTML5 lets you positively associate texts with controls.</mark> To serve all users, you can provide both: unambiguous layout <strong>and</strong> HTML5 associations.</p>
      </section>
      <section id="naming" class="section-quiz"></section>
      <section>
        <header>
          <h2>Input naming</h2>
        </header>
        <section>
          <header>
            <h3>The basics</h3>
          </header>
          <p>A control created with the HTML5 <code>input</code> element (an <dfn>input</dfn>) has a <code>type</code> attribute, which can have <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types">more than 20 possible values</a>. Those most useful at Utopia fall into two categories.</p>
          <p>First, there are <dfn>textual input</dfn>s, requiring the user to enter text. These include inputs whose <code>type</code> attributes have any of these values:</p>
          <ul>
            <li><code>text</code></li>
            <li><code>password</code></li>
            <li><code>search</code></li>
            <li><code>number</code></li>
            <li><code>range</code></li>
            <li><code>email</code></li>
            <li><code>tel</code></li>
            <li><code>url</code></li>
            <li><code>date</code></li>
            <li><code>month</code></li>
            <li><code>week</code></li>
            <li><code>time</code></li>
            <li><code>datetime-local</code></li>
          </ul>
          <p>Second, there are <dfn>choice input</dfn>s: input types requiring the user to make choices. These include:</p>
          <ul>
            <li><code>radio</code></li>
            <li><code>checkbox</code></li>
            <li><code>range</code></li>
            <li><code>date</code></li>
          </ul>
          <p>The <code>radio</code> type creates a <dfn>radio button</dfn>, an input that can be either checked or unchecked. The special feature of a radio button is that it can appear in a group of radio buttons with the same <code>name</code> attribute, and in that case it is impossible for more than one radio button in that group to be checked at any time.</p>
          <p>The <code>checkbox</code> type creates a <dfn>checkbox</dfn>, an input that can be either checked or unchecked, like a radio button, but is independent, so it can be checked regardless of the state of any other control.</p>
          <p>The <code>range</code> and <code>date</code> types appear in both of these lists, because browsers implement them with text entry, choice, or both. The <code>range</code> type creates a <dfn>range input</dfn>, which lets the user specify a value between an upper and a lower bound. The <code>date</code> type creates a <dfn>date input</dfn>, which lets the user specify a date.</p>
          <p>The forms that you examined in the <q>Control groups</q> section above contain inputs of type <code>text</code> and <code>radio</code>. On <code>form-good.html</code> they are coded so as to give them accessible names, but on <code>form-bad.html</code> they are not. This makes the forms behave differently. Perform these operations:</p>
          <ol>
            <li><mark id="hint-09" class="hint covert">Click <q>Name of joint owner</q> on <code>form-bad.html</code> and <code>form-good.html</code>. Do the same with one of the radio-button labels. Note that on <code>form-good.html</code> this text is treated as part of the input that it is the accessible name of. Clicking it is equivalent to clicking the input itself.</mark></li>
            <li>Use your mouse to hover over <q>Name of joint owner</q> on both pages. Do the same with one of the radio-button labels. Note how on <code>form-good.html</code> the hover state is shown. Moreover, note that the mouse pointer remains an arrow on <code>form-good.html</code> but becomes a vertical line on <code>form-bad.html</code>. The pointer helps the user see that on <code>form-good.html</code> the label is part of a control, not just plain text.</li>
          </ol>
          <p>Because <mark id="hint-10" class="hint covert">the inputs on <code>form-good.html</code> have accessible names</mark>, users of assistive technologies will be informed of those names. A screen reader, for example, will say <q>Tenancy in common: radio button</q>, instead of only <q>radio button</q>.</p>
          <p>A user figures out what each radio button will do from its <dfn>label</dfn>, namely a short text describing its purpose. A user relying on eyesight decides which text is the label of which control by how they are spatially arranged. But a user relying on an assistive technology is given the correct labels. That happens because properly coded labels give controls their accessible names in the Accessibility Tree. On <code>form-bad.html</code> the labels are not properly coded, so there is a risk of error. The text <q>Tenancy in common</q> is immediately followed by a radio button. You may see those items as far apart, but somebody listening to the content will know only that the button follows the text. The user might guess that this text labels the immediately following radio button, so might click the <q>Tenancy by the entirety</q> button believing it is the <q>Tenancy in common</q> button. Proper label coding can prevent such errors.</p>
        </section>
        <section id="inputbasics" class="section-quiz"></section>
        <section>
          <header>
            <h3>Input naming mechanisms</h3>
          </header>
          <section>
            <header>
              <h4>Introduction</h4>
            </header>
            <p>There are several ways to give accessible names to inputs. The most useful of these are:</p>
            <ul>
              <li>implicit labeling</li>
              <li>explicit labeling</li>
              <li>shared labeling</li>
            </ul>
            <p>To decide which of these mechanisms to use, you can answer these questions:</p>
            <ul>
              <li>Will any text string that is all or part of the element&rsquo;s accessible name also be all or part of any other element&rsquo;s accessible name? If so, you need to use shared labeling.</li>
              <li>Otherwise, <mark id="hint-11" class="hint covert">will any text string that is all or part of the element&rsquo;s accessible name be separated from the element by intervening elements? If so, you need to use shared or explicit labeling.</mark></li>
              <li>Otherwise, you can use shared, explicit, or implicit labeling.</li>
            </ul>
            <p>Implicit and explicit labeling use the HTML5 <code>label</code> element. Shared labeling uses the WAI-ARIA <code>aria-labelledby</code> attribute.</p>
            <p>Perform these operations:</p>
            <ol>
              <li>Click and hover over the texts in the examples of the next three sections. Note that some texts behave like extensions of their inputs in the <q>Implicit labeling</q> and <q>Explicit labeling</q> examples, but <strong>not</strong> in the <q>Shared labeling</q> example.</li>
            </ol>
            <p>Shared labeling cannot allow text strings to act like extensions of the elements that they name. One text string can be (or be part of) the names of multiple elements. Clicking on the text can&rsquo;t focus or activate multiple controls, because only one control can be focused or activated at a time.</p>
          </section>
          <section id="inputmechanisms" class="section-quiz"></section>
          <section>
            <header>
              <h4>Implicit labeling</h4>
            </header>
            <section class="example">
              <p class="extag">Implicit labeling</p>
              <form>
                <p>
                  <label>
                    Social Security Number
                    <input type="text" size="11" maxlength="11" name="ssn">
                    (You may include or omit hyphens.)
                  </label>
                </p>
              </form>
            </section>
            <p>Perform these operations:</p>
            <ol>
              <li><mark id="hint-12" class="hint covert">Inspect the HTML code for the <q>Implicit labeling</q> example. Note that the text strings immediately before and after the <code>input</code> element are enclosed with it in a <code>label</code> element. That is how <dfn>implicit labeling</dfn> works.</mark></li>
              <li>Examine the description of that <code>input</code> element in the Accessibility Tree. Note that its role is <code>textbox</code> and its accessible name is a concatenation of the two strings. Assistive technologies can use this name. When a user focuses on the input, the NVDA screen reader, for example, says <q>Social Security Number. You may include or omit hyphens. Edit. Blank.</q>, instead of only <q>Edit. Blank.</q></li>
            </ol>
          </section>
          <section id="inputimplicit" class="section-quiz"></section>
          <section>
            <header>
              <h4>Explicit labeling</h4>
            </header>
            <section class="example">
              <p class="extag">Explicit labeling</p>
              <form>
                <dl>
                  <dt><label for="convert-vmvfx">VMVFX</label></dt>
                  <dd><label for="convert-vmvfx">
                    Global Minimum Volatility
                  </label></dd>
                  <dd>Market value: $64,387.88</dd>
                  <dd>Eligible for conversion to Admiral Shares</dd>
                  <dd>
                    <input
                      type="checkbox"
                      id="convert-vmvfx"
                      name="yesconvert"
                      value="vmvfx"
                    >
                    <label for="convert-vmvfx">Convert my shares of this fund to Admiral Shares</label>
                  </dd>
                </dl>
              </form>
            </section>
            <p>Perform these operations:</p>
            <ol>
              <li>Inspect the HTML code for <q>VMVFX</q> in the <q>Explicit labeling</q> example. Note that it is in a <code>label</code> element, and that element has a <code>for</code> attribute.</li>
              <li>Inspect the HTML code for the checkbox <code>input</code> element in that same example. Note that the element has an <code>id</code> attribute.</li>
              <li>Note that <mark id="hint-13" class="hint covert">the <code>for</code> and <code>id</code> attributes have the same value. That is how <dfn>explicit labeling</dfn> works. A label uses its <code>for</code> attribute to point to an element.</mark></li>
              <li>Find two more <code>label</code> elements pointing to the same input.</li>
              <li>Examine the description of that <code>input</code> element in the Accessibility Tree. Note that its role is <code>checkbox</code> and its accessible name is a concatenation of the three strings, in the order in which they appear in the code.</li>
            </ol>
          </section>
          <section id="inputexplicit" class="section-quiz"></section>
          <section>
            <header>
              <h4>Shared labeling</h4>
            </header>
            <section class="example">
              <p class="extag">Shared labeling</p>
              <form>
                <h5 id="acctowner">Account owner</h5>
                <p>&hellip;</p>
                <p id="birth">
                  Date of birth
                  <input
                    type="date"
                    autocomplete="bday"
                    aria-labelledby="acctowner birth"
                  >
                </p>
                <p>&hellip;</p>
              </form>
            </section>
            <p>Perform these operations:</p>
            <ol>
              <li>Inspect the HTML code for the <q>Account owner</q> and <q>Date of birth</q> strings in the <q>Shared labeling</q> example. Note that they are in <code>h5</code> and <code>p</code> elements that have <code>id</code> attributes.</li>
              <li>Inspect the HTML code for the date input in that same example. Note that <mark id="hint-14" class="hint covert">the <code>input</code> element has an <code>aria-labelledby</code> attribute, whose value is a space-delimited list of the <code>id</code> values of the elements whose text contents are the strings you just inspected. That is how <dfn>shared labeling</dfn> works. The element uses its <code>aria-labelledby</code> attribute to point to other elements, and their text contents are concatenated (in their order in the list) to form the element&rsquo;s accessible name.</mark></li>
            </ol>
          </section>
          <section id="inputshared" class="section-quiz"></section>
        </section>
      </section>
      <section>
        <header>
          <h2>Button naming</h2>
        </header>
        <section>
          <header>
            <h3>The basics</h3>
          </header>
          <p>The most common controls in Utopia forms, other than inputs, are <dfn>button</dfn>s. Buttons (distinct from radio buttons) are what users click in order to cause things to happen. These modules use buttons throughout, to administer the quizzes.</p>
          <p>There is a <code>button</code> type of the <code>input</code> element, but the most widely used mechanism for creating buttons at Utopia, and in general, is the <code>button</code> element. Unlike the <code>input</code> element, it has both a start tag (<code>&lt;button&gt;</code>) and an end tag (<code>&lt;/button&gt;</code>). The text between them appears inside the button.</p>
          <p>The accessible name of a button tells the user of an assistive technology what will happen if the user activates the button. The text that appears in a button may do this adequately, but not always. If the button says <q>Proceed</q>, <q>Cancel</q>, <q>Yes</q>, <q>No</q>, or <q>Learn more</q>, that may not be enough. What if <q>Yes</q> really means <q>Yes, close my account</q>? Then that should be the button&rsquo;s accessible name, not merely <q>Yes</q>.</p>
          <p>The same three accessible-name mechanisms described above for inputs are available for buttons, too, and, in addition, there is a fourth mechanism: <dfn>content naming</dfn>, which is to use the button&rsquo;s text content as its accessible name.</p>
          <p>An important principle is that <a href="https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_te">accessible names rely on <strong>only one</strong> mechanism</a>. You need to choose a mechanism for each control. You cannot use, for example, content naming together with explicit labeling.</p>
          <p>The naming mechanisms have a priority order, and in that order content naming is the last. So, if you use any labeling mechanism you are turning content naming off.</p>
          <p>To decide which of the four mechanisms to use, you can answer these questions:</p>
          <ul>
            <li><mark id="hint-15" class="hint covert">Will any text string that is all or part of the button&rsquo;s accessible name also be all or part of any other element&rsquo;s accessible name? If so, you need to use shared labeling.</mark></li>
            <li>Otherwise, <mark id="hint-16" class="hint covert">will any text string that is all or part of the button&rsquo;s accessible name be separated from the button by intervening elements? If so, you need to use shared or explicit labeling.</mark></li>
            <li>Otherwise, <mark id="hint-17" class="hint covert">will any text string that is all or part of the button&rsquo;s accessible name be outside the button itself? If so, you need to use shared, explicit, or implicit labeling.</mark></li>
            <li>Otherwise, you can use shared, explicit, or implicit labeling or content naming.</li>
          </ul>
          <p>What can you do if you want the text content of a button to be <strong>part</strong> but not <strong>all</strong> of its accessible name? You can use explicit or shared labeling for the accessible name. Content naming will be turned off. But you can still use the content as part of the accessible name. Simply treat the button itself like any other element whose text content you want to include in the accessible name. The examples below of explicit and shared labeling do this.</p>
        </section>
        <section id="buttonbasic" class="section-quiz"></section>
        <section>
          <header>
            <h3>Content naming</h3>
          </header>
          <section class="example">
            <p class="extag">Content naming</p>
            <form>
              <p class="center">
                <button>Close my account</button>
              </p>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li><mark id="hint-18" class="hint covert">Inspect the <code>button</code> element of the above example with the developer tools. Note that <q>Close my account</q> is the text content of the element and there is no <code>label</code> element in the example.</mark></li>
            <li>Examine the description of that <code>button</code> element in the Accessibility Tree. Note that its role is <code>button</code> and <mark id="hint-19" class="hint covert">its accessible name is <q>Close my account</q>, the element&rsquo;s text content. That is how <dfn>content naming</dfn> works.</mark></li>
          </ol>
        </section>
        <section id="content" class="section-quiz"></section>
        <section>
          <header>
            <h3>Implicit labeling</h3>
          </header>
          <section class="example">
            <p class="extag">Implicit labeling</p>
            <form>
              <p><label>
                Click this button to send yourself a reminder.
                <button>Send</button>
              </label></p>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Click and hover over the sentence in the <q>Implicit labeling</q> example a few times. Note that you are, in effect, clicking or hovering over the button itself.</li>
            <li>Inspect that <code>button</code> element with the developer tools. Note that <mark id="hint-20" class="hint covert">the element and some text are contained by a <code>label</code> element.</mark></li>
            <li>Examine the description of that <code>button</code> element in the Accessibility Tree. Note that its accessible name includes the text content of the <code>label</code> element, except for <q>Send</q>. The rule for <mark id="hint-21" class="hint covert">implicit labeling has defined the <code>button</code> element as the labeled control and excluded any text content of the labeled control from that control&rsquo;s own accessible name.</mark></li>
          </ol>
        </section>
        <section id="buttonimplicit" class="section-quiz"></section>
        <section>
          <header>
            <h3>Explicit labeling</h3>
          </header>
          <section class="example">
            <p class="extag">Explicit labeling</p>
            <form>
              <dl class="toggleList" aria-live="polite">
                <dt><label for="vmvfx">VMVFX</label></dt>
                <dd><label for="vmvfx">Global Minimum Volatility</label></dd>
                <dd class="togglable covert">Market value: $64,387.88</dd>
                <dd class="togglable covert">Eligible for conversion</dd>
                <dd><button type="button" id="vmvfx">
                  <label for="vmvfx">Details &plusmn;</label>
                </button></dd>
              </dl>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Click the <code>button</code> element of the <q>Explicit labeling</q> example a few times. Note what happens.</li>
            <li>Click and hover over <q>VMVFX</q> and <q>Global Minimum Volatility</q> a few times. Note that you are, in effect, clicking or hovering over the button itself.</li>
            <li>Inspect that <code>button</code> element with the developer tools. Note that it has an <code>id</code> attribute.</li>
            <li>Look for <mark id="hint-22" class="hint covert"><code>label</code> elements with <code>for</code> attributes having the same value as the <code>button</code> element&rsquo;s <code>id</code>. You should find three such <code>label</code> elements. Note that one of them is inside the <code>button</code> element itself.</mark></li>
            <li>Examine the description of that <code>button</code> element in the Accessibility Tree. Note that <mark id="hint-23" class="hint covert">its accessible name includes the text contents of all three <code>label</code> elements. That is how <dfn>explicit labeling</dfn> works.</mark></li>
          </ol>
        </section>
        <section id="buttonexplicit" class="section-quiz"></section>
        <section>
          <header>
            <h3>Shared labeling</h3>
          </header>
          <section class="example">
            <p class="extag">Shared labeling</p>
            <form>
              <p id="approve">Do you approve the above-described transaction?</p>
              <p>
                <button id="yes" aria-labelledby="approve yes">Yes</button>
                <button id="no" aria-labelledby="approve no">No</button>
              </p>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Hover over the question in the <q>Shared labeling</q> example a few times. Note that you are <strong>not</strong> hovering over either button.</li>
            <li><mark id="hint-24" class="hint covert">Inspect that question&rsquo;s element and the <q>Yes</q> <code>button</code> element with the developer tools. Note that they both have <code>id</code> attributes.</mark></li>
            <li><mark id="hint-25" class="hint covert">Note the value of the <code>aria-labelledby</code> attribute of the <code>button</code> element.</mark></li>
            <li>Inspect the <q>No</q> button with the developer tools. Note that its <code>aria-labelledby</code> attribute references the same question referenced by the <q>Yes</q> button.</li>
            <li>Examine the description of the <code>button</code> elements in the Accessibility Tree. Note that their <mark id="hint-26" class="hint covert">accessible names include the text contents of both elements that are referenced in the values of their <code>aria-labelledby</code> attributes. That is how <dfn>shared labeling</dfn> works.</mark></li>
          </ol>
        </section>
        <section id="buttonshared" class="section-quiz"></section>
        <section>
          <header>
            <h3>Button naming and risk</h3>
          </header>
          <p>Some buttons, like those in the <q>Implicit labeling</q> and <q>Explicit labeling</q> examples, are innocuous. Others, like those in the <q>Content naming</q> and <q>Shared labeling</q> examples, have serious effects, and it could be damaging if a user clicked them by mistake.</p>
          <p>Therefore, the risky buttons in these examples get their accessible names with <mark id="hint-27" class="hint covert">the <q>Content naming</q> and <q>Shared labeling</q> mechanisms. Why? Because those mechanisms do not extend the button&rsquo;s activation area beyond the button itself. With those mechanisms, there is no risk that a user will click a label and, after it is too late, learn that this activated the button.</mark></p>
        </section>
        <section id="buttonrisk" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Describing controls</h2>
        </header>
        <p>Controls, if they are to be accessible, need accessible names, and you have learned how to create them. But Utopia sometimes wants to offer users more information about a control than just a name. Proper disclosure may require that a whole paragraph of text be associated with a control.</p>
        <p>For this purpose, WAI-ARIA provides a mechanism for giving controls not only accessible names, but also <dfn>accessible description</dfn>s. These are elements containing additional information about a control.</p>
        <p>You have already seen the shared-labeling mechanism. The mechanism for description is similar. <mark id="hint-28" class="hint covert">Instead of (or in addition to) an <code>aria-labelledby</code> attribute, you use an <code>aria-describedby</code> attribute.</mark></p>
        <p>Naming and description don&rsquo;t interfere with each other. <mark id="hint-29" class="hint covert">You can create descriptions while using any kind of naming.</mark></p>
        <p>Here is an example:</p>
        <section class="example">
          <p class="extag">Description</p>
          <p id="ok">Do you approve the above-described transaction?</p>
          <p id="warning">Your approval of this transaction will cause an order to be placed for immediate execution and is not cancelable or rescindable. Please verify the details above before clicking this button.</p>
          <p>
            <button
              id="txyes"
              aria-labelledby="ok txyes"
              aria-describedby="warning"
            >
              Yes
            </button>
            <button id="txno" aria-labelledby="ok txno">No</button>
          </p>
        </section>
        <p>Perform these operations:</p>
        <ol>
          <li>Inspect the <q>Yes</q> button in the <q>Description</q> example with the developer tools. Note that it references not only two text strings as its accessible name with <code>aria-labelledby</code>, but also another text string as a description with <code>aria-describedby</code>.</li>
          <li>Examine the description of the <q>Yes</q> button in the Accessibility Tree. Note that its two-part name appears next to its <code>button</code> role.</li>
          <li>Look below the Accessibility Tree at the list of <q>Computed Properties</q>. Note that one of those properties is <q>Description</q>, and its value is the text content of the element referenced by the <code>aria-describedby</code> attribute.</li>
        </ol>
        <p>Assistive technologies can tell users about any description that you have associated with a control. For example, when a user navigates to the <q>Yes</q> button in the above example, some screen readers announce the name (<q>Do you approve &hellip; ?</q>), then <q>Yes button</q>, and then the description (<q>Your approval &hellip; before clicking this button.</q>).</p>
      </section>
      <section id="describe" class="section-quiz"></section>
      <section>
        <header>
          <h2>Input-type standardization</h2>
        </header>
        <p>Utopia forms often request information from users. Browsers and other user-side technologies can automatically enter some such information for users to review and approve. That saves user time and especially benefits users who cannot enter information rapidly and accurately.</p>
        <p>An accessible form facilitates such automatic entry of information about the user or the current transaction. It does this by attaching an <code>autocomplete</code> attribute to any <code>input</code> element that requests such information. <mark id="hint-30" class="hint covert">The value of the <code>autocomplete</code> attribute is one of about 50 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values" target="_blank">standard codes representing types of personal information</a>.</mark></p>
        <p>Most of the codes represent information about the user, such as <code>bday-year</code> for year of birth. A few represent transaction information, such as <code>transaction-currency</code>. Some common information types, including social-insurance and taxpayer IDs, do <strong>not</strong> have codes.</p>
        <p>The documentation on <a href="https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose">WCAG success criterion <i>1.3.5</i></a> and <a href="https://www.w3.org/WAI/WCAG21/Techniques/html/H98">technique H98</a> explains why and how this mechanism, when applied to personal information, supports accessibility.</p>
        <p>If you inspect the <a href="#birth">date-of-birth form</a> above, you will see an example of the use of this mechanism.</p>
      </section>
      <section id="type" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/here/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>When we say that a user <q>navigates</q> a website, we aren&rsquo;t using a Utopia nautical metaphor. Much of the world talks this way, in many languages using travel words. This custom roots web browsing in ancient human experience.</p>
        <p>So, <q>Where am I?</q> is a reasonable question for a user to ask. On an accessible website, there should be no need to ask, because the user&rsquo;s location should always be evident.</p>
        <p>But what do we mean by the user&rsquo;s <q>location</q>? How can a UI can make locations clear?</p>
        <p>When users ask <q>Where am I?</q>, they may be asking about their locations in a website or on a web page.</p>
        <p>Utopia has multiple websites and orients users with a site menu at the top, allowing users to see which site they are in (e.g., <q>PERSONAL INVESTORS</q>) and switch to a different site. Most Utopia sites also provide within-site orientations. A navigation menu bar at the top contains topics and highlights the current topic. Breadcrumbs below the menu bar show the place of the current page in the outline of that topic. Those devices help users with site navigation.</p>
        <p>This module deals not with site navigation, but with page navigation.</p>
      </section>
      <section>
        <header>
          <h2>Multiple &ldquo;heres&rdquo;</h2>
        </header>
        <p>Unlike a shopping mall, on a web page the user doesn&rsquo;t have a single location. A single <q>You are here</q> marker isn&rsquo;t enough. <mark id="hint-00" class="hint covert">A user&rsquo;s locations include:</mark></p>
        <ul>
          <li>Where the user is hovering over with a mouse (and, therefore, what will happen if the user clicks the mouse button)</li>
          <li>Where the focus is (and, therefore, what will happen if the user operates the keyboard)</li>
          <li>Where the selected or checked items are (with various effects)</li>
          <li>Where an item is being activated (and, therefore, what will happen next)</li>
        </ul>
      </section>
      <section id="unique" class="section-quiz"></section>
      <section>
        <header>
          <h2>Responsibilities</h2>
        </header>
        <p>Generally, you as a UI developer do not need to ensure that all these locations are made known to users. Browsers do that automatically. They also share that information with assistive technologies, so their users can get the same information. You get that functionality when you code in HTML5.</p>
        <p>For example, a browser shows the user which element is in focus by surrounding it with an outline, and it changes the value of the <code>document.activeElement</code> property. It shows which link is being hovered over by changing the mouse cursor from an arrow to a hand. It shows which radio button is selected by filling it with a solid disk, and it also changes the value of the radio button&rsquo;s <code>aria-checked</code> property to <code>true</code>.</p>
        <p>If your UI does not make use of the normal HTML5 elements, then you assume responsibility for informing users of their locations. The designer of a UI can also decide to take responsibility for location indication in order to improve on the default browser behaviors. You may need to use the CSS pseudo-classes <code>:hover</code>, code>:focus</code>, and code>:active</code>, as well as JavaScript event handlers, to do that.</p>
      </section>
      <section>
        <header>
          <h2>Hover</h2>
        </header>
        <p>When a user can change the state of an element by clicking it, the browser shows the user whether the element is being hovered over, so the user can determine whether clicking will target that element.</p>
        <p>Some elements have extended click regions. For example, a checkbox or radio button with implicit or explicit labels is acted on if the user clicks the label. So the browser treats the control and its label as a single region for hovering and clicking. If you correctly label standard HTML5 controls, the browser automatically shows this extended hover state.</p>
        <p>Hover states are generally relevant only for users of non-mobile, non-touch operating systems who are using mice, trackpads, or other hovering devices. Low-vision, blind, and mobility-limited users, and users of touch devices don&rsquo;t make use of hover indicators.</p>
        <p>Since some users can&rsquo;t or don&rsquo;t make use of hovering, it is risky to use hovering for anything beyond targeting an element for clicking. The accessibility risks include these:</p>
        <ul>
          <li>If hovering displays more information, there is a risk that users who can&rsquo;t or don&rsquo;t hover will be denied that information.</li>
          <li>If hovering displays more information, there is a risk that the new information will cover existing information that a user was consuming and may want to continue consuming.</li>
          <li>If hovering causes an action, there is a risk that users who can&rsquo;t or don&rsquo;t hover will be unable to produce that action.</li>
          <li>There is a risk that users will be surprised or confused by the effects they cause by hovering, since they were merely sliding their mouse, not asking for information or an action.</li>
          <li>There is a risk that users will be unable to make use of the benefits of hovering. For example, <mark id="hint-01" class="hint covert">the user might lose the displayed information by hovering over it, contrary to <a href="https://www.w3.org/TR/WCAG21/#content-on-hover-or-focus">WCAG SC <i>1.4.13</i></a>, which requires that hovering over such information (such as a tooltip) must <strong>not</strong> make it disappear.</mark></li>
        </ul>
        <p>Utopia UIs often change the displayed content when users hover. For example, go to the <a href="https://investor.utopia.com/home/">personal-investor home page</a> and hover over the <q>Investing</q> menu. The UI not only darkens the background to show where you are hovering; it also opens that menu for your further action. Is this an accessible behavior? In one way, yes. You can move to <q>Investing</q> with the <kbd>TAB</kbd> key, use the <kbd>SPACE</kbd> or <kbd>ENTER</kbd> key to open the menu, then use the <kbd>TAB</kbd> or any arrow key to navigate within the menu, and use the <kbd>ESC</kbd> key to dismiss the menu. So, the hover benefits are available through the keyboard, too. But what about the above-cited no-disappearance rule? If you open the menu by hovering over <q>Investing</q> and then slide your mouse straight from there to <q>Account transfers</q> in the rightmost column, you will replace the <q>Investing</q> menu with the <q>Advice &amp; Retirement</q> menu, and the item you were aiming for will have disappeared. <strong>You</strong> can figure out that you need to move the cursor down first, then to the right. But coding for accessibility means coding for people different from you, including people who have trouble with spatial visualization and people who can&rsquo;t precisely control a mouse. What could you do to improve this UI&rsquo;s hover behavior? One idea: Make the menus open only when clicked, not when hovered over. You may have other ideas.</p>
      </section>
      <section id="hover" class="section-quiz"></section>
      <section>
        <header>
          <h2>Focus</h2>
        </header>
        <section>
          <header>
            <h3>The basics</h3>
          </header>
          <p>If an element is in <dfn>focus</dfn>, it is in a state of heightened operability. You can do something with it that you could not otherwise do.</p>
          <p>When you press a keyboard key, the effect you have can depend on what element is in focus.</p>
          <p>So, in order for a user to know how to act and to predict the effect of a keypress, the user needs to know what element, if any, is in focus, and <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html">WCAG success criterion <i>2.4.7</i></a> requires this.</p>
          <p>To tell a user that an element is in focus, browsers mark the element with a <dfn>focus indicator</dfn>.</p>
          <p>You can customize the focus indicator with CSS. CSS has a <code>:focus</code> pseudo-class, which allows you to apply style declarations to elements that are in focus. For a ruleset that will apply to <strong>any</strong> element in focus, you can use the selector <code>*:focus</code>.</p>
          <p>By default, browsers put elements into focus in response to user keypresses, clicks, and taps:</p>
          <ul>
            <li>Clicks and taps put the clicked or tapped element into focus (if it is focusable).</li>
            <li>The <kbd>TAB</kbd> key or <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination moves the focus to the next or previous focusable <dfn>simple element</dfn>, namely element that has no internal set of focusable sub-elements.</li>
            <li>The arrow keys move the focus to the next or previous focusable sub-element in a <dfn>complex element</dfn>, namely one that has a set of focusable sub-elements. Groups of radio buttons and drop-down (<q>select</q>) lists are examples of complex elements.</li>
          </ul>
          <p>Normally, only elements that the user can act on can be focused. Others, like headings and paragraphs of text, cannot. Sometimes a UI design specifies exceptions to this. You can make your UI override the default behavior by giving <dfn><code>tabindex</code></dfn> attributes to elements. Only two of the possible values of <code>tabindex</code> are widely used and recommended: <code>0</code> and <code>-1</code>.</p>
          <ul>
            <li><mark id="hint-02" class="hint covert"><code>tabindex="0"</code> makes an element fully focusable.</mark></li>
            <li><code>tabindex="-1"</code> makes an element focusable <strong>except</strong> with the <kbd>TAB</kbd> key or <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination.</li>
            <li>No <code>tabindex</code> attribute at all gives the element its default focusability: Actionable elements such as form controls and links are focusable, and others are not.</li>
          </ul>
          <p>Your JavaScript code can put a focusable element into focus with the <code>focus()</code> method.</p>
          <p>Perform these operations:</p>
          <ol>
            <li>Open an <a href="../../gen/examples/form/simple/bad/form-bad.html" target="_blank">example of a partly accessible form</a>.</li>
            <li>Press the <kbd>TAB</kbd> key twice. Note the outlines identifying the elements in focus.</li>
            <li>Open an <a href="../../gen/examples/form/simple/good/form-good.html" target="_blank">example of a highly accessible form</a>.</li>
            <li>Press the <kbd>TAB</kbd> key twice. Note that the outlines identifying the elements in focus are more visible than those on the other page.</li>
            <li><mark id="hint-03" class="hint covert">On the stylesheet of <code>form-good.html</code>, find a ruleset for any element in focus. Note that it surrounds the element with a solid outline 3 pixels in thickness, in color <code>#005293</code> (Utopia&rsquo;s standard Royal Blue), drawn with 2 pixels of space between the outline and the element.</mark> There is no such ruleset for <code>form-bad.html</code>, so that page uses the browser&rsquo;s default focus indicator.</li>
          </ol>
          <p>UI designers at Utopia sometimes override default focus indicators with custom ones, to make them more visible and more cross-browser uniform. They are not always uniform. For example, a <a href="https://investornews.utopia/a-look-back-at-the-life-of-utopias-founder/">news page on the life of John C. Bogle</a> uses six different focus indicators:</p>
          <ul>
            <li>default (Utopia logo)</li>
            <li>default plus darker background color (<q>FORMS</q>)</li>
            <li>default plus darker text (<q>News home</q>)</li>
            <li>underline (<q>COMPANY NEWS</q>)</li>
            <li>icon color change to red (<q>&hellip;</q> in speech bubble)</li>
            <li>text underline and icon color change (<q>View tribute</q>)</li>
          </ul>
          <p>One can argue that a multiplicity of focus indicators makes it more difficult for users, especially those with learning or other cognitive disabilities, to learn to recognize the focus location. The most conventional focus indicator on the web is an outline, and it is usually blue.</p>
          <p>An outline (made with the CSS <code>outline</code> property) makes a more user-friendly focus indicator than a border (made with the CSS <code>border</code> property) would. In CSS, a border is part of its element, so, if an element acquired and lost a border whenever it goes into or out of focus, the element could jerk. An outline is drawn outside its element, so when it appears and disappears it leaves the element stationary.</p>
        </section>
        <section id="focusbasic" class="section-quiz"></section>
        <section>
          <header>
            <h3>Focus and the keyboard</h3>
          </header>
          <p>As mentioned above, <mark id="hint-04" class="hint covert">focus can change what keypresses do. Below is a summary of that interaction. When the focus is on one of the listed elements, the listed keys have the effects described.</mark> For example, the <kbd>SPACE</kbd> key toggles a focused checkbox (checking or unchecking it). The <q>scroll</q> action is to scroll the viewport on the page.</p>
          <p>The focal elements are listed with ordinary English names. For example, a <dfn>link</dfn> is an <code>a</code> element, and a <dfn>range</dfn> is an <code>input</code> element with <code>type="range"</code>. Elements classified as <dfn>textual</dfn> are inputs with text values (see <a href="../form"><q>Accessible Forms</q></a>).</p>
          <table>
            <caption>Keypress dependence on focus: <kbd>SPACE</kbd> and <kbd>ENTER</kbd></caption>
            <colgroup>
              <col><col><col><col><col>
            </colgroup>
            <thead>
              <tr>
                <th>Focal element</th>
                <th><kbd>SPACE</kbd></th>
                <th><kbd>SHIFT</kbd>-<kbd>SPACE</kbd></th>
                <th><kbd>ENTER</kbd></th>
                <th><kbd>SHIFT</kbd>-<kbd>ENTER</kbd></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th>button</th>
                <td>activate</td>
                <td>activate</td>
                <td>activate</td>
                <td>activate</td>
              </tr>
              <tr>
                <th>link</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>activate</td>
                <td>activate (new window)</td>
              </tr>
              <tr>
                <th>radio button</th>
                <td>select</td>
                <td>select</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
              <tr>
                <th>checkbox</th>
                <td>toggle</td>
                <td>toggle</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
              <tr>
                <th>range</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
              <tr>
                <th>date</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>submit</td>
                <td>submit</td>
              </tr>
              <tr>
                <th>textual</th>
                <td>enter <kbd>SPACE</kbd> at insertion point</td>
                <td>enter <kbd>SPACE</kbd> at insertion point</td>
                <td>submit</td>
                <td>submit</td>
              </tr>
              <tr>
                <th>otherwise</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
            </tbody>
          </table>
          <table>
            <caption>Keypress dependence on focus: arrow keys</caption>
            <colgroup>
              <col><col><col><col><col>
            </colgroup>
            <thead>
              <tr>
                <th>Focal element</th>
                <th><kbd>&uparrow;</kbd></th>
                <th><kbd>&downarrow;</kbd></th>
                <th><kbd>&leftarrow;</kbd></th>
                <th><kbd>&rightarrow;</kbd></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th>button</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
              <tr>
                <th>link</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
              <tr>
                <th>radio button</th>
                <td>focus and select previous</td>
                <td>focus and select next</td>
                <td>focus and select previous</td>
                <td>focus and select next</td>
              </tr>
              <tr>
                <th>checkbox</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
              <tr>
                <th>range</th>
                <td>increment</td>
                <td>decrement</td>
                <td>decrement</td>
                <td>increment</td>
              </tr>
              <tr>
                <th>date</th>
                <td>increment selected part</td>
                <td>decrement selected part</td>
                <td>select previous part</td>
                <td>select next part</td>
              </tr>
              <tr>
                <th>textual</th>
                <td>move insertion point to start</td>
                <td>move insertion point to end</td>
                <td>move insertion point 1 left</td>
                <td>move insertion point 1 right</td>
              </tr>
              <tr>
                <th>otherwise</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
            </tbody>
          </table>
          <p>You could capture keypresses and change these effects with JavaScript, but that would generally make your UI behave differently from most. Adhering to common conventions generally improves accessibility.</p>
        </section>
        <section id="focuskbd" class="section-quiz"></section>
        <section>
          <header>
            <h3>Implicit submission</h3>
          </header>
          <p><mark id="hint-05" class="hint covert">In the first table above the effect of the <kbd>ENTER</kbd> key and the <kbd>SHIFT</kbd>-<kbd>ENTER</kbd> combination is described as <q>submit</q> when a date or textual input is in focus. This means submitting the form that the input is part of. This <a href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission">submission behavior is conditional</a>. The form is submitted if and only if either of these conditions is true:</mark></p>
          <ul>
            <li>There is a submit button in the form.</li>
            <li>The textual input is the only one in the form.</li>
          </ul>
          <p>If your form is being submitted at all, then it is good for accessibility to offer a button for explicit submission. So let&rsquo;s assume your form contains such a button. Then, if it also has multiple textual inputs, the default behavior is for an <kbd>ENTER</kbd> keypress, while any of those inputs is in focus, to submit the form, even if some or all of the input fields are empty.</p>
          <p>Is implicit submission an accessible feature? <a href="https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">Yes, it is, argues TJ VanToll</a>, because this is the standard behavior and conformance to standards is a basic requirement for accessibility. But <a href="https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/#disqus_thread">some developers argue the opposite</a>. They say this behavior conflicts with worksheet behavior, where <kbd>ENTER</kbd> moves the focus to the next cell down, and causes users to submit forms by mistake.</p>
          <p>If mistakenly submitting a form could cause damage, you can consider disabling implicit submission with JavaScript. Otherwise, this behavior reminds you to provide a visible and recognizable focus indicator. Even users who know how implicit submission works could be surprised by it if they can&rsquo;t see what element is in focus.</p>
        </section>
        <section id="implicit" class="section-quiz"></section>
        <section>
          <header>
            <h3>Custom focus</h3>
          </header>
          <p>Under some conditions, it can be useful to put into focus elements that by default are not focusable. On this page, for example, when you click <q>Test yourself</q>, a form appears, and the <code>form</code> element goes into focus. Why? For two reasons:</p>
          <ul>
            <li>This makes it easy for you to navigate within the form with your keyboard. With a single <kbd>TAB</kbd> keypress, you can begin interacting with the form&rsquo;s controls.</li>
            <li>It&rsquo;s good for users of assistive technologies. When the form appears on the page, the fact that it goes into focus ensures it comes to the user&rsquo;s attention.</li>
          </ul>
          <p><mark id="hint-06" class="hint covert">You can decide to put any element into focus or to let the user do so. For this purpose you can use the <code>tabindex</code> attribute described above, and the JavaScript <code>focus()</code> method.</mark></p>
          <p>To see examples of these mechanisms, perform these operations:</p>
          <ul>
            <li>Click any <q>Test yourself</q> button.</li>
            <li>Inspect any element in the form with the developer tools.</li>
            <li>Find the enclosing <code>form</code> element. Note that its <code>tabindex</code> attribute has the value <code>0</code>.</li>
            <li>In the <q>Sources</q> panel, select the <code>gen/modOnLoad.js</code> file.</li>
            <li>
              In that file, find the <code>showQuiz</code> function. As the comment says, it creates, shows, and focuses a specified quiz. Note that it:
              <ul>
                <li>creates a <code>form</code> element and names it <code>form</code></li>
                <li>populates this new element with the content it needs</li>
                <li>gives it a <code>tabindex</code> attribute and sets its value to <code>0</code></li>
                <li>puts it into focus by executing <code>form.focus()</code></li>
              </ul>
            </li>
          </ul>
        </section>
        <section id="custom" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Activation</h2>
        </header>
        <p>Activation is a tricky state to display, because a button or link, when activated, immediately changes something, often taking the link or button away from the viewable content. Activation indicators are easiest to see when the user depresses the mouse button or the <kbd>SPACE</kbd> key while a button or link is in focus. In such cases, activation <strong>begins</strong> with the press, but it <strong>ends</strong> with the release. The user can abort the activation by moving the focus away before the release.</p>
        <p>Typically, UIs let browsers and assistive technologies take full responsibility for indicating activation to users, and you don&rsquo;t need to intervene in order to conform to the norms of accessibility.</p>
      </section>
      <section>
        <header>
          <h2>State distinction</h2>
        </header>
        <p>Utopia UIs have followed three strategies for focus and hover indicators:</p>
        <ul>
          <li>Let user technologies handle them.</li>
          <li>Make them identical.</li>
          <li>Make them complementary.</li>
        </ul>
        <p><mark id="hint-07" class="hint covert">Most often UIs let user technologies handle both focus and hover indication, and doing that can be considered an accessible treatment</mark>, even though some browser default indicators are not easy to see.</p>
        <p>Making them identical is appropriate where you can&rsquo;t rely on browsers to indicate hover and focus, and there is no practical difference between hovering and focusing. For example, a UI may contain a technical term, and a definition of that term may pop up whenever that term is <strong>either</strong> hovered over <strong>or</strong> put into focus, so both mouse users and keyboard users have the same access to the definition. You can code the term like this:</p>
        <blockquote>
          <code>&lt;span id="margin" tabindex="0"&gt;margin&lt;/span&gt;</code>
        </blockquote>
        <p>Then you can create JavaScript event listeners for <code>mouseover</code>, <code>mouseout</code>, <code>focus</code>, and <code>blur</code> events on that <code>span</code> element, and handle the events with functions that display and hide the definition.</p>
        <p>Making the indicators complementary is appropriate when the UI design takes control of hover and focus indication and the impacts of focusing and hovering differ. Then the user needs to tell them apart. Then <mark id="hint-08" class="hint covert">the design should specify indicators that do not conflict, so both indicators can be displayed at the same time</mark>. For example, the focus indicator can be an outline, and the hover indicator can be a change of text color, background color, font, and/or font decoration. Color changes are most robust if they result in valence changes (light on dark versus dark on light). These modules illustrate that strategy.</p>
      </section>
      <section id="distinct" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/inputval/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
    <script src="nav.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>If your UI solicits textual input from the user, it will also check the input to answer two questions:</p>
        <ul>
          <li><mark id="hint-00" class="hint covert">Is it formally valid? For example, is it really a number?</mark></li>
          <li>Does it make sense in this situation? For example, is that ZIP Code in that state?</li>
        </ul>
        <p>To answer these questions, you perform <dfn>input validation</dfn>.</p>
        <p><mark id="hint-01" class="hint covert">You can make the user&rsquo;s clent (the browser) perform formal input validation by using mechanisms in HTML5 and/or JavaScript.</mark> Input validation that answers the second question usually requires access to APIs and databases and is performed on a server. Answering the first question might require a server, too, even if you implement it on the client, since you can&rsquo;t trust the client.</p>
      </section>
      <section>
        <header>
          <h2>Accessibility challenges</h2>
        </header>
        <p>Input validation can make a UI more accessible, but, if not implemented carefully, can interfere with accessibility instead. Your UI checks input, finds it invalid, and notifies the user. What can go wrong?</p>
        <ul>
          <li>The UI may fail to tell the user, <strong>in advance</strong>, what the validity rules are. So, the user may need discover the rules by trial and error, wasting time and getting frustrated.</li>
          <li>The notification may escape the user&rsquo;s attention.</li>
          <li>The user may notice it but not understand it.</li>
          <li>If the user has entered two or more inputs already, it may not be clear which of them the notification is about.</li>
          <li>The proper action to take to rectify the invalidity may not be understood.</li>
          <li>If the user takes a corrective action, the UI may fail to let the user know that the action has been recognized, and whether the action was successful.</li>
        </ul>
        <p>When you code for accessible input validation, you consider these risks. You know that in adverse situations, such as those where commotion distracts the user or the user has some cognitive disability, the risks grow. So you code pessimistically, trying to make the validation foolproof and forgiving.</p>
        <p>Relevant WCAG success criteria include:</p>
        <ul>
          <li>
            <a href="https://www.w3.org/WAI/WCAG21/Understanding/error-identification"><i>3.3.1</i>, <q>Error Identification</q></a>. It requires that users be told of any detected input errors.
          </li>
          <li>
            <a href="https://www.w3.org/WAI/WCAG21/Understanding/error-suggestion"><i>3.3.3</i>, <q>Error Suggestion</q></a>. It requires that users be told of any known actions that would correct detected input errors.
          </li>
          <li>
            <a href="https://www.w3.org/WAI/WCAG21/Understanding/error-prevention-legal-financial-data"><i>3.3.4</i>, <q>Error Prevention (Legal, Financial, Data)</q></a>. It requires that users can reverse, correct, or confirm binding inputs after submitting them.
          </li>
        </ul>
        <p>WCAG suggests techniques to consider for making input validation accessible. <a href="https://www.w3.org/WAI/WCAG21/Techniques/general/G85">Technique G85</a> says that the UI can offer a text description of the validation problem, including examples of valid inputs, an explanation of how to modify the input to make it valid, and/or a description of what makes an input valid. There are always alternatives, and research with users can help find the best ones.</p>
        <p>HTML5&rsquo;s built-in input validation automatically conforms to some accessibility principles and requires relatively little effort, compared with a custom implementation. But browsers and assistive technologies do not always support the HTML5 standard as accessibly as you might want. So, you usually have more than one reasonable way to implement input validation, with each having advantages and disadvantages.</p>
      </section>
      <section id="intro" class="section-quiz"></section>
      <section>
        <header>
          <h2>Length validation</h2>
        </header>
        <section>
          <header>
            <h3>HTML5 mechanisms</h3>
          </header>
          <p><mark id="hint-02" class="hint covert">HTML5 lets you impose a minimum and a maximum length on any textual input with the <code>minlength</code> and <code>maxlength</code> attributes.</mark> Here is an example:</p>
          <section class="example">
            <header>
              <h4>Investment goals</h4>
            </header>
            <form>
              <fieldset>
                <legend>In your own words:</legend>
                <p><label>
                  Your most important investment goals (5 to 55 characters)
                  <input
                    type="text"
                    name="goal"
                    size="60"
                    minlength="5"
                    maxlength="55"
                  >
                </label></p>
                <p class="center"><button type="submit">Done</button></p>
              </fieldset>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Play with this form and note how it behaves when you enter strings of various lengths into the text field, before and after (1) clicking outside the field, (2) pressing the <kbd>TAB</kbd> key to move the focus outside the field, (3) pressing he <kbd>ENTER</kbd> key while the cursor is inside the field, and (4) clicking the <q>Done</q> button.</li>
            <li>Leave a string of fewer than 5 characters in the field.</li>
            <li>Inspect the text field with the developer tools. Note the <code>minlength</code> and <code>maxlength</code> attributes.</li>
            <li>Examine the data below the Accessibility Tree. The attribute <q>Invalid user entry</q> should have the value <code>true</code>. Even though it has not yet displayed an error message, the browser tells assistive technologies that the entry so far fails input validation.</li>
            <li>Enter more characters, totaling at least 5. Then click elsewhere in the <q>Elements</q> panel and then select the <code>input</code> element again. The value of <q>Invalid user entry</q> should now be <code>false</code>.</li>
          </ol>
          <p>As you have seen, the browser implements length validation and also informs assistive technologies about whether the entry in a text field has a valid length. But this doesn&rsquo;t force assistive technologies to make use of that information. What do they actually do?</p>
          <p>Here is one example of the behavior of an assistive technology: the screen reader NVDA with the Chrome browser, tested in 2019:</p>
          <ul>
            <li>It never announces the text of the visible error message. The only error message it utters is <q>Invalid entry</q>.</li>
            <li>It waits until the user pauses after starting to enter a value. Then, if the value contains only 1 character it announces <q>Invalid entry</q>, but if it contains 2&ndash;4 characters it fails to announce any error message.</li>
            <li>After that initial error message (if any), if the user adds characters but the string is still too short, NVDA does not announce additional error messages, so the user is not informed when the entry becomes long enough.</li>
            <li>If the user presses the <kbd>ENTER</kbd> key while the string is too short, it says nothing.</li>
            <li>If the user activates the <q>Done</q> button while the string is too short, the focus returns to the text input field and NVDA then announces <q>Invalid entry</q>.</li>
          </ul>
          <p>The behavior of the browser may be suboptimal, but the observed behavior of NVDA on this example was seriously deficient. A user reliant on NVDA would probably have difficulty figuring out how to make an entry in this text field valid.</p>
          <p>So, if you use the HTML5 attributes to regulate text-entry length, be aware of their limitations. Even so, there are some advantages to doing so:</p>
          <ul>
            <li>Browser and assistive-technology behaviors are likely to improve as user technologies develop, and by using the standard HTML5 mechanism you will automatically capture any such improvements.</li>
            <li>By deploying the standard mechanism, Utopia adds to the pressure on user-technology makers to support it.</li>
            <li>The mechanism is easy to implement.</li>
            <li>It will be difficult to blame Utopia if you have complied with the HTML5 standard but user technologies poorly implement the standard.</li>
          </ul>
          <p>In addition, HTML5 lets you give an input a <code>required</code> attribute. That makes any string of length 1 or greater valid and (unlike <code>minlength</code>) makes an empty value invalid. The treatment of <code>required</code> by browsers and assistive technologies is not always optimal. Exploring a form by navigating through its controls with the <kbd>TAB</kbd> key may prompt error messages even though the user intends only to get a feel for what is in the form.</p>
        </section>
        <section id="lengthstd" class="section-quiz"></section>
        <section>
          <header>
            <h3>Custom mechanisms</h3>
          </header>
          <p>If you aim for a better user experience than what HTML5 length validation delivers, you can create a custom mechanism. This requires some decisions:</p>
          <ul>
            <li>Are strings validated while being entered, or only when submitted?</li>
            <li>Is a running length counter shown to the user?</li>
            <li>If the user tries to submit a string that is too long or too short, what message is displayed?</li>
            <li>Where is that message displayed?</li>
            <li>When does that message disappear?</li>
            <li>How are validation results and messages made accessible?</li>
          </ul>
          <p>A custom mechanism can do a better job of satisfying accessibility norms, including the WCAG success criteria listed above. It can especially benefit users who consume the content via text-to-speech conversion. Your mechanism must alert these users&rsquo; assistive technologies to error messages and length counters, so users will hear them. It must also classify inputs as valid or invalid, as the HTML5 mechanism would.</p>
          <p>Below is an example of a custom length counter. The interface does not include any error messages <strong>after</strong> submission. Those error messages are a subject of the next module, <a href="../error"><q>Accessible Error Handling</q></a>.</p>
          <section class="example">
            <header>
              <h4>Investment goals</h4>
            </header>
            <form>
              <fieldset>
                <legend>In your own words:</legend>
                <p><label>
                  Your most important investment goals (5 to 55 characters)
                  <input
                    id="goals"
                    type="text"
                    name="goal"
                    size="60"
                    maxlength="75"
                    data-minlength="5"
                    data-maxlength="55"
                    aria-controls="goallength"
                  >
                </label></p>
                <p id="goallength" aria-live="polite" class="strong"></p>
              </fieldset>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Enter strings of various lengths in the above text field and note the behavior of the interface.</li>
            <li>Inspect the text input field with the developer tools.</li>
            <li>Note the <code>data-minlength</code> and <code>data-maxlength</code> attributes of the <code>input</code> element. Note that there is also an HTML5 <code>maxlength</code> attribute, whose value is larger than <code>data-maxlength</code>. Because of this, the browser permits you to enter a string 20 characters longer than <code>data-maxlength</code>.</li>
            <li>Note the <code>aria-controls</code> attribute of the <code>input</code> element. It points to the following <code>p</code> element.</li>
            <li>Examine that next <code>p</code> element. Note that it has an <code>aria-live</code> attribute with the value <code>polite</code>.</li>
            <li><mark id="hint-03" class="hint covert">In the <q>Sources</q> panel, select <code>mod/inputval/nav.js</code>.</mark></li>
            <li>In the <code>createGoalListener</code> function, note how the variables <code>lengthMin</code> and <code>lengthMax</code> are defined.</li>
            <li>Examine the <code>goalInputHandler</code> function. Note that it does two things whenever the entered value changes. First, it sets an appropriate message to be displayed (<code>advice</code>). Second, it sets the value of the <code>aria-invalid</code> attribute of the <code>input</code> element, so assistive technologies will be informed whether the current value is valid.</li>
            <li>Examine the <code>input</code> element (with the <code>textbox</code> role) in the Accessibility Tree. Note <q>Invalid user entry</q> among the Computed Properties.</li>
            <li>Change the entry length in the text field so it alternates between being long enough and too short. Note that this keeps toggling the value of <q>Invalid user entry</q>. At the same time, in the <q>Elements</q> panel, the value of <code>aria-invalid</code> is toggled.</li>
          </ol>
          <p>HTML5 lets you attach custom attributes, beginning with <code>data-</code>, such as <code>data-minlength</code>, to any element, and it copies those attributes into entries in a <code>dataset</code> property of the element. That is how the <code>goalAdviceHandler</code> function gets its <code>lengthMin</code> and <code>lengthMax</code> arguments, which it uses when deciding on the appropriate message to display.</p>
          <p>The <code>aria-live</code> attribute that you saw above has the value <code>polite</code>. This tells assistive technologies to monitor the element for updated content and relay updates to the user when the interface is idle.</p>
          <p>As a consequence, if a user of the NVDA screen reader enters and deletes characters in the text field, NVDA announces those characters and then, whenever there is a pause, announces the current message below the text field.</p>
          <p>If you had a reason to keep the user updated immediately, without waiting for a pause, you could set the value of <code>aria-live</code> to <code>assertive</code>.</p>
          <p>The <code>createGoalListener</code> function creates a listener for <code>input</code> events on the <code>input</code> element. An <code>input</code> event occurs whenever the value in the text field changes. The listener then executes <code>goalInputHandler</code>.</p>
        </section>
      </section>
      <section id="lengthcust" class="section-quiz"></section>
      <section>
        <header>
          <h2>Magnitude validation</h2>
        </header>
        <section>
          <header>
            <h3>Introduction</h3>
          </header>
          <p>You may want to impose minima and/or maxima on quantitative inputs. These could include:</p>
          <ul>
            <li>Amounts of money</li>
            <li>Shares of investment positions</li>
            <li>Percentages</li>
            <li>Ages</li>
            <li>Dates</li>
            <li>Times of day</li>
            <li>Durations of time</li>
          </ul>
          <p>Doing this accessibly helps all users, and particularly users of assistive technologies, comply with the applicable rules and avoid errors that they would need to correct later.</p>
        </section>
        <section>
          <header>
            <h3>HTML5 mechanism</h3>
          </header>
          <p>HTML5 lets you impose a minimum and a maximum magnitude on any quantitative input. You do this with the <code>min</code> and <code>max</code> attributes. Here are two examples:</p>
          <section class="example">
            <header>
              <h4>[standard] Retirement plan contribution</h4>
            </header>
            <form>
              <fieldset>
                <legend>What percentage (0 to 25, rounded to the nearest 0.1) of your gross compensation will you contribute to your 401(k) plan each pay period?</legend>
                <p><label>
                  Contribution percentage<br>
                  <input
                    type="number"
                    name="contribpct"
                    value="4"
                    step="0.1"
                    min="0"
                    max="25"
                  > %
                </label></p>
              </fieldset>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Enter numbers that are too small (e.g., <q>-3</q>), within the limits (e.g., <q>5.5</q>), too large (e.g., <q>30</q>), and not rounded enough (e.g., <q>5.75</q>). Note how you are informed of the validity of the current number.</li>
            <li>Try to enter an ordinary word. Note that you can&rsquo;t.</li>
            <li>Use the spinner control. Note the rate at which it increments or decrements the number.</li>
            <li>Try to enter the string <q>eee77-</q>. Note what happens.</li>
            <li>Try to enter the string <q>1e1</q>. Note what happens.</li>
            <li>Inspect the number input with the developer tools.</li>
            <li>Note that the limits are defined with HTML5 <code>min</code> and <code>max</code> attributes.</li>
            <li>Note that the <code>type</code> attribute has the value <code>number</code>, not <code>text</code>. This makes the browser perform magnitude validation.</li>
            <li>Note the <code>step</code> attribute. It regulates the permitted increment from the starting value. Any numbers that are not a multiple of that increment are invalid.</li>
            <li>Examine the <code>input</code> element in the Accessibility Tree. Select the <code>spinbutton</code> role and look at the Computed Properties. Now make the entry in the number field alternatingly valid and invalid, and note that <q>Invalid user entry</q> is updated accordingly.</li>
          </ol>
          <p>The browser permits <q>e</q> because it can appear in scientific notation (e.g., 1e1 means 1&times;10&sup1;). If you want to disallow scientific notation, HTML5&rsquo;s <code>number</code> type does not give you a choice.</p>
          <p>The tooltip that responds to a too-precise number, such as 7.84, is helpful, suggesting the next-larger and next-smaller numbers with one decimal digit. But one can argue that <q>Please enter a number</q>, which the tooltip says when the format is invalid, isn&rsquo;t specific enough to conform to WCAG success criterion <i>3.3.3</i>.</p>
          <p>More seriously, <a href="https://inclusive-components.design/tooltips-toggletips/">experts warn against the accessibility defects of tooltips</a>. For the most accessible result, the needed information should be made visible on the page itself, not in a bubble that (sometimes does and sometimes does not) appear superimposed on the page.</p>
          <section class="example">
            <header>
              <h4>[standard] Distributions</h4>
            </header>
            <form>
              <fieldset>
                <legend>Required minimum distribution</legend>
                <p><label>
                  When do you want this distribution (must be after today and by the end of this year)?
                  <input
                    id="rmddate"
                    type="date"
                    name="rmddate"
                  >
                </label></p>
              </fieldset>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Try to enter intrinsically invalid dates (dates that don&rsquo;t exist, such as the 46th day of the 32nd month) by entering text. Note what you can and cannot do.</li>
            <li>Try to enter situationally invalid dates (such as yesterday&rsquo;s date) by entering text. Note whether a tooltip informs you of a constraint you are violating.</li>
            <li>Use the incremental (<q>spinner</q>) control to increase and decrease the date components. Try to create an intrinsically invalid date (such as the 31st of November). Note that you can do so, but you get a tooltip advising you of the error.</li>
            <li>Try to choose a situationally invalid date with the incremental controls. Note that you can do so with the day but not the month. Note any tooltips that appear.</li>
            <li>Note how the four arrow keys work in this control.</li>
            <li>Use the date picker (&blacktriangledown;) to choose dates. Try to choose invalid dates. Note what happens.</li>
            <li><mark id="hint-04" class="hint covert">Inspect the date <code>input</code> element with the developer tools. Note that it has <code>min</code> and <code>max</code> attributes.</mark></li>
            <li>In the <q>Sources</q> panel, select the <code>(index)</code> file (i.e. <code>index.html</code>). In its code window, search for <code>rmddate</code>. That takes you to the code for this <code>input</code> element. Note that there is neither a <code>min</code> nor a <code>max</code> attribute.</li>
            <li>To solve this mystery, select the <code>nav.js</code> file. In its code window, examine the function <code>createRMDLimits</code>.</li>
            <li>Enter invalid month and/or day numbers. Then select the <code>input</code> element in the <q>Elements</q> panel and examine it (with the <code>Date</code> role) in the Accessibility Tree. Note that in the <q>Computed Properties</q> list it is shown as invalid, with a <code>true</code> value for <q>Invalid user entry</q>.</li>
            <li>Expand the subnodes and examine <code>spinbutton <em>"Month"</em></code>. Note that the constraints are shown in the <q>Computed Properties</q> list.</li>
          </ol>
          <p>As you saw, the HTML5 built-in magnitude limiters help you constrain the values entered by a user, and advise the user about the limits that are in effect. They are also relatively easy to implement when the limits are constant, requiring only a <code>min</code> and/or a <code>max</code> attribute.</p>
          <p>Setting the limits dynamically is somewhat more complex. Here the <code>createRMDLimits</code> function is executed when the page loads. The function computes the earliest and latest valid dates. It uses those results to add <code>min</code> and <code>max</code> properties to the <code>input</code> element. Those properties, in turn, automatically create attributes of the same names, and you saw those in the <code>index.html</code> file. <mark id="hint-05" class="hint covert">The JavaScript statements setting those values resolve to the form <code>rmdinput.min = 'yyyy-mm-dd'</code>. Alternatively, you could write <code>rmdinput.setAttribute('min', 'yyyy-mm-dd')</code> with the same effect.</mark> Some attributes don&rsquo;t have corresponding properties; to set those, one must use this longer form.)</p>
          <p>HTML5 stores validation results in the Accessibility Tree and its computed properties. This allows assistive technologies to help their users comply with the applicable rules.</p>
          <p>But browsers and assistive technologies sometimes deliver fragmentary or clumsy experiences with HTML5 validation. For example, as suggested above, the tooltips that explain what is wrong are missing from the NVDA screen reader. So, you cannot count on the <code>min</code> and <code>max</code> attributes saving users of assistive technologies from mistakes. For accessibility, your input label needs to state clearly any constraints. Then the user cannot say, <q>Utopia didn&rsquo;t tell me about the limits.</q></p>
          <p>The <code>min</code> and <code>max</code> attributes (with their limitations) can be used similarly for the other quantitative types of the <code>input</code> element, including:</p>
          <ul>
            <li><code>number</code></li>
            <li><code>range</code></li>
            <li><code>month</code></li>
            <li><code>week</code></li>
            <li><code>datetime-local</code></li>
            <li><code>time</code></li>
          </ul>
        </section>
        <section id="magstd" class="section-quiz"></section>
        <section>
          <header>
            <h3>Custom mechanisms</h3>
          </header>
          <p>The HTML5 magnitude validation is standard-compliant and would be defensible as <q>accessible</q>, but you might want a more powerful mechanism that treats users of assistive technologies better. If you do, you face decisions similar to those for length validation:</p>
          <ul>
            <li>Are quantities validated while being entered, or only when submitted?</li>
            <li>Is a validity report continuously shown to the user?</li>
            <li>If the user tries to submit a quantity that that is too large or small, what message is displayed?</li>
            <li>Where is that message displayed?</li>
            <li>When does that message disappear?</li>
            <li>How are validation results and messages made accessible?</li>
          </ul>
          <p>As is true for length validation, your custom mechanism must alert assistive technologies about any validity reports. And it must update the <code>aria-invalid</code> attribute of the <code>input</code> element.</p>
          <p>Below is an example of a custom magnitude validator. The interface does not include any error messages <strong>after</strong> submission. Such error messages are a subject of the next module, <a href="../error"><q>Accessible Error Handling</q></a>.</p>
          <section class="example">
            <header>
              <h4>[custom] Retirement plan contribution</h4>
            </header>
            <form>
              <fieldset>
                <legend>What percentage (0 to 25, rounded to the nearest 0.1) of your gross compensation will you contribute to your 401(k) plan each pay period?</legend>
                <p><label>
                  Contribution percentage<br>
                  <input
                    id="contribpct"
                    class="right"
                    type="text"
                    name="contribpct"
                    size="4"
                    minlength="1"
                    maxlength="4"
                    value="4.0"
                    data-stepreciprocal="10"
                    data-min="0"
                    data-max="25"
                    aria-controls="contribval"
                  > %
                </label></p>
                <p id="contribval" aria-live="polite" class="strong"></p>
              </fieldset>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Try to enter numbers that are too small (e.g., <q>-3</q>), within the limits (e.g., <q>5.5</q>), too large (e.g., <q>30</q>), and not rounded enough (e.g., <q>5.75</q>). Note what you can do and how you are kept informed of the validity of the current number.</li>
            <li>Try to enter an ordinary word. Note that you can&rsquo;t.</li>
            <li>Try to enter the letter <q>e</q>. Note that you can&rsquo;t.</li>
            <li>Inspect the number input with the developer tools.</li>
            <li>Note that the limits are defined with <code>data-min</code> and <code>data-max</code> attributes, and <mark id="hint-06" class="hint covert">the permitted precision is defined with a <code>data-stepreciprocal</code> attribute.</mark> Those are custom attributes that put values into the <code>dataset</code> object.</li>
            <li>Note that the <code>type</code> attribute has the value <code>text</code>. That loses automatic access to a spinner, but permits more rigorous validation rules.</li>
            <li><mark id="hint-07" class="hint covert">Examine the <code>contribInputHandler</code> function in the <code>nav.js</code> file. Note that it uses the <code>dataset</code> properties to perform validation.</mark></li>
            <li>Note that the function also sets the value of an <code>isInvalid</code> variable and uses it to update the value of the <code>aria-invalid</code> property of the <code>input</code> element. Enter a too-large number and watch that attribute&rsquo;s value change in the <q>Elements</q> panel.</li>
          </ol>
          <p>This example shows that a custom mechanism can provide more precisely defined accessible input validation than the HTML5 standard mechanisms. There is, however, a cost in development time and future code maintenance.</p>
        </section>
        <section id="magcust" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Protocol validation</h2>
        </header>
        <p>HTML5 offers validation for inputs of email addresses and URLs. You implement such validation by specifying <code>email</code> or <code>url</code> as the value of the <code>input</code> element&rsquo;s <code>type</code> attribute.</p>
        <p>Here is an example:</p>
        <section class="example">
          <header>
            <h4>[standard] Your profile</h4>
          </header>
          <form>
            <fieldset>
              <legend>Contact information</legend>
              <p><label>
                Email address<br>
                <input id="email" type="email" name="email">
              </label></p>
              <p><label>
                Website<br>
                <input id="website" type="url" name="website">
              </label></p>
            </fieldset>
          </form>
        </section>
        <p>This example relies on the browser to enforce standard rules for email and URL validity. To see how those rules work, perform these operations:</p>
        <ol>
          <li><mark id="hint-08" class="hint covert">Enter <kbd>s@s.</kbd> in the <q>Email address</q> field. Hover over the field and note the tooltip that appears, diagnosing your error.</mark></li>
          <li><mark id="hint-09" class="hint covert">Delete the final <kbd>.</kbd> in your entry. Hover over the field and note that no tooltip appears. That indicates that the address is considered valid.</mark></li>
          <li>Enter <kbd>ss !</kbd> in the <q>Website</q> field. Hover over the field and note the tooltip that appears. It says your URL is invalid but does not tell you why.</li>
          <li>Insert a <kbd>:</kbd> between the two <kbd>s</kbd> symbols, resulting in <kbd>s:s !</kbd>. Hover over the field and note that no tooltip appears. That indicates that the URL is considered valid.</li>
          <li><mark id="hint-10" class="hint covert">Inspect the URL field with the developer tools and then examine it in the Accessibility Tree. Note, in the Computed Properties, that <q>Invalid user entry</q> is false. This confirms the conclusion that the browser classifies this entry as valid.</mark></li>
        </ol>
        <p>In a UI based on Angular, you could use the <a href="https://satapps.utopia.com/web/cf/vg-vui-ng-webapp/components/input-example/angular/standalone/input-example-vui-email"><code>VuiEmail</code> directive</a> to validate email addresses instead. That directive applies different rules.</p>
        <p>If you study both validators, you can find each of them classifying some email addresses in conformity and some out of conformity with <a href="https://en.wikipedia.org/wiki/Email_address#Syntax">existing standards</a>.</p>
        <p>Even if you find an existing validator making acceptable decisions, you may be disappointed with the messages that it gives users. A message such as <q>Please enter a URL</q> is vague. One can reasonably doubt that it provides the accessible help that technique G85, referenced above, suggests.</p>
      </section>
      <section id="proto" class="section-quiz"></section>
      <section>
        <header>
          <h2>Pattern validation</h2>
        </header>
        <p>When you decide to implement more precise validation than the existing HTML5 or VUI validator can perform (or if there is no off-the-shelf validator), one mechanism available to you is the <mark id="hint-11" class="hint covert">HTML5 <code>pattern</code> attribute. It lets you define a pattern that the input must match. This mechanism may be useful for validating such inputs as ZIP Codes, ticker symbols, crew UIDs, and account numbers. The value of the <code>pattern</code> attribute is a <dfn>regular expression</dfn>, defining a custom validation rule.</mark></p>
        <p>If you don&rsquo;t yet have experience using regular expressions, you would likely need a few days to become proficient with their <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validating_against_a_regular_expression">syntax</a>.</p>
        <p>For example, suppose you want to use an <code>input</code> element with <code>type="text"</code> to collect a U.S. Social Security Number and you want to permit either the punctuated or the unpunctuated form. Then you could add this attribute to the <code>input</code> element:</p>
        <p><mark id="hint-12" class="hint covert"><code>pattern="\d{3}(-?)\d{2}\1\d{4}"</code></mark></p>
        <p><mark id="hint-13" class="hint covert">This expression will match any string whose format is <code>0000000000</code> or <code>000-00-0000</code>, where <code>0</code> stands for any digit.</mark>.</p>
        <p>This <code>pattern</code> attribute appears in this example:</p>
        <section class="example">
          <header>
            <h4>[standard] Account registration</h4>
          </header>
          <form>
            <fieldset>
              <legend>Your identity information</legend>
              <p><label>
                Social Security Number (9 digits with or without <q>-</q> symbols, in format nnn-nn-nnnn or nnnnnnnnn)<br>
                <input
                  id="ssn"
                  type="text"
                  name="ssn"
                  size="11"
                  minlength="9"
                  maxlength="11"
                  pattern="\d{3}(-?)\d{2}\1\d{4}"
                >
              </label></p>
            </fieldset>
          </form>
        </section>
        <p>Perform these operations:</p>
        <ol>
          <li>Enter text into the above field. Note the vague tooltip that appears while the text is invalid.</li>
        </ol>
        <p>Because the browser does not explain the validation rule to the user, at least not as well as technique G85 suggests, it is your responsibility to do that. Here it is done in the <code>label</code> element. But is that enough? When an input value is invalid because of a pattern mismatch, merely telling the user that there is a pattern mismatch may not be a convincing way to conform to success criterion <i>3.3.3</i>. Arguably, it is known what actions would correct the mismatch, but the browser doesn&rsquo;t disclose them.</p>
        <p>To conform more robustly with the principle of success criterion <i>3.3.3</i>, you can provide custom format validation in addition to, or instead of, the built-in <code>pattern</code> validation. Here is an example:</p>
        <section class="example">
          <header>
            <h4>[custom] Account registration</h4>
          </header>
          <form>
            <fieldset>
              <legend>Your contact information</legend>
              <p><label>
                ZIP Code (5 or 9 digits)<br>
                <input
                  id="zip"
                  type="text"
                  name="zip"
                  size="10"
                  minlength="5"
                  maxlength="10"
                  pattern="\d{5}(?:(?:-?)\d{4})?"
                  aria-controls="zipadvisor"
                >
              </label></p>
              <p id="zipadvisor" aria-live="polite" class="strong"></p>
            </fieldset>
          </form>
        </section>
        <p>Perform these operations:</p>
        <ol>
          <li>Enter text into the above field. Note the vague standard tooltip that appears while the text is invalid, and the specific custom advice that appears below.</li>
          <li>Examine the <code>ZIPInputHandler</code> function in the <code>nav.js</code> file. Note that it displays various messages depending on the current input value and also sets the <code>aria-invalid</code> attribute to <code>true</code> or <code>false</code> on each change of the value.</li>
        </ol>
        <p>The <code>ZIPInputHandler</code> function contains this code:</p>
        <pre>if (/[^-\d]/.test(currentString)) {
  input.value = currentString.replace(/[^-\d]/g, '');
  advice = messages.ziprule;
}</pre>
        <p>It examines the current input value to determine whether it contains any character other than digits and <q>-</q>. If so, it changes the value by replacing all such characters with nothing and notifies the user about the invalidity of such characters. The effect is fast enough to appear as a prevention of the entry of such characters.</p>
        <p><mark id="hint-14" class="hint covert">The brackets in the regular expression define a class of characters. For example, <code>[#@a-e\d]</code> matches any <q>#</q> or <q>@</q> character, any of the letters from <q>a</q> through <q>e</q>, or any digit. If the first character is <q>^</q>, then the class is any character <strong>except</strong> those that follow.</mark></p>
      </section>
      <p>Input validation rules can be complex. Sometimes they depend on lists of valid or invalid values. For example, in a U.S. employer identification number (EIN), some 2-digit prefixes, such as <q>39</q>, are valid, while others, such as <q>49</q>, are invalid. The VUI Angular Library contains a <a href="https://satapps.utopia.com/web/cf/vg-vui-ng-webapp/components/input-example/angular/standalone/input-example-ein">VuiEIN directive</a> that validates EINs.</p>
      <section id="format" class="section-quiz"></section>
      <section>
        <header>
          <h2>Summary and conclusion</h2>
        </header>
        <p>Accessible input validation is a complicated problem, because:</p>
        <ul>
          <li>The accepted industry standards, including WCAG success criteria <i>3.3.1</i>, <i>3.3.3</i>, and <i>3.3.4</i>, call for technical measures and clear, helpful, error-specific messages.</li>
          <li>Existing HTML5-based and VUI validators make implementation easy but sometimes fall short of high accessibility expectations.</li>
          <li>For some input types, there are no existing validators.</li>
          <li>Inputs that Utopia expects from users are sometimes subject to complex rules, making it difficult to explain the rules to users.</li>
        </ul>
        <p>Nonetheless, good input validation can catch and stop user errors while they are being made. Usually this prevention is much easier for users, especially users with disabilities, than letting them make, and then recover from, errors. So it is a good investment to implement high-quality, highly accessible input validation.</p>
        <p>Good accessibility testing, likewise, includes tests for a wide variety of imaginable input errors and the expected UI behaviors when those errors are made.</p>
      </section>
    </main>
  </body>
</html>

==> mod/intro/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <h2>What this is</h2>
        <p>This is the README for <q>Accessible Utopia User Interfaces</q>, a set of modules designed to train Utopia front-end developers in digital accessibility.</p>
        <p>To see a list of all the modules, go to the <a href="../../gen" target="_blank">Table of Contents</a>.</p>
      </section>
      <section>
        <h2>Purposes</h2>
        <h4>General skill development</h4>
        <p>To become familiar with accessible development in general, you can study the modules in the order of the table of contents below.</p>
        <h4>Specific problem solving</h4>
        <p>To solve a specific accessibility problem, you can study an appropriate module listed in the table of contents. If it requires other modules for a full understanding, you can pause the module while studying its prerequisite(s).</p>
      </section>
      <section>
        <h2>How to use</h2>
        <p>While studying a module, you will have opportunities to <q>test yourself</q> with quizzes. Quizzes with radio buttons (<input type="radio" name="radio-example"> <input type="radio" name="radio-example" checked>) require 1 answer. Quizzes with checkboxes (<input type="checkbox" checked> <input type="checkbox"> <input type="checkbox" checked>) require you to check the correct items, which may number from zero to all. Note this important distinction.</p>
        <p>Some quizzes offer <mark id="hint-00" class="hint covert">hints directing your attention to relevant content</mark> when that seems helpful. Occasionally a quiz will be based on a mix of information from the current and previous sections, to remind you of what you learned earlier.</p>
        <p>Here is the first quiz. This one is special: To discover the correct answer you will need to give an <strong>incorrect</strong> answer first! Give any answer and click <q>Check answer</q>. Then ask for a hint. Watch what happens. That should give you the information you need for this quiz.</p>
      </section>
      <section id="hints" class="section-quiz"></section>
      <section>
        <h2>What you need</h2>
        <p><mark id="hint-01" class="hint covert">You can open the first few modules (through <q>Assistive Technologies</q>; see the Table of Contents) in any ES2015-compliant browser, such as a recent or current version of Chrome, Firefox, Safari, or Edge.</mark></p>
        <p>But the modules from <mark id="hint-02" class="hint covert"> <q>Developer Tools</q> to the end</mark> (see the Table of Contents) use some developer-tool features that are currently available only in the <mark id="hint-03" class="hint covert">Chrome browser for Windows, OS X, or Linux</mark>.</p>
        <p>The modules should work partly, but only partly, on iOS or Android devices.</p>
        <p>The modules starting with <q>Inspecting Code for Accessibility</q> also presuppose that you have at least basic familiarity with HTML and CSS.</p>
        <p>In some modules you will be able to make use of JavaScript knowledge if you have some, but it won&rsquo;t be essential.</p>
        <p>If you know how to edit code in a code editor (e.g., WebStorm, VS Code, SpringSource Tool Suite, SlickEdit Pro, Atom, vi), you are welcome to enrich your study by simultaneously creating, editing, and testing interfaces.</p>
      </section>
      <section id="browsers" class="section-quiz"></section>
      <section>
        <h2>Where this fits</h2>
        <p>These modules are one source of training and documentation for accessible front-end UI design, development, and testing at Utopia. There is more. Other resources include:</p>
        <ul>
          <li><a href="http://corpsp.utopia.com/pnd/mc/Accessibility/Pages/Home.aspx">Accessibility Unit</a></li>
          <li><a href="http://confluence.utopia.com:8090/display/UIBC/UI+Boot+Camp">UI Boot Camp</a></li>
          <li><a href="https://satapps.utopia.com/web/cf/vg-vui-ng-webapp/home">VUI Angular Library</a></li>
          <li><a href="https://utopiavgi.invisionapp.com/dsm/utopia-client-experience/utopia-design/folder/components/5c543d56c068ce23d78a6a37">Utopia Design</a></li>
          <li><a href="https://www.utopiabrandsite.com/BMS/">Utopia Brand Site</a></li>
        </ul>
        <p>If you are developing a UI with the Angular framework, you can adopt components from the VUI Angular Library and rely on those components being accessible. In that case, some of these modules, such as those on links, tab lists, forms, and input validation, may be unnecessary, or at least less necessary, for you.</p>
        <p>The VUI Angular Library also contains models for Utopia standard components implemented with HTML and CSS, usable for development regardless of whether you are using the Angular framework.</p>
      </section>
    </main>
  </body>
</html>

==> mod/lang/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p></p>
      </section>
      <section>
        <header>
          <h2>Responsiveness</h2>
        </header>
        <p>The pages contain text in English (with United States terminology). Inspect the <code>html</code> element on both pages. Note that it provides this information on <code>form-good.html</code> but not on <code>form-bad.html</code>. Speech synthesizers and translators use rules and data to pronounce or translate text for users who need (or want) that. Specifying the language and the variety of the language can improve the quality of the output.</p>
      </section>
      <section id="responsive" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/layer/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
    <script src="nav.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The typical display that a user sees is two-dimensional. It has a height and a width, but it has no depth. It is flat.</p>
        <p>However, UI creators often try to cause content to be rendered in a way that mimics three-dimensional space, such as a desk surface with a pile of papers on it. For this purpose designers use shadows, shading, and perspective to trick the user&rsquo;s visual intuition.</p>
        <p>What about users who are not using vision to perceive the display? They rely on assistive technologies to analyze the content, and assistive technologies ignore shadows, shading, and perspective. So the usual design patterns that trick visual users don&rsquo;t trick assistive technologies. They could leave assistive technologies, and their users, confused.</p>
        <p>For maximum accessibility, it is usually wise to avoid three-dimensional metaphors, not trying to show things <q>on top of</q>, <q>covering</q>, or <q>overlaying</q> other things. Instead, you might, for example, insert one thing in between other things already being displayed.</p>
        <p>Nevertheless, many Utopia UIs contain three-dimensionality, in the form of <strong>layers</strong>. So it is useful to know how layers can be made accessible.</p>
      </section>
      <section>
        <header>
          <h2>What is a layer?</h2>
        </header>
        <p><mark id="hint-00" class="hint covert">A <dfn>layer</dfn> is the common name for what is technically called a <dfn>modal dialog</dfn>. It is a container that occupies <strong>part</strong> but not all of the viewport and blocks interactions with <strong>all</strong> of the rest of the content in the viewport.</mark></p>
        <p><mark id="hint-01" class="hint covert">If a container occupied all of the viewport, it would be a page. What makes it a modal dialog is that it gets added to the existing content, temporarily obscuring part of it and blocking interaction with all of it, except itself.</mark> Users see the layer and see the part of the viewport not occupied by the layer, but something tells them that that other part is not currently available for interaction.</p>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>What are modal dialogs for?</h2>
        </header>
        <p>A modal dialog is usually an interruption. Interaction is taking place, and then something special happens. Doubt arises about what should happen next. So a detour is appropriate. Before the interaction continues, Utopia and the user clarify or settle something.</p>
        <p>The thing to be clarified or settled could be:</p>
        <ul>
          <li>Confirm that this is what you want to do.</li>
          <li>Confirm that these are the correct facts.</li>
          <li>Be aware of the following requirements.</li>
          <li>Note the following consequences of your answer.</li>
          <li>Certify that you have read and understand these terms and conditions.</li>
        </ul>
        <p>A modal dialog addresses that need by covering part of the page with the detour process and then, when its chore is complete, disappearing, revealing the original page.</p>
        <p>Note the potential problem here. <mark id="hint-02" class="hint covert">The user may need to examine the page content to resolve the question asked by the modal dialog, but the modal dialog is <strong>covering some of the content</strong>!</mark> So, if you are not careful, your modal dialog can prevent itself from achieving its purpose, at least for distracted or memory-challenged users.</p>
      </section>
      <section id="why" class="section-quiz"></section>
      <section>
        <header>
          <h2>Built-in modal dialogs</h2>
        </header>
        <p>There are three modal dialog types built into the <code>Window</code> Web API:</p>
        <ul>
          <li>alert</li>
          <li>confirm</li>
          <li>prompt</li>
        </ul>
        <p>Using these types requires only minimal JavaScript and should be automatically accessible. For example, it should automatically be <mark id="hint-03" class="hint covert"><dfn>modal</dfn>: While it is open, the user should be unable to navigate to, or operate, anything else in the window</mark>.</p>
        <p>But assistive technologies may fail to support them properly. The NVDA screen reader, for example, announces the following &ldquo;Communication preference&rdquo; alert without ever telling the user about the <q>by mail</q> option that it is warning about. It also misinforms the user that the alert message is on row 1 of 2 rows of a table.</p>
        <section class="example">
          <header>
            <h3>Communication preference</h3>
          </header>
          <form>
            <fieldset>
              <legend>Please send my statements and confirmations</legend>
              <p><label>
                <input type="radio" name="compref" value="elec" checked>
                electronically
              </label></p>
              <p>
                <label
                  title="Mail may make you ineligible for some fee discounts."
                >
                  <input
                    type="radio"
                    name="compref"
                    value="mail"
                    data-focusalert="Mail may make you ineligible for some fee discounts."
                  >
                  by mail
                </label>
              </p>
              <p class="center">
                <button type="button">Submit</button>
              </p>
            </fieldset>
          </form>
        </section>
      </section>
      <section id="builtin" class="section-quiz"></section>
      <section>
        <header>
          <h2>Custom layers</h2>
        </header>
        <p>Although using built-in modal dialogs is straightforward and they should take care of basic accessibility, they have limited functionality and configurability. Usually, Utopia UIs, when they display modal dialogs, customize them.</p>
        <p>An accessible custom modal dialog:</p>
        <ul>
          <li>appears when reasonably expected</li>
          <li>is made known to users, including users of assistive technologies</li>
          <li>successfully blocks both keyboard and mouse interaction with the rest of the viewport</li>
          <li>has accessible content</li>
          <li>allows the user to see information that it covers if relevant</li>
          <li>allows the user to dismiss it with an explicit control and also by pressing the <kbd>ESCAPE</kbd> key</li>
          <li>when dismissed puts the expected element into focus</li>
        </ul>
        <p>There are many ways to implement custom modal dialogs accessibly. If you attend to the above-stated requirements and test to ensure that you have satisfied them, your custom modal dialog will be accessible.</p>
        <p>The most common case in which UI creators at Utopia decide to use custom modal dialogs is transaction cancelation. When a user begins to define a transaction but explicitly requests that it be abandoned, Utopia UIs typically launch a modal dialog to tell the user what the consequences will be and ask the user to confirm or rescind the cancelation.</p>
        <p>This common case entails accessibility risks:</p>
        <ul>
          <li>The modal dialog covers the details of a transaction while the UI asks the user to finalize a decision about it. The user who doesn&rsquo;t remember all the details could be frustrated that they are hidden when needed.</li>
          <li>The question asked to the user is whether to undo an undoing. That is intrinsically complex and exposes the user to a risk of doing the opposite of what is intended.</li>
        </ul>
        <p>These obstacles to accessibility can be overcome. Specifically:</p>
        <ul>
          <li>You can let the user see the hidden details without dismissing the modal dialog, such as by allowing the user to minimize it temporarily or to drag it around the viewport.</li>
          <li>You can ensure that the controls offered by the modal dialog for making the final decision are fully explained, leaving no room for doubt about their effects. For example, instead of <q>Yes</q> and <q>No</q> buttons, you can offer <q>Yes, cancel</q>and <q>No, don&rsquo;t cancel</q> buttons.</li>
        </ul>
        <p>An example will illustrate the possibility of an accessible modal dialog to confirm or rescind an important transaction decision. Perform these operations:</p>
        <ol>
          <li>Open an <a href="../../gen/examples/layer" target="_blank">example of an accessible order-submission interface</a>.</li>
          <li>Click the <q>Submit</q> button. Note that a confirmation dialog appears and goes into focus. That ensures that it comes to the attention of assistive technologies.</li>
          <li>Try to use the mouse to interact with the three buttons in the <q>Action</q> section. If you can do so, you have found a bug; please report it!</li>
          <li>Use the <kbd>TAB</kbd> key and the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination to navigate. Try to escape the dialog with them. If you can do so, you have found a bug; please report it!</li>
          <li>Examine the <q>Yes, submit now</q> button in the Accessibility Tree. Note that it has a role and name, and is in a group with a name that explains the button. This accessibility arises from the coding of the button in a <code>fieldset</code> element with a <code>legend</code> element.</li>
          <li>Click the <q>Hide</q> button.</li>
          <li>Verify with the collapsed dialog that <kbd>TAB</kbd> navigation still stays within the dialog.</li>
          <li>Click the <q>Show</q> button.</li>
          <li>Verify that you can activate the <q>Hide</q> and <q>Show</q> buttons with the <kbd>SPACE</kbd> key, too, once you have used <kbd>TAB</kbd> or <kbd>SHIFT</kbd>-<kbd>TAB</kbd> to put them into focus.</li>
          <li>Click the <q>Close</q> button. Note that the dialog and the surrounding shading disappear and the button that launched them goes into focus again.</li>
          <li>Launch the modal dialog again and click the <q>No, do not &hellip; yet</q> button.</li>
          <li>Launch the modal dialog again and click the <q>Yes &hellip; now</q> button.</li>
          <li>Reload the page and make the modal dialog appear again. Then close it by pressing the <kbd>ESCAPE</kbd> key.</li>
          <li>Similarly, check the behavior of the modal dialog when you click the <q>Cancel it</q> button instead of the <q>Submit it</q> button.</li>
        </ol>
        <p>This example is only about modal-dialog accessibility, so after a modal dialog is closed it doesn&rsquo;t take you anywhere else.</p>
        <p>The above operations test the interface for the accessibility features listed above.</p>
        <p>The HTML, CSS, and JavaScript coding that makes this example work accessibly is similar to that underlying the built-in modal dialogs discussed above. But without the built-in mechanisms you need to code the accessibility features that they automatically provide. The example also offers some additional features. So, the coding here needs to be more elaborate.</p>
        <p>One of the accessibility features you observed above is focus management. When a modal dialog opens, it (or the first actionable element in it, if you prefer) goes into focus, so the user becomes aware of it and can easily begin to interact with it. When a modal dialog is closed, an appropriate element goes into focus. In the case of this example, if the user aborted the (submission or cancelation) action, the button that launched the modal dialog goes into focus again. To see how this feature is implemented here, perform these operations:</p>
        <ol>
          <li>Inspect the <q>Submit it</q> button with the developer tools. Note that it has a <code>class</code> attribute with the value <code>custom-confirm</code> and an <code>aria-controls</code> attribute with the value <code>layer0</code>.</li>
          <li>Below that, find the code for the <code>Cancel it</code> button. Note that it is similar, except that the value of <code>aria-controls</code> is <code>layer1</code> instead of <code>layer0</code>.</li>
          <li><mark id="hint-04" class="hint covert">In the <q>Sources</q> panel, select <code>nav.js</code>. This file contains the JavaScript code for this example.</mark></li>
          <li>In <code>nav.js</code>, examine the function <code>layerCloseHandler</code>. Note that it defines a variable named <code>layerLauncher</code>, which refers to the button that launched the layer. This definition searches the <code>body</code> element of the document for the first occurrence of an element that has a <code>class</code> value of <code>custom-confirm</code> and an <code>aria-controls</code> value of whatever the <code>id</code> of the layer is. At the end, if the user activated one of the two buttons that abort the action, the function closes the layer by changing its <code>overt</code> class to <code>covert</code> and gives the focus to the <code>layerLauncher</code> element.</li>
        </ol>
        <p>The <q>Submit it</q> and <q>Cancel it</q> buttons have <code>aria-controls</code> attributes that perform two functions:</p>
        <ul>
          <li>They choose which layer to launch.</li>
          <li>They tell the application which button to put back into focus when the layer is closed.</li>
        </ul>
        <p>Returning the focus to its pre-layer element is the typical practice for accessibility. It is not an absolute rule, however. The user&rsquo;s action on the layer might make the previous focal element obsolete. This example application uses the <code>aria-controls</code> attribute to return the focus when the user aborts the action. If, however, the user confirms the action, the buttons become obsolete. So then the application finds an element that has been given an <code>id</code> of <code>ack-home</code>, empties that element out (deleting the three-button form), inserts an acknowledgement there, and puts it into focus. This ensures that any assistive technology is made aware of the acknowledgement.</p>
      </section>
      <section id="custom" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/layout/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>This module has not yet been written. It contains only a fragment of some future content.</p>
      </section>
      <section>
        <header>
          <h2>Responsiveness</h2>
        </header>
        <p>Note what happens to both pages when you narrow the size of your browser window. The layout of <code>form-bad.html</code> doesn&rsquo;t change, so its right side gets cut off from your view. But <code>form-good.html</code> responds by adjusting the layout, so you can still see all of the content.</p>
        <p>This difference in responsiveness becomes more severe when users zoom in. Zoom in to 200% (by pressing <code>control-shift-+</code> 5 times). Then you can see even less of the <code>form-bad.html</code> content in a narrow window, while the <code>form-good.html</code> content still responds. (You can unzoom with <code>control-0</code>.)</p>
        <p>The last thing you did in the <q>Inspecting the page</q> section was to narrow the browser window. Why did only the <code>form-good.html</code> content adjust to this change? </p>
        <ol>
          <li>Inspect the style applied to the <code>body</code> element on both pages&rsquo; stylesheets. The <code>body</code> element is the one containing the whole page. On <code>form-bad.html</code> the <code>body</code> element has a CSS property of <code>width</code> with a value of 650 pixels. But on <code>form-good.html</code> it has a <code>max-width</code> CSS property instead. As you might suppose, this forces the <code>form-bad.html</code> content to be 650 pixels wide, while allowing the <code>form-good.html</code> content to adjust to its parent&rsquo;s width whenever it becomes less than 650 pixels. The <code>html</code> element is the parent, and you change its width when you widen or narrow the browser window.</li>
          <li>The course immediately after this one in UI Boot Camp is <q>Responsive Design</q>. It will teach you more about this topic.</li>
        </ol>
      </section>
      <section id="responsive" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/link/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Links are the essence of the web, so if the links on a web page are not accessible then the page isn&rsquo;t accessible.</p>
        <p>Links also have a major impact on user experiences. They take users away from the content that they are consuming or the form that they are completing (i.e. from their current <dfn>context</dfn>). Suddenly the user is somewhere else. It is even possible that a transaction is interrupted and cannot be resumed. So making links accessible is an important goal of accessibility.</p>
      </section>
      <section>
        <header>
          <h2>What links are</h2>
        </header>
        <p>Web pages often contain both links and buttons. There is much confusion, at Utopia and elsewhere, about the difference between them. Your UIs will be more accessible if you make it easy for users to distinguish links from buttons and understand the role played by each.</p>
        <p>First, buttons are controls in forms. <mark id="hint-00" class="hint covert">Buttons, when activated, do something. That <q>something</q> often ends with a change of context, such as when the user clicks a <q>Submit</q> button, a transaction is executed, and a new page is rendered acknowledging the submission. But a button doesn&rsquo;t <strong>merely</strong> change the context.</mark></p>
        <p>By contrast, links are not usually inside forms. They can be anywhere. <mark id="hint-01" class="hint covert">Links do not take actions; they merely change the context, i.e. where the user is.</mark></p>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>How links look</h2>
        </header>
        <p><mark id="hint-02" class="hint covert">Unless you don&rsquo;t override the defaults, browsers style links by default to make them distinct from plain text. The differences:</mark></p>
        <ul>
          <li>Their color is blue if they have not yet been visited, and purple once they have been visited.</li>
          <li>They are underlined.</li>
        </ul>
        <p>That makes them look quite different from buttons. Buttons <strong>contain</strong> text, but they are circular or rectangular shapes, and if rectangular usually with rounded corners.</p>
        <p>Many Utopia web pages have overridden browsers&rsquo; default link styles, and there have sometimes been multiple link styles on the same page. Pages have also made the distinction between links and buttons difficult to discern. Here is an example with seven differently styled links:</p>
        <p class="exhibit"><img src="../../gen/static/crewnetlinks.png" alt="section of StaffNet web page showing links having six different styles"></p>
        <p>Utopia sites are moving toward adopting a simpler, more uniform custom representation of links, distinct from that of buttons.</p>
      </section>
      <section id="look" class="section-quiz"></section>
      <section>
        <header>
          <h2>How links show state</h2>
        </header>
        <p>Links, as mentioned above, can be in not-yet-visited or visited states. In addition, as described in the <a href="../here">You are Here</a> module, they can be in a hover, focus, or activation state.</p>
        <p>State indication for links is discussed in the <a href="../here">You are Here</a> module. This module doesn&rsquo;t repeat what is there. The basic message of that module is that hover, focus, and activation are importantly different states, and for maximum accessibility your UIs will let the user know which of these states is (or are) in effect at any time.</p>
      </section>
      <section>
        <header>
          <h2>Making link behavior predictable</h2>
        </header>
        <p>Accessible links take users to places where users expect to be taken. They don&rsquo;t surprise users. Moreover, they tell users enough about the destination to avoid ambiguity.</p>
        <p>A common anti-pattern is a set of <q>Learn more &hellip;</q> links adjacent to various snippets. You might assume that users always know what topic each <q>Learn more</q> link is about, but that cannot be assumed. Some users are not looking at the page and are listening instead. They may reach any of the links with the <kbd>TAB</kbd> key, skipping over the snippets. In that case, all they hear is <q>Learn more</q>, and they don&rsquo;t know what the topic will be if they activate the link.</p>
        <p>So, to make your links accessible, assume that a user reaches each link with an assistive technology and doesn&rsquo;t know what else is nearby. Ensure that the link text itself gives enough information to predict where the link will lead. For example, make it &ldquo;Learn more about ETFs&rdquo;.</p>
        <p><mark id="hint-03" class="hint covert">If it isn&rsquo;t practical to include the necessary information in the link text, you can give the link an accessible name different from the link text. The most straightforward method is to list the parts of the accessible name in the value of an <code>aria-labelledby</code> attribute, like this:</mark></p>
<pre>&lt;p id="ffsnippet"&gt;
  A factor-based fund is an ETF
  that selects stocks with particular
  characteristics.
&lt;/p&gt;
&lt;p&gt;
  &lt;a
    id="fflearn"
    href="/etf/factor-funds/details"
    aria-labelledby="ffsnippet fflearn"
  &gt;
    Learn more &hellip;
  &lt;/a&gt;
&lt;/p&gt;</pre>
        <p><mark id="hint-04" class="hint covert">This code cancatenates the sentence <q>A factor-based fund is &hellip;</q> with <q>Learn more &hellip;</q> and makes the combination the accessible name of the <code>a</code> element. A user, whether looking or listening, gets fully informed about the effect of activating the link.</mark></p>
      </section>
      <section id="predict" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/magtest/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script defer src="../../gen/homeData.js"></script>
    <script defer src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Magnifiers help users who have limited vision, users in poor lighting conditions, and users of devices that by default shrink content.</p>
        <p>Whole-content magnifiers and text-only magnifiers are built into operating systems, and some UIs offer magnification as a control. Other hardware and software magnifiers are available as separate products.</p>
      </section>
      <section>
        <header>
          <h2>Testing with magnifiers</h2>
        </header>
        <p>Testing with magnifiers can reveal accessibility problems that would be difficult to discover otherwise. Here are some reasons:</p>
        <ul>
          <li>Automated code-inspection tools, such as axe, don&rsquo;t try to test for magnification errors.</li>
          <li>Some magnification problems are matters of degree, so you may need to exercise judgment as to whether the problems are serious enough to merit resolution.</li>
          <li>The norms on magnifiability are vague, because they require the preservation of <q>content</q> and <q>functionality</q>, so you might be unable to decide on magnification issues without input from colleagues and users who rely on magnification.</li>
        </ul>
        <p>Testing with a magnifier is straightforward. You navigate and operate with magnification on. You also vary the width of the browser window. Various methods of magnification that you can use are described in the <a href="../size">Accessible Sizing</a> module. Perform these operations:</p>
        <ol>
          <li>Set whole-content magnification (zoom) to 400%, to test for conformity to WCAG Success Criterion <i>1.4.10</i>.</li>
          <li>Navigate to some Utopia web pages, also narrowing the window width, to check for any loss of content or functionality.</li>
          <li>Return the whole-content magnification to 100%.</li>
          <li><mark id="hint-00" class="hint covert">In Chrome, you can&rsquo;t fully test for conformity to WCAG Success Criterion <i>1.4.4</i> by using the font-size setting, because its maximum size is less than 200% of normal. But on any web page you can open the developer tools and edit the font size of the <code>html</code> element in the <q>Styles</q> pane, making it <code>32px</code>, double the normal size.</mark> Try this on a few pages and check for any loss of content or functionality.</li>
        </ol>
        <p>You can also test with both whole-content and text magnification on at the same time. The <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html#the-relation-of-reflow-to-the-success-criterion-<i>1.4.4</i>-resize-text">W3C says that both should be possible together</a>.</p>
        <p>An example of what you can discover is a <a href="https://retirementplans.utopia.com/VGApp/pe/pubeducation/calculators/RetirementNestEggCalc.jsf">page explaining Monte Carlo simulations</a> that renders overlapping text when whole-content magnification is set to 400% and the window width is minimized:</p>
        <p class="exhibit"><img src="../../gen/static/overlap.png" alt="heading overlapping with the text below it"></p>
        <p>Another example is a <a href="https://investor.utopia.com/mutual-funds/profile/performance/W186?FundIntExt=EXT">table that becomes hard to read when magnification is on</a>. You can see numbers, such as $11.79, but you can&rsquo;t easily see what they mean, because the column and row headers that explain them are so far away that they become off-screen if the content is magnified.</p>
        <p class="exhibit"><img src="../../gen/static/headersgone.png" alt="table headers off-screen because of magnification"></p>
        <p>Testing with magnifiers doesn&rsquo;t diagnose problems, but does  reveal them, helping you discover what you need to investigate.</p>
      </section>
      <section id="mag" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/markupval/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Browsers, search engines, assistive technologies, and other automated agents parse the markup in your UI before presenting the content to users. These intermediate agents may or may not be designed to forgive, overlook, or compensate for markup errors. Any errors in your UI&rsquo;s markup can interfere with these agents&rsquo; services and thereby damage accessibility.</p>
        <p>Moreover, <mark id="hint-00" class="hint covert">ten accessibility success criteria in <a href="https://www.w3.org/TR/WCAG21/">WCAG 2.1</a> explicitly require particular kinds of correct markup. Nine of them require that certain facts be <a href="https://www.w3.org/TR/WCAG21/#dfn-programmatically-determinable"><q>programmatically determined</q></a>. And one of them, <a href="https://www.w3.org/TR/WCAG21/#parsing">Success Criterion <i>4.1.1</i></a>, requires that markup be syntactically correct in certain respects.</mark></p>
        <p><mark id="hint-01" class="hint covert">The requirements for HTML and CSS validity are much more extensive than the requirements for accessibility.</mark> On the basis of rough file comparisons, the specification of HTML 5.2 is about 20 times as large as that of WCAG 2.1, and the specification of CSS3 is about 4 times as large as that of HTML5.2.</p>
        <p>Given the vast extent of the specifications, conformity to them is practical only with the help of automated validators.</p>
      </section>
      <section id="intro" class="section-quiz"></section>
      <section>
        <header>
          <h2>W3C Markup Validation Service</h2>
        </header>
        <p>The <a href="https://validator.w3.org/">World Wide Web Consortium offers a service</a> that checks the validity of HTML code. If a web page is public, you can check the validity of its HTML by submitting its URL on the service&rsquo;s website. If the page is not public and the code is not <a href="http://crewnet.utopia.com/workpractices/infoaccess/infosec/isp_combined_detail.html"><q>Confidential</q> or <q>Highly Confidential</q></a>, you can check the validity of its HTML by uploading it as a file or pasting it into a text area. The service outputs a report of errors found and warnings of poor or obsolete practices.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>Open an <a href="../../gen/examples/validator" target="_blank">example of a page needing HTML validation</a>.</li>
          <li>Note the list of numerous defects in its HTML code.</li>
          <li>With that page active, <mark id="hint-02" class="hint covert">open the developer tools.</mark></li>
          <li><mark id="hint-03" class="hint covert">In the <q>Sources</q> panel, select the (<q>index</q>) file, select all of its code, and copy it.</mark></li>
          <li><mark id="hint-04" class="hint covert">Visit the <a href="https://validator.w3.org/" target="_blank">W3C Markup Validation Service</a>.</mark></li>
          <li><mark id="hint-05" class="hint covert">Choose the <q>Validate by Direct Input</q> tab.</mark></li>
          <li><mark id="hint-06" class="hint covert">Paste the copied code into the text area.</mark></li>
          <li><mark id="hint-07" class="hint covert">Click the <q>Check</q> button.</mark></li>
          <li>Compare the defects listed on the page with the errors and warnings produced by the tool. Note that the W3C tool reports all of the listed defects except the skipping of heading levels from <code>h1</code> to <code>h3</code> (defect 4).</li>
          <li>In the WorldSpace panel of the developer tools, use the dropdown list on the left to open the <q>Rules</q> menu. In it, select WCAG 2.1 Level AA as the active ruleset, and also turn on <q>Test best practices</q>.</li>
          <li>Make axe analyze the page.</li>
          <li>Note that <mark id="hint-08" class="hint covert">axe finds the heading issue omitted by the W3C Markup Validation Service.</mark></li>
          <li>Note that axe also reports the <code>li</code> element contained in a <code>u</code> element.</li>
          <li>Note that axe reports two of the other defects reported by the W3C Markup Validation Service: the <code>u</code> element defect and the duplicate <code>id</code> values.</li>
          <li>Note that axe reports the final <code>li</code> element defective, because it isn&rsquo;t inside a <code>ul</code> or <code>ol</code> element. Why? Because the <code>code</code> element in item 9 of the list wasn&rsquo;t closed. That caused everything after it to be interpreted as being inside the <code>code</code> element.</li>
        </ol>
        <p>There is some overlap between these two tools, but each one catches errors that the other one would catch if were perfect but in reality overlooks. For example, the W3C tool should warn about skipped heading levels, a recognized bad practice. And axe should report as an error the fact that an element has 2 instances of the same attribute, because that is a violation of WCAG 2.1 Success Criterion <i>4.1.1</i> (Level A).</p>
        <p>Therefore, the most thorough testing makes use of more than a single tool.</p>
      </section>
      <section id="w3c" class="section-quiz"></section>
      <section>
        <header>
          <h2>WebStorm HTML inspector</h2>
        </header>
        <p><mark id="hint-09" class="hint covert">Code editors perform validation while the user is entering code, and they also validate entire files at once. WebStorm is one of the most commonly used code editors at Utopia.</mark></p>
        <p>If you have WebStorm installed, perform the following operations:</p>
        <ul>
          <li>Open WebStorm.</li>
          <li>Choose &ldquo;Settings&hellip;&rdquo; from the &ldquo;File&rdquo; menu.</li>
          <li>Navigate to &ldquo;Editor/Inspections/HTML/Accessibility&rdquo;.</li>
          <li>Open &ldquo;Accessibility&rdquo;.</li>
          <li>Edit the settings. As of version 2019.2, it is appropriate to turn on the inspections for labels, <code>alt</code>, <code>lang</code>, and <code>title</code> element, and to classify them all as errors. The <code>summary</code> element has become obsolete, and the <a href="https://www.w3.org/TR/WCAG20-TECHS/H33.html#H33-description">W3C recommends</a> avoiding reliance on the <code>title</code> attribute.</li>
          <li>Close the &ldquo;Settings&hellip;&rdquo; window.</li>
          <li>Create a new HTML file, giving it any name you wish.</li>
          <li>Replace the content of the file by pasting the code copied from the (<q>index</q>) file of the same page needing HTML validation that you checked with the W3C tool above.</li>
          <li>In the <q>Code</q> menu, choose <q>Inspect Code &hellip;</q>.</li>
          <li>Choose <q>File</q> as the inspection scope and <q>IDE Default</q> as the inspection profile.</li>
          <li>Click <q>OK</q>.</li>
          <li>Review the inspection results by expanding the categories in the left column.</li>
          <li>Review the reported errors and warnings. Note that <mark id="hint-10" class="hint covert">of the 12 defects listed in the file WebStorm caught 8 of them (2, 3, 5, 6, 8, 9, 11, and 12). This is fewer than the W3C tool caught</mark>. The W3C tool caught all the defects that WebStorm caught. Note also that none of WebStorm&rsquo;s accessibility inspections found anything wrong.</li>
        </ul>
        <p>WebStorm in this test was not as thorough as the W3C tool, but validation on every keystroke can catch problems early, so code-editor validation may help you produce accessible code that doesn&rsquo;t require correction later.</p>
      </section>
      <section id="webstorm" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/norm/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Norms of accessibility include government statutes and regulations, court decisions, industry standards and recommendations, internal Utopia policies, UI conventions, and <q>best practices</q>.</p>
        <p>Norms of these kinds are not entirely distinct. For example, some laws and court decisions adopt industry recommendations as their criteria of satisfactory accessibility.</p>
      </section>
      <section>
        <header>
          <h2>Industry norms</h2>
        </header>
        <p>Industry norms are usually called <q>standards</q>, <q>recommendations</q>, or <q>guidelines</q>.</p>
        <p><mark id="hint-00" class="hint covert">The World Wide Web Consortium (W3C) sponsors the most widely accepted industry norms on accessibility. These include:</mark></p>
        <ul>
          <li><a href="https://www.w3.org/TR/WCAG21/">
            <mark id="hint-01" class="hint covert">
              Web Content Accessibility Guidelines (WCAG)
            </mark>
          </a></li>
          <li><a href="https://www.w3.org/TR/2018/WD-wai-aria-1.2-20181218/">
            Accessible Rich Internet Applications (WAI-ARIA)
          </a></li>
          <li><a href="https://www.w3.org/TR/HTML5/">HTML 5.2</a></li>
        </ul>
        <p>The last of these (HTML5) covers far more than accessibility, but contains some of the most important mechanisms by which developers make interfaces accessible.</p>
        <p>Industry norms change. For example, WCAG 2.0 was published in 2008, WCAG 2.1 was published in 2018, and drafts of WCAG 2.2 began to be published in 2020. Such changes lead industry, including Utopia, to upgrade its implementations compatibly with new technologies and new expected functionalities.</p>
        <p>There are other norms that don&rsquo;t concern most Utopia developers, including the <a href="https://www.w3.org/TR/ATAG20/">
        Authoring Tool Accessibility Guidelines (ATAG)</a> and the <a href="https://www.w3.org/TR/UAAG20/">User Agent Accessibility Guidelines (UAAG)</a>.
        </p>
      </section>
      <section id="industry" class="section-quiz"></section>
      <section>
        <header>
          <h2>Statutes, regulations, and court decisions</h2>
        </header>
        <p>Legislation and regulations on accessibility (or interpreted by some courts as imposing UI accessibility requirements) adopted by the United States and other governments include:</p>
        <ul>
          <li>
            <a href="https://www.access-board.gov/the-board/laws/rehabilitation-act-of-1973#508">
              Rehabilitation Act of 1973, Section 508
            </a>
          </li>
          <li><a href="https://www.section508.gov/sell/vpat">
            Voluntary Product Accessibility Template (VPAT)
          </a></li>
          <li><a href="https://www.ada.gov/access-technology/enforcement.html">
            Americans with Disabilities Act (ADA)
          </a></li>
          <li><a href="https://www.ontario.ca/laws/regulation/110191#BK9">
            Integrated Accessibility Standards under Accessibility for Ontarians with Disabilities Act
          </a></li>
          <li><a href="https://www.w3.org/WAI/policies/">
            Laws and policies of 23 governments
          </a></li>
        </ul>
        <p>Governments usually incorporate industry standards (most often WCAG) into accessibility laws. Most UIs that we develop at Utopia relate to two industry standards cited above: WCAG and WAI-ARIA. If you study accessibility in more depth, you will start to become familiar with those two standards.</p>
        <p>In U.S. courts, statutes and regulations about accessibility are most often enforced by private parties claiming discrimination. <a href="https://www.adatitleiii.com/2018/07/website-access-and-other-ada-title-iii-lawsuits-hit-record-numbers/">About 2,000 lawsuits for web accessibility are filed in U.S. federal courts annually</a>.</p>
        <p>Courts have held that some statutes prohibiting disability discrimination require UIs to be accessible. One example is <mark id="hint-02" class="hint covert">the <a href="https://www.ada.gov/hrb-cd.htm" target="_blank">court-approved settlement in 2014</a> of a lawsuit against a tax-preparation firm, H&R Block</mark>. The settlement applied Title III of the Americans with Disabilities Act to H&R Block&rsquo;s websites and mobile applications.</p>
        <p>Statutes and regulations change. The jurisdictions with the most recont new legislation on accessibility include the European Union, Canada, Ontario, and California.</p>
      </section>
      <section id="law" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/org/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Look at this screen shot from a Utopia web page.</p>
        <p class="exhibit"><img src="../../gen/static/org.png" alt="Utopia web page with form and data on trading an ETF or stock, including a trading form on left side with text inputs, dropdown lists, and buttons, and data on a specific ETF and the user&rsquo;s account on the right side"></p>
        <p>If you were asked to describe how it is organized, you would use your best judgment and probably conclude, among other things, that:</p>
        <ul>
          <li>&ldquo;Trade an ETF&rdquo; acts as a heading for both sides, not only the left side.</li>
          <li>The &ldquo;Refresh&rdquo; link on the right side relates only to the account information, not the whole page.</li>
          <li>&ldquo;Dollars to shares calculator&rdquo; is <strong>not</strong> a heading for the two dropdown lists below it.</li>
          <li>&ldquo;Look up symbol&rdquo; relates to the text input above it, not the text input below it.</li>
          <li>&ldquo;Account information&rdquo; is a heading for the content below it, not for the entire right side.</li>
          <li>The upper-right section (currently headed by &ldquo;Utopia Total Stock Market ETF (VTI)&rdquo;) is the section that gets replaced by new content when the user activates the &ldquo;GET QUOTE&rdquo; button on the left.</li>
          <li>&ldquo;Shares&rdquo; is a label for the text input field to its right.</li>
          <li>&ldquo;Holdings&rdquo; and &ldquo;Orders&rdquo; are two headings, not two words of a single heading.</li>
          <li>&ldquo;Holdings&rdquo; and &ldquo;Orders&rdquo; are <strong>not</strong> headings of the content below them.</li>
        </ul>
        <p>These conclusions are based on intuitions, not explicit rules. You and others viewing this page might not agree on all such conclusions. Assistive technologies could make mistakes if they needed to make guesses about page organization on the basis of how the page looks (relative locations, dividing lines, font sizes, colors, etc.).</p>
        <p>Accessibility standards require the organization of a page to be explicitly coded. That permits assistive technologies to interpret and explain the page organization to their users without making guesses.</p>
        <p>In addition, some assistive technologies can be interrogated about page organization. Users can get answers to such questions as &ldquo;What is the heading outline of this page?&rdquo; or &ldquo;Where does the page-specific content begin?&rdquo;.</p>
      </section>
      <section>
        <header>
          <h2>Headings</h2>
        </header>
        <p>In HTML5 there are six heading elements, from <code>h1</code> (most important) to <code>h6</code> (least important).</p>
        <p>An accessible web page uses these heading elements as an outline. In non-digital documentation, outlines use various headings, such as:</p>
        <pre>
          I. Investment types
            A. Equity
              1. Stocks
              2. Stock funds
                a. Stock mutual funds
                b. Stock exchange-traded funds
            B. Fixed-income
              1. Bonds
              2. Bond funds
                a. Bond mutual funds
                b. Bond exchange-traded funds
        </pre>
        <p>An HTML5 equivalent could be:</p>
        <pre>
          &lt;h1&gt;Investment types&lt;/h1&gt;
            &lt;h2&gt;Equity&lt;/h2&gt;
              &lt;h3&gt;Stocks&lt;/h3&gt;
              &lt;h3&gt;Stock funds&lt;/h3&gt;
                &lt;h4&gt;Stock mutual funds&lt;/h4&gt;
                &lt;h4&gt;Stock exchange-traded funds&lt;/h4&gt;
            &lt;h2&gt;Fixed-income&lt;/h2&gt;
              &lt;h3&gt;Bonds&lt;/h3&gt;
              &lt;h3&gt;Bond funds&lt;/h3&gt;
                &lt;h4&gt;Bond mutual funds&lt;/h4&gt;
                &lt;h4&gt;Bond exchange-traded funds&lt;/h4&gt;
        </pre>
        <p>Some important principles of accessible headings:</p>
        <ul>
          <li>Use the <code>h1</code> through <code>h6</code> elements for headings, use them for nothing else, and use no other elements for headings.</li>
          <li><mark id="hint-00" class="hint covert">Don&rsquo;t skip any levels.</mark></li>
          <li>
            If a page has one main topic:
            <ul>
              <li>Give the page only one <code>h1</code> element.</li>
              <li>Name the page topic in the heading.</li>
              <li>Make the heading identical to the page-specific part (or all) of the <code>title</code> element.</li>
            </ul>
          </li>
          <li>Define consistent styles for the heading elements across the site.</li>
          <li>Make the headings descriptive. Users of assistive technologies can ask for the headings and then choose a heading to start from, so accurate headings help users find what they want.</li>
        </ul>
      </section>
      <section id="heading" class="section-quiz"></section>
      <section>
        <header>
          <h2>Regions</h2>
        </header>
        <section>
          <header>
            <h3>Introduction</h3>
          </header>
          <p>The content that begins with a heading and extends to just before the next heading at the same or a higher level (for example, from an <code>h3</code> heading until just before the next <code>h1</code>, <code>h2</code>, or <code>h3</code> heading) is usually distinct from the rest of its page. Such a distinct block of content is called a <dfn>region</dfn>.</p>
          <p>Regions are not all alike. To help assistive technologies orient their users, accessible UIs mark regions with <dfn>landmark</dfn>s, elements that classify their content as regions of particular types.</p>
        </section>
        <section>
          <header>
            <h3>Header, main, footer</h3>
          </header>
          <p>Most Utopia web pages are organized into a standard header, a page-specific section, and a standard footer. The header and footer remain mostly constant from page to page. The <code>header</code>, <code>main</code>, and <code>footer</code> elements are the standard landmarks for these regions.</p>
          <p></p>
        </section>
        <ol>
          <li>The structure of <code>form-good.html</code> is more semantically rich than the structure of <code>form-bad.html</code>. The whole <code>form-good.html</code> page is partitioned into semantic regions, which help assistive technologies analyze the page for their users. Look at the HTML files and note the differences. On <code>form-good.html</code>, the <code>body</code> element is partitioned into a <code>header</code> element and a <code>main</code> element. The <code>main</code> element in turn contains a <code>section</code> element. On a more complex page there would likely be several <code>section</code> elements (as there are, for example, on this page that you are reading). These are some of the region elements (also called <q>landmarks</q>) available for semantically organizing a page. Note that <code>form-bad.html</code> doesn&rsquo;t contain such region elements.</li>
        </ol>
      </section>
      <section id="region" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/size/index.html <==
<!DOCTYPE html>
<script>console.log(document.lastModified)</script>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The size of an item in a Utopia UI affects accessibility. Some accessibility problems with sizing to watch for:</p>
        <ul>
          <li>Items are too small, so text is difficult to read and it is difficult to click or tap the desired target.</li>
          <li>Users are not permitted to make items larger.</li>
          <li>Users can make items larger, but doing so corrupts the display.</li>
          <li>Items&rsquo; sizes misrepresent their meanings.</li>
        </ul>
        <p>The need for accessible sizing extends beyond persons with poor vision. It includes users in poor lighting conditions, users with mobile devices that shrink the text, and users who are in motion while browsing and cannot touch precisely. And all users get confused when sizes misrepresent the purpose or importance of items.</p>
        <p>One might guess, for example, that the most important purpose for most visitors to <a href="https://www.utopiajobs.com">utopiajobs.com</a> is to look for employment opportunities. If so, they might be confused when seeing a philosophical appeal much larger than the label <q>JOB SEARCH</q>.</p>
        <figure>
          <img src="../../gen/static/jobs.png" alt="Excerpt from utopiajobs.com, with 'Do the right thing for our clients and communities' in a large font and 'JOB SEARCH' in a small font">
          <figcaption>Job search UI</figcaption>
        </figure>
        <p>Accessible UIs employ a reasonable mixture of universalism (one thing designed to be good for everybody) and customizability. They begin with sizes that will make content easy for most users to read and operate, and will help users understand what is most important. Then, to support users in unusual situations, they also make it easy to change sizes without corrupting the display.</p>
      </section>
      <section>
        <header>
          <h2>Text</h2>
        </header>
        <p>The financial services industry has a poor reputation for its <dfn>fine print</dfn>. This refers to disclaimers, disclosures, terms of use, and footnotes that can get the customer into trouble but are too small (and also too faint, jargon-filled, complex, and long) for easy reading.</p>
        <p>Making all text large enough for easy reading is a basic contribution to accessibility. Strangely, the most widely adopted accessibility guidelines don&rsquo;t prescribe a minimum size for text, but browsers generally adopt an industry-wide practice of making the default font size 16 pixels. Experts typically advise making 16 pixels the minimum font size. <a href="https://health.gov/healthliteracyonline/display/section-3-3/">The U.S. Department of Health and Human Services</a> suggests, <q>If many of your users are older adults, consider using an even larger font size&mdash;19 pixels</q>.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>Visit the <a href="https://investor.utopia.com/retirement/savings/" target="_blank">page on retirement planning for ages 20&ndash;49</a>.</li>
          <li>Inspect any paragraph of body text, such as the one that begins with <q>You probably have a lot of questions</q>, with the developer tools.</li>
          <li>In the <q>Styles</q> pane, note the font size, shown in <code>em</code> units, where 1 <code>em</code> is the size inherited from the parent element. To see the size in pixels, find the font size in the <code>Computed</code> pane next to the <q>Styles</q> pane. Note that it is 14 pixels, less than the browser-standard 16 pixels.</li>
          <li>Does Utopia make the font size larger for older investors, to accommodate their diminished average eyesight? Find out by visiting the <a href="https://investor.utopia.com/retirement/income/" target="_blank">page on retirement planning for ages 65+</a> and inspecting some body text in the same way.</li>
          <li>Note that the body text <mark id="hint-00" class="hint covert">has a declaration setting <code>font</code> (including <code>font-size</code>) to <code>inherit</code>. Find its absolute size in the <q>Computed</q> pane.</mark> Note that the size is <code>14px</code>, the same as on the page aimed at a younger audience.</li>
        </ol>
      </section>
      <section id="text" class="section-quiz"></section>
      <section>
        <header>
          <h2>Controls</h2>
        </header>
        <p>When you give users sets of radio buttons, checkboxes, buttons, or other <a href="../form">form controls</a>, most users will choose them with a mouse if their devices have one, or by tapping with a finger if their devices are touch devices. To protect users from clicking or tapping the wrong control, accessible UIs make controls reasonably large.</p>
        <p>How large is <q>reasonably large</q>? The safest and best practice is to adhere to <a href="https://www.w3.org/WAI/WCAG21/Understanding/target-size.html">WCAG 2.1 Success Criterion <i>2.5.5</i></a>, which advises that controls be at least <strong>44 pixels square</strong>. <a href="https://satapps.utopia.com/web/cf/vg-vui-ng-webapp/components/categories/form-elements">VUI components</a> contain controls ranging in size from 32 to 46 pixels.</p>
        <p>Historically, Utopia UIs have often contained smaller form controls, ranging down to 24 pixels. To see that these sometimes make UIs challenging to operate, perform these operations:</p>
        <ol>
          <li>Visit Utopia&rsquo;s <a href="https://retirementplans.utopia.com/VGApp/pe/pubeducation/calculators/RetirementNestEggCalc.jsf" target="_blank">Retirement Nest Egg Calculator</a>.</li>
          <li>Note that there are five circular buttons on the form. Use the developer tools to inspect the button between <q>Stocks</q> and <q>Bonds</q>. <mark id="hint-01" class="hint covert">Note the declarations that define its <code>height</code> and <code>width</code> style properties</mark> as 26 pixels each.</li>
          <li>Are these buttons large enough? That&rsquo;s a matter of opinion and user testing. The largest square that would fit into one of these circular buttons is only 18 pixels square. If you wish, visit <a href="http://retirementplans.utopia.com" target="_blank">http://retirementplans.utopia.com</a> on a mobile telephone, choose the Retirement Nest Egg Calculator, and manipulate those same buttons by tapping and dragging. Can you reliably target the buttons?</li>
        </ol>
      </section>
      <section id="control" class="section-quiz"></section>
      <section>
        <header>
          <h2>How users enlarge</h2>
        </header>
        <p>Accessible UIs permit users to enlarge what is displayed without losing content or functionality. The most common methods available to users for enlarging items displayed by browsers are:</p>
        <ul>
          <li>Browser zoom with reflow</li>
          <li>Browser zoom without reflow</li>
          <li>Browser setting</li>
          <li>Operating system setting</li>
        </ul>
        <p>The term <dfn>reflow</dfn> describes the refreshing of the text of a page when the window width changes, so that the text is wrapped at new positions to make the lines fit within the visible window.</p>
        <p>Operating system settings affect multiple applications, <strong>perhaps including the browser</strong>. Browser settings affect only the browser, and, in fact, only the text in the browser. Browser zoom, however, affects all of the browser content. Browser zoom with reflow rewraps the lines of text. Browser zoom without reflow doesn&rsquo;t rewrap the text. Without reflow, the lines extend beyond the side edges of the screen, requiring the user to scroll left and right on each line of text.</p>
        <p>Perform these operations:</p>
        <ol>
          <li><mark id="hint-02" class="hint covert">Make your browser zoom in <strong>with</strong> reflow, using the <kbd>ctrl/cmd</kbd>-<kbd>+</kbd> shortcut. Repeat a few times. Note that the text reflows and remains entirely visible.</mark> Note also the popup message near the top of the window telling you what magnification you have produced. Note whether your view has suffered from any truncated or overlapping text.</li>
          <li>Do the same to zoom out, with the <kbd>ctrl/cmd</kbd>-<kbd>-</kbd> shortcut.</li>
          <li>Find the Chrome <q>Settings</q> tool. You can access it via the <code>&vellip;</code> icon in the upper right corner of the browser window, or via the Chrome <q>Preferences</q> menu.</li>
          <li><mark id="hint-03" class="hint covert">With the Settings tool, zoom in and out with reflow again.</mark></li>
          <li>Restore the non-zoomed view with the <kbd>ctrl/cmd</kbd>-<kbd>0</kbd> shortcut.</li>
          <li>Open an <a href="../../gen/examples/imgsize" target="_blank">example of image and font sizing</a>. Note that it contains two images.</li>
          <li>Use the <q>Font size</q> browser setting to change the font size. The setting is in the <q>Appearance</q> category, which becomes visible after you click <q>Settings</q>. This setting may take effect immediately, but if not then it takes effect after you reload the page. Note that the text and only one of the images changes size; the other image remains unchanged.</li>
          <li>Restore your preferred font size and reload the page.</li>
          <li>Why did one image change size but not the other? Inspect both images with the developer tools. Note that each image has a style declaration setting its width, but the units differ. One image has a width defined in pixels, and the other has a width defined in <code>rem</code> (the <q>root</q> font size). When you change your preferred font size, you are changing <code>rem</code>, so the <code>rem</code>-dependent width changes, too, but not the width defined in pixels.</li>
          <li>If you can, view any web page in any browser on an iOS or Android device. Zoom in by using a <kbd>spread</kbd> gesture, and then zoom out by using a <kbd>pinch</kbd> gesture. Note that the zooming takes place <em>without</em> reflow.</li>
          <li>
            If you wish, explore other browsers&rsquo; and operating systems&rsquo; settings. They may include:
            <ol>
              <li><code>Open Menu:Zoom</code> in Firefox</li>
              <li><code>Open Menu:Options:Language and Appearance:Fonts &amp; Colors</code> in Firefox</li>
              <li><code>Customize and control Google Chrome:Zoom</code> in Chrome</li>
              <li><code>Customize and control Google Chrome:Settings:Appearance</code> in Chrome</li>
              <li><code>menu button:Settings:Accessibility</code> in Chrome for Android</li>
              <li><code>Safari:Preferences:Appearance</code> in Safari for OS X</li>
              <li><code>Apple menu:System Preferences:Displays:Scaled</code> on OS X</li>
              <li><code>Settings:Display &amp; Brightness:Text Size</code> on iOS</li>
              <li><code>Settings:General:Accessibility:Zoom</code> on iOS</li>
              <li><code>Settings:General:Accessibility:Larger Text</code> on iOS</li>
            </ol>
          </li>
        </ol>
      </section>
      <section id="how" class="section-quiz"></section>
      <section>
        <header>
          <h2>Letting users enlarge</h2>
        </header>
        <section>
          <header>
            <h3>Principles</h3>
          </header>
          <p>Today there is an emerging consensus that users have the right to manipulate sizes. Some UI designers still prefer to take size control away from users, but that idea has become less popular as the harm to accessibility has become understood. Utopia has some UIs that restrict users&rsquo; discretion on sizes, but they are being changed or phased out.</p>
          <p>The consensus is reflected in two of the Success Criteria of WCAG 2.1:</p>
          <ul>
            <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html">Success Criterion <i>1.4.4</i></a> says that <mark id="hint-04" class="hint covert">a UI should let the user double the text size without suffering a penalty. More specifically, a user who does this should lose no <q>content</q> or <q>functionality</q>.</mark></li>
            <li><a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html">Success Criterion <i>1.4.10</i></a> says that <mark id="hint-05" class="hint covert">a UI should let the user quadruple the content size (including both text and graphics) without suffering a penalty. In this case the user is to be protected from loss of <q>information</q>, loss of <q>functionality</q>, and a need to scroll more than just vertically.</mark></li>
          </ul>
          <p>Of course, <mark id="hint-06" class="hint covert">these criteria require that users may also increase sizes to <strong>less</strong> than 200% (for text) or 400% (for content) and still be protected.</mark></p>
          <p>Who, then, is responsible for conforming to these criteria? The creators of WCAG have expressed the opinion that <a href="https://www.w3.org/WAI/WCAG21/Understanding/reflow.html#intent">text reflow on zooming is the browser maker&rsquo;s responsibility, not the UI maker&rsquo;s</a>. The UI maker must make it <strong>possible</strong> for text to reflow when the user zooms in, but the browser must make the reflow actually happen.</p>
        </section>
        <section id="let" class="section-quiz"></section>
        <section>
          <header>
            <h3>Browser support</h3>
          </header>
          <p><mark id="hint-07" class="hint covert">Browsers for Windows, OS X, and Linux implement reflow, as these criteria require. When a user increases the font sizes or the scale of the entire view, the browser reflows</mark> the text so each line wraps before reaching the edge of the visible area.</p>
          <p><mark id="hint-08" class="hint covert">But most mobile browsers, those operating on iOS and Android, do not. Zooming in does not make the text reflow.</mark> Instead, the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Viewport_concepts"><q>layout viewport</q> expands beyond the <q>visual viewport</q></a>. The web page is as wide as the layout viewport, so only part of the page width is visible at any one time.</p>
        </section>
        <section id="browser" class="section-quiz"></section>
        <section>
          <header>
            <h3>Strategy</h3>
          </header>
          <p>Conforming to the above-mentioned guidelines is easy for delivery of UIs to computer browsers. To conform, simply don&rsquo;t complicate your code with restrictions on how items are positioned and sized. If you leave your text-containing elements&rsquo; styles free of any height or maximum-height declarations and allow items to move as preceding items become larger, the user can enlarge the text and this will expand text containers as needed. Otherwise, a text node could grow larger than its container&rsquo;s permitted size, or its container could collide with another item, making some of the text invisible or overlapping, or requiring the user to scroll in two dimensions.</p>
          <p>But <mark id="hint-09" class="hint covert">conforming for mobile browsers is not so easy. It requires compensating for the browsers&rsquo; failure to perform reflow.</mark></p>
          <p>So, an effective strategy on size customization is:</p>
          <ol>
            <li>Keep it simple: Do not insert into your CSS rulesets any height limits or fixed positions that might block the growth of preceding text containers. This will ensure benign behavior in <strong>non-mobile</strong> browsers.</li>
            <li><mark id="hint-10" class="hint covert">Decide whether to take responsibility for accessible size control in mobile browsers. You can conform to WCAG without adding a size feature, but if you choose to add one you will improve some users&rsquo; experiences on mobile browsers. If your (or your team&rsquo;s) decision is to take this responsibility, add a text-size or zoom control to the UI.</mark></li>
          </ol>
          <p>Utopia websites have adopted both of these strategies. Most do not offer any size controls, but some do, and the latter usually let the user control text size, rather than content size. Here are two examples:</p>
          <ul>
            <li>No size control: <a href="https://www.utopiainvestments.com.au/retail/ret/articles/insights/research-commentary/retirement-and-superannuation/plan-for-your-life.jsp" target="_blank">Utopia Australia retail retirement article</a></li>
            <li>On-page size control: <a href="https://institutional.utopia.com/VGApp/iip/site/institutional/researchcommentary/article/InvComVIPSGlobalFinCrisis" target="_blank">Utopia institutional investor research and commentary article</a></li>
          </ul>
          <p>A common size control, used on the second page, looks like this:</p>
          <figure>
            <img src="../../gen/static/size-control.png" alt="size control with label Text size and three letter-A icons, small, medium, and large">
            <figcaption>Text size control</figcaption>
          </figure>
        </section>
        <section id="strategy" class="section-quiz"></section>
        <section>
          <header>
            <h3>Text-Size controls</h3>
          </header>
          <p>If your strategy is to take responsibility for accessible size control, you may choose to let the user adjust only text sizes or entire content sizes. Utopia UIs have mostly chosen to offer only text-size controls, like the one on the above-cited financial institutional page.</p>
          <p>Perform these operations:</p>
          <ol>
            <li><mark id="hint-11" class="hint covert">Open the above-cited institutional page.</mark></li>
            <li>Note its text-size controls, rendered as three buttons labeled <q>A</q> in different sizes.</li>
            <li>Operate all three controls. Note that some text sizes change, but not all, and the photo of the author remains unchanged. Note also that, once you click any text-size button, it becomes inactive. So the controls offer a choice among three text-size levels.</li>
            <li><mark id="hint-12" class="hint covert">Use the <q>Font size</q> browser setting to change the font size to <q>Very large</q>, then operate the three text-size controls again.</mark></li>
            <li><mark id="hint-13" class="hint covert">Use the <q>Font size</q> browser setting to change the font size to <q>Very small</q>, then operate the three text-size controls again. Note that this time the text-size controls don&rsquo;t change anything.</mark></li>
            <li>If you can, open the same page in a mobile browser and operate the text-size control. Note that text sizes change with reflow. Trying zooming in and out with spread and pinch gestures, and note that zooming does not cause reflow.</li>
          </ol>
          <p>As you have seen, <mark id="hint-14" class="hint covert">UI controls, browser controls, and operating-system controls may interact, sometimes in surprising ways, to determine the sizes of items.</mark></p>
        </section>
        <section id="textcontrol" class="section-quiz"></section>
        <section>
          <header>
            <h3>Content-size controls</h3>
          </header>
          <p>You may achieve superior accessibility by offering content-size control instead of text-size control. Why?</p>
          <ul>
            <li>Users who need enlargement are likely to need more than just text enlarged.</li>
            <li>Enlarging some but not all of the items on a page sometimes produces confusing layouts.</li>
          </ul>
          <p>If you want to let the user enlarge both text and graphics together, with reflow on all devices, you can do so most easily with two tactics:</p>
          <ul>
            <li>Set the sizes of graphics in font-size units (<code>rem</code>) rather than in pixels, inches, or any other absolute lengths.</li>
            <li>Add font-size controls to your UI.</li>
          </ul>
          <p>Perform these operations:</p>
          <ol>
            <li>Open a <a href="../../gen/examples/zoom" target="_blank">size-customization example</a>.</li>
            <li>Use its content-size adjustment form at the top of the page. Make the content as large as possible and as small as possible.</li>
            <li>
              Do that again while also manipulating three other variables:
              <ul>
                <li>the font-size setting</li>
                <li>the browser zoom</li>
                <li>the width of the browser window</li>
              </ul>
            </li>
            <li>Note that the largest possible sizes in the narrowest possible window are impractical. However, users who need enlargement can still benefit from it if they use large monitors.</li>
            <li>Note that the text reflows as needed.</li>
            <li><mark id="hint-15" class="hint covert">Open the developer tools</mark> and select the <code>html</code> element in the <q>Elements</q> panel.</li>
            <li>Click the <q>+</q> and <q>&minus;</q> buttons and note in the <q>Styles</q> pane that the <code>html</code> element&rsquo;s <code>font-size</code> attribute changes to show the new value of <code>rem</code> (the root font size).</li>
            <li>Inspect the <code>img</code> element containing the graph. Note that its width is defined in <code>rem</code>. Click the <q>+</q> and <q>&minus;</q> buttons and note that the graph becomes wider and narrower, as in zooming, but its width in <code>rem</code> doesn&rsquo;t change. The buttons manipulate <code>rem</code>, so they change all sizes defined in <code>rem</code>, whether text or not.</li>
            <li>Select the <code>html</code> element again. Zoom in or out with the keyboard shortcuts. Note that the font size of the <code>html</code> element does not change. Browser zoom doesn&rsquo;t change element attributes; it changes the scale at which everything is rendered.</li>
          </ol>
        </section>
        <section id="contentcontrol" class="section-quiz"></section>
      </section>
    </main>
  </body>
</html>

==> mod/space/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The spacing of content on Utopia UIs has an impact on accessibility. Tightly spaced items can make it more difficult to read text and click or tap targets, such as links and buttons.</p>
      </section>
      <section>
        <header>
          <h2>Paragraphs and lines</h2>
        </header>
        <p>If you put paragraphs of text into a UI and both you and the user let the browser decide how to space them, they will look (at least in Chrome) like the text on <a href="../../gen/examples/spacingtextplain.html" target="_blank">an example of a page with default spacing</a>. The lines have no extra vertical space (leading) between them, and paragraphs are separated by a blank line.</p>
        <p>Some users find this spacing too tight and implement methods for overriding the browser&rsquo;s spacing. They may, for example, increase the line height from 1 to 1.5 and the between-paragraph margins to 1.5 lines, resulting in text like that on <a href="../../gen/examples/spacingtextstretched.html" target="_blank">an example of a page with additional leading</a>.</p>
        <p>Users sometimes make text more legible by increasing the horizontal spacing, too: between characters and between words.</p>
        <p>An accessible UI doesn&rsquo;t prevent users from increasing the spacing. For example, it doesn&rsquo;t impose limits on the total sizes of sections of text that would make some of the text invisible or overlapping when a user expands spacing.</p>
        <p><a href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html">WCAG 2.1 Success Criterion <i>1.4.12</i></a> sets forth some minimum amounts of user-initiated space expansion that a UI should permit. If you simply don&rsquo;t impose any size limits, you will automatically conform to this guideline.</p>
        <p>Some Utopia UIs leave it to users to expand spacing. But browsers make this difficult to do. So, in order to provide accessibility with less effort, some Utopia UIs space paragraphs and lines farther apart by default.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>Open the <a href="https://retirementplans.utopia.com/VGApp/pe/edu/catalog/how-do-i-handle-financial-emergencies/1" target="_blank">Create an emergency fund</a> lesson.</li>
          <li>Use the developer tools to inspect the <q>Your best strategy &hellip;</q> paragraph.</li>
          <li>In particular, review the content of the <q>Styles</q> pane of the <q>Elements</q> panel.</li>
          <li>Find the ruleset for <code>p</code> elements. Note that it contains one declaration, defining the bottom margin as 18 pixels. The paragraph is a <code>p</code> element, so this declaration applies to it.</li>
          <li>Temporarily overrule that declaration by clearing its checkbox, and watch what happens to the paragraph. The space under it, separating it from the next paragraph, disappears.</li>
          <li>Check the checkbox again and see the space get restored.</li>
          <li>Note that the lines of the paragraph are farther apart than single-spaced, making them easier to read.</li>
          <li><mark id="hint-00" class="hint covert">Look for the <code>line-height</code> declaration that applies to the paragraph.</mark> Note that it defines the line height as 21 pixels, which is 1.5 times the font size (14 pixels).</li>
          <li>As an experiment, try to eliminate the extra spacing by clearing the <code>line-height: 21px</code> checkbox. Note that the extra spacing <em>does not</em> change.</li>
          <li>Multiple style rulesets can apply to the same element. When they do, there are rules that decide which rulesets take precedence. In this case, near the bottom of the <q>Styles</q> pane is another ruleset applying to <code>html body</code> (and everything inside it, including that paragraph). It was overridden by the one you disabled (as shown by the strikethrough font decoration). But you made it active. So now clear its checkbox. Note that this time the extra space disappears.</li>
        </ol>
      </section>
      <section id="paraline" class="section-quiz"></section>
      <section>
        <header>
          <h2>Controls</h2>
        </header>
        <p>When you give users sets of radio buttons, checkboxes, buttons, or other <a href="../form">form controls</a>, most users will choose them with a mouse if their devices have one, or by tapping with a finger if their devices are touch devices. To protect users from clicking or tapping the wrong control, accessible UIs space them apart.</p>
        <p>How far apart? One guideline is <a href="https://blogs.msdn.microsoft.com/ie/2012/04/20/guidelines-for-building-touch-friendly-sites/">Microsoft&rsquo;s recommendation</a> to leave at least 10 pixels of space between every pair of adjacent targets.</p>
        <p>Perform the following operations:</p>
        <ol>
          <li><mark id="hint-01" class="hint covert">Visit Utopia&rsquo;s new-account funding form</mark> at <a href="https://apps.utopia.com/web/cf/move-money/funding-method" target="_blank"><code>https://apps.utopia.com/web/cf/move-money/funding-method</code></a>.</li>
          <li>The form gives the user a choice among ways to find a new account. As of the date of this module, there are three alternatives, and the user chooses one by selecting one of three radio buttons. Use the developer tools to inspect the middle (<q>Rollover</q>) button. <mark id="hint-02" class="hint covert">Find the declaration(s) determining how far apart the radio buttons are. Both top and bottom <code>margin</code> attributes and <code>padding</code> attributes separate them vertically.</mark></li>
          <li>Clear the checkboxes of one or more of the <code>margin</code> or <code>padding</code> declarations. Note that the buttons temporarily move closer together.</li>
          <li>Close the developer tools.</li>
          <li>Check the first radio button and click <q>Continue</q> on the new-account funding form.</li>
          <li>On the next page, click <q>Continue</q>.</li>
          <li>On the next page, click <q>CONTINUE</q>.</li>
          <li>Note that <mark id="hint-03" class="hint covert">the next page (<q>Tell us about you</q>) contains 3 radio buttons</mark> with less space between them. Thus, spacing between inputs is not always consistent, and sometimes there are opportunities to enhance accessibility by adding space between controls.</li>
        </ol>
      </section>
      <section id="input" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/srtest/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script defer src="../../gen/homeData.js"></script>
    <script defer src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Screen readers help users who cannot see user interfaces easily or at all, either because of personal disabilities or because of poor lighting, motion, small device sizes, or other conditions. In addition, screen readers help users who can see well but have trouble reading text and interpreting visual layouts, because of dyslexia and other conditions.</p>
        <p>Screen readers are powerful applications and do much more than read text out loud. They also parse UIs and make their structures and relationships available to users on request. A user can, for example, ask a screen reader to read aloud, or navigate among, the headings on a web page, or read aloud the titles of the lists or tables. If a user selects a radio button, a screen reader can tell the user how many radio buttons there are in the group that it belongs to.</p>
      </section>
      <section>
        <header>
          <h2>Testing with screen readers</h2>
        </header>
        <section>
          <header>
            <h3>What to test with</h3>
          </header>
          <p><mark id="hint-00" class="hint covert">Developers at Utopia have access to these screen readers for testing, either built into operating systems or as applications:</mark></p>
          <ul>
            <li>Narrator (built into Windows)</li>
            <li>NVDA (for Windows)</li>
            <li>JAWS (for Windows)</li>
            <li>VoiceOver (built into OS X)</li>
            <li>VoiceOver (built into iOS)</li>
            <li>TalkBack (built into Android)</li>
          </ul>
          <p>The user experience on websites can vary among screen readers, and for each screen reader can also vary among browsers. Browsers available for testing at Utopia include:</p>
          <ul>
            <li>Internet Explorer (built into Windows)</li>
            <li>Chrome (for Windows)</li>
            <li>Firefox (for Windows)</li>
            <li>Safari (built into OS X)</li>
            <li>Chrome (for OS X)</li>
            <li>Firefox (for OS X)</li>
            <li>Safari (built into iOS)</li>
            <li>Chrome (for iOS)</li>
            <li>Firefox (for iOS)</li>
            <li>Chrome (built into Android)</li>
            <li>Firefox (for Android)</li>
          </ul>
          <p>To obtain some of the above devices, browsers, and screen readers for testing, you may need to submit <a href="https://utopia.service-now.com/utopia/?id=utopia_category&sys_id=Tech%20Central%20Services">Computer Hardware, Desktop Software, or Non-Standard Mobile Device requests</a> or borrow devices from the following departments that make them available for testing:</p>
          <ul>
            <li>Center for Analytics and Insight</li>
            <li>Retail Investor Group</li>
          </ul>
          <p>When choosing which combination(s) of a screen reader and a browser to test with, you can consider which of them you already have access to. If you have access to multiple combinations, you can also consider the most popular combinations, which are:</p>
          <ul>
            <li>Windows: NVDA with Firefox, JAWS with Internet Explorer</li>
            <li>OS X: VoiceOver with Safari</li>
            <li>iOS: VoiceOver with Safari</li>
            <li>Android: TalkBack with Chrome</li>
          </ul>
          <p>Testing with at least one screen reader and at least one browser gives you much more insight than not doing any such testing. For additional insight, it can be most effective to test with a screen reader on both a computer and a mobile operating system.</p>
        </section>
        <section id="whatsr" class="section-quiz"></section>
        <section>
          <header>
            <h3>A first test</h3>
          </header>
          <p>Just for training (and contrary to normal practice), let us begin with an interface that has <strong>not</strong> passed all automated tests. Perform these operations:</p>
          <ol>
            <li>Open an example of a <a href="../../gen/examples/image" target="_blank">page with an inaccessible image</a>.</li>
            <li>
              Test the accessibility of the page with axe, configuring its rules to include the WCAG 2.1 Level AA ruleset and also to test best practices. Note that it reports three issues:
              <ul>
                <li>a gap in heading levels</li>
                <li>the absence of a <code>main</code> element</li>
                <li>the existence of some content that is not in any <a href="https://www.w3.org/TR/wai-aria-1.1/#landmark">landmark</a> (including a <code>main</code> element)</li>
              </ul>
            </li>
          </ol>
          <p>But there are two more accessibility problems not detected by axe. To see them, perform these operations:</p>
          <ol>
            <li>Inspect the image with the developer tools. Note that it has an <code>alt</code> attribute, with an empty value. Is there information in the image? Yes. Review the text below the image. Does that text reproduce all the facts stated in the image? Some, but not all. Assistive technologies need to get the rest of the information from the <code>alt</code> attribute, but the information isn&rsquo;t there.</li>
            <li>Inspect the <q>Sources</q> note with the developer tools. Note that it is an <code>h6</code> element. But <code>h6</code> is a heading element. This content is not a heading.</li>
          </ol>
          <p>Imagine that you had failed to discover these five accessibility issues. Would testing the image example page with a screen reader reveal any of them? To find out, perform these operations:</p>
          <ol>
            <li>
              Turn on a screen reader.
              <ul>
                <li>Narrator: press <kbd>CTL</kbd>-<kbd>WIN</kbd>-<kbd>ENTER</kbd>.</li>
                <li>NVDA: Launch the application and click <q>OK</q>.</li>
                <li>JAWS: Launch the application.</li>
                <li>VoiceOver on OS X: press <kbd>CMD</kbd>-<kbd>F5</kbd>.</li>
              </ul>
            </li>
            <li>Click the image example page to make it the active window, if it isn&rsquo;t already.</li>
            <li>Reload the page.</li>
            <li>Note the following if you are testing with JAWS and your keyboard layout is not ENG INTL: JAWS uses the ENG INTL layout, regardless of the layout currently in effect.</li>
            <li>
              Ask the screen reader to go to the top of the page:
              <ul>
                <li>Narrator: press <kbd>&leftarrow;</kbd> until Narrator announces <q>No previous item</q>.</li>
                <li>NVDA: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>JAWS: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>VoiceOver: press <kbd>CAPSLOCK</kbd>-<kbd>h</kbd>.</li>
              </ul>
            </li>
            <li>
              <mark id="hint-01" class="hint covert">Ask the screen reader to go to the next heading:</mark>
              <ul>
                <li>Narrator: impossible with Chrome.</li>
                <li>NVDA: press <kbd>h</kbd>.</li>
                <li>JAWS: press <kbd>h</kbd>.</li>
                <li>VoiceOver: press <kbd>CAPSLOCK</kbd>-<kbd>h</kbd>.</li>
              </ul>
            </li>
            <li><mark id="hint-02" class="hint covert">Repeat. Note how the <code>h6</code> element is announced.</mark></li>
            <li>
              Ask the screen reader to go to the top of the window:
              <ul>
                <li>Narrator: already done.</li>
                <li>NVDA: press <kbd>HOME</kbd>.</li>
                <li>JAWS: press <kbd>CTL</kbd>-<kbd>HOME</kbd>.</li>
                <li>VoiceOver: press <kbd>CTL</kbd>-<kbd>OPT</kbd>-<kbd>HOME</kbd>.</li>
              </ul>
            </li>
            <li>
              Ask the screen reader to announce the next and previous landmarks (also called <q>regions</q>) on the page:
              <ul>
                <li>Narrator: impossible with Chrome.</li>
                <li>NVDA: Press <kbd>d</kbd> and <kbd>SHIFT</kbd>-<kbd>d</kbd>.</li>
                <li>JAWS: Press <kbd>r</kbd> and <kbd>SHIFT</kbd>-<kbd>r</kbd>.</li>
                <li>VoiceOver: impossible.</li>
              </ul>
              Note that the screen reader finds no landmark.
            </li>
            <li>
              Ask the screen reader to announce the next paragraph or heading on the page:
              <ul>
                <li>Narrator: Press <kbd>CAPSLOCK</kbd>-<kbd>&rightarrow;</kbd>.</li>
                <li>NVDA: Press <kbd>CTL</kbd>-<kbd>&downarrow;</kbd>.</li>
                <li>JAWS: Press <kbd>p</kbd>.</li>
                <li>VoiceOver: Press <kbd>CTL</kbd>-<kbd>OPT</kbd>-<kbd>&rightarrow;</kbd>.</li>
              </ul>
            </li>
            <li>Repeat until you have passed the image. Note that the screen reader (except Narrator) ignores the image, which is correct, because an empty <code>alt</code> attribute means that the image is unnecessary for assistive technologies.</li>
          </ol>
          <p>If you had not previously discovered the five accessibility issues listed above, testing with a screen reader would have revealed them. But this method would have been relatively inefficient.</p>
          <p><mark id="hint-03" class="hint covert">This testing with a screen reader might have revealed a new accessibility issue otherwise not discoverable. In this case, that did not happen. When it does, most often the problem is a failure of the screen reader to support the applicable standards. For that reason, testing with screen readers is particularly valuable if you intend to make your UI compensate for such defects.</mark> In that case, it will be essential to test with more than one combination of screen reader and browser, because correcting a fault in one combination could create a fault in another.</p>
        </section>
        <section id="first" class="section-quiz"></section>
        <section>
          <header>
            <h3>Corrections</h3>
          </header>
          <p>In the <q>Elements</q> panel of the developer tools, temporarily correct the accessibility defects noted above, specifically:</p>
          <ol>
            <li>Insert a <code>main</code> element between the <code>body</code> element and all of its content.</li>
            <li>Change the <code>h6</code> element to a <code>p</code> element.</li>
            <li>Give the <code>alt</code> attribute of the <code>img</code> element a value that provides all of the information in the image.</li>
            <li>Commit these temporary corrections by clicking anywhere else in the <q>Elements</q> panel.</li>
          </ol>
        </section>
        <section>
          <header>
            <h3>Retest</h3>
          </header>
          <p>Perform these operations:</p>
          <ol>
            <li>Conduct the same tests with a screen reader as above, but do not reload the page. Reloading would delete your changes.</li>
            <li>Note that the screen reader (except Narrator) recognizes the <code>main</code> landmark.</li>
            <li>Note that the screen reader (except Narrator) recognizes only an <code>h1</code> and an <code>h2</code> heading.</li>
            <li>Note that the screen reader now recognizes the image and announces it with the accessible name you gave it. (<mark id="hint-04" class="hint covert">Narrator treats the <q>Sources</q> text as part of the image&rsquo;s accessible name.</mark>)</li>
            <li>
              Turn off the screen reader:
              <ul>
                <li>Narrator: press <kbd>CTL</kbd>-<kbd>WIN</kbd>-<kbd>ENTER</kbd>.</li>
                <li>NVDA: Open the hidden icons near the bottom of the taskbar and click the NVDA icon. Choose <q>Exit</q> in the menu. Confirm with <q>OK</q>.</li>
                <li>JAWS: Hover over the JAWS icon in the taskbar and click the close button in the popup window thumbnail. Confirm with <q>OK</q>.</li>
                <li>VoiceOver: press <kbd>CMD</kbd>-<kbd>F5</kbd>.</li>
              </ul>
            </li>
          </ol>
        </section>
        <section>
          <header>
            <h3>Testing more complex pages</h3>
          </header>
          <p>This section has given you practice with only a small fraction of the features of screen readers. To test pages with forms, tables, streaming media, embedding, or other features, you will need to study and follow screen-reader documentation. In addition to built-in documentation offered by their help options, there is manufacturer and third-party documentation, but it is not always accurate, up-to-date, and applicable to all browsers, so you will probably need to experiment. Deque, a Utopia contractor, offers a <a href="https://dequeuniversity.com/screenreaders/">set of guides to the keyboard shortcuts of several screen readers</a>. The Utah State University Center for Persons with Disabilities also publishes a <a href="https://webaim.org/articles/screenreader_testing/">guide to screen-reader testing</a>, with links to its documentation on JAWS, NVDA, and VoiceOver.</p>
        </section>
        <section id="retest" class="section-quiz"></section>
      </section>
    </main>
  </body>
</html>

==> mod/stake/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Values</h2>
        </header>
        <section>
          <header>
            <h3>Client success</h3>
          </header>
          <p>Utopia has a core purpose: <q>To take a stand for all investors, to treat them fairly, and to give them the best chance for investment success</q>.</p>
          <p>We interact with investors mainly through UIs. Our UIs give millions of investors complex financial data and help them make life-changing financial decisions. This can be difficult not only for clients with limited financial or digital literacy, but also for all other investors. Accessible UIs can favorably impact the success of <mark id="hint-00" class="hint covert">current and potential clients</mark> and thus serve our core purpose.</p>
          <p>From these facts has emerged <mark id="hint-01" class="hint covert"><q>Our commitment to accessibility at Utopia: We work to ensure that all investors can access our products and services to help them reach their financial goals.</q></mark> Utopia Group, <cite><a href="https://about.utopia.com/accessibility/accessibility.html"><q>Our commitment to accessibility at Utopia</q></a></cite>.
          </p>
        </section>
        <section id="client" class="section-quiz"></section>
        <section>
          <header>
            <h3>Crew inclusion</h3>
          </header>
        </section>
        <p>Utopia has also <a href="http://crewnet.utopia.com/aboutus/ourcrew/diversity/we_stand_for.html">declared its commitment to crew diversity and inclusion</a>. This implies making its <mark id="hint-02" class="hint covert">internal UIs accessible, so crew across a wide spectrum of capabilities can use them effectively</mark>.</p>
        <p>Utopia&rsquo;s <a href="http://crewnet.utopia.com/crewcentral/accomm_policy.html?from=all_crewnet&searchQuery=accommodation&searchIndex=1;accomm_policy.html">Accommodation Policy</a> implements the enterprise&rsquo;s obligation to make reasonable arrangements so that crew members with various abilities and disabilities can work effectively. Accessible crew-facing UIs support that policy by helping crew members with disabilities be productive <strong>without</strong> the need for individual accommodations.</p>
      </section>
      <section id="crew" class="section-quiz"></section>
      <section>
        <header>
          <h2>Market share</h2>
        </header>
        <p><a href="https://www.who.int/en/news-room/fact-sheets/detail/disability-and-health">About 15% of the world population have disabilities</a>, and some research estimates the fraction as 20%. Accessible UIs help Utopia attract a large market share that might otherwise be out of reach.</p>
        <p>The world population is aging, and <a href="https://www.w3.org/WAI/older-users/literature/">with advancing age many abilities (including vision, hearing, memory, and motor control) become diminished</a>. The elderly market segment is a critically important one for Utopia, so accessible UIs are more important for us than for companies targeting mostly younger consumers.</p>
        <p>As this graph shows, half of Utopia&rsquo;s clients are 50 and older; 25% are 60 and older; and 10% are 70 and older. Moreover, computers in the home didn&rsquo;t even exist when they were children.</p>
        <p class="exhibit"><img src="../../gen/static/client-ages.png" alt="graph of age distribution of Utopia clients, October 2018; 13% 0&ndash;30, 30% 0&ndash;40, 50% 0&ndash;50, 75% 0&ndash;60, 90% 0&ndash;70, 97% 0&ndash;80, 99% 0&ndash;90"></p>
        <p>The average level of financial literacy among investors is only moderate. The <a href="http://www.usfinancialcapability.org/downloads/NFCS_2015_Inv_Survey_Full_Report.pdf">latest Investor Survey of the FINRA Foundation</a> reveals that in the U.S. <q>majorities understand the relationship between risk and return, and are able to correctly define stocks and bonds</q>, but <q>very few understand concepts such as buying on margin, selling short, and the difference between nominal and real returns.</q> UIs that serve a large share of the investor market must assume only limited knowledge of financial concepts and terms.</p>
      </section>
      <section id="age" class="section-quiz"></section>
      <section>
        <header>
          <h2>Profit</h2>
        </header>
        <p>Utopia aims to be profitable for its client owners. Accessibility can boost our profits by:</p>
        <ul>
          <li>gaining market share (see above)</li>
          <li>enhancing our public reputation</li>
          <li>enabling clients to complete more transactions</li>
          <li><mark id="hint-03" class="hint covert">decreasing clients&rsquo; need to seek help from our call centers</mark></li>
          <li>increasing client satisfaction and loyalty</li>
          <li><mark id="hint-04" class="hint covert">making crew more productive</mark></li>
          <li>helping us recruit and attract talent</li>
        </ul>
      </section>
      <section id="profit" class="section-quiz"></section>
      <section>
        <header>
          <h2>Risk management</h2>
        </header>
        <p>Utopia is vigilant in managing risk: investment risk, security risk, physical risk, reputational risk, regulatory risk, and liability risk.</p>
        <p><mark id="hint-05" class="hint covert">Accessibility helps us manage at least reputational, regulatory, and liability risks</mark>:</p>
        <ul>
          <li>Reputational: Offending or discriminating against customers with disabilities can produce adverse publicity and negative public opinions.</li>
          <li>Regulatory: Financial service companies, including banks, credit unions, and investment firms, have been sued or warned of impending litigation or enforcement actions over UI accessibility. <a href="https://accessibilityswitchboard.org/sued">Making and keeping UIs accessible is the most important protection from successful accessibility claims.</a></li>
          <li>Liability: More accessible UIs help ensure that users understand and intend the transactions they perform. This decreases our risk of liability for user error.</li>
        </ul>
      </section>
      <section id="risk" class="section-quiz"></section>
      <section>
        <header>
          <h2>Quality</h2>
        </header>
        <p>Most professionals, including UI developers, care about doing quality work. Accessible software is, generally, quality software. When you code accessibly, your code tends to be more:</p>
        <ul>
          <li>clear</li>
          <li>coherent</li>
          <li>consistent</li>
          <li>parsimonious</li>
          <li>standard-compliant</li>
          <li>future-compatible</li>
          <li><mark id="hint-06" class="hint covert">maintainable</mark></li>
          <li>efficient</li>
          <li>performant</li>
          <li>free of technical debt</li>
          <li><mark id="hint-07" class="hint covert">search-engine-optimized</mark></li>
        </ul>
        <p><mark id="hint-08" class="hint covert">Code that exhibits best practices and complies with accepted standards achieves much accessibility</mark> without extra effort.</p>
      </section>
      <section id="quality" class="section-quiz"></section>
      <section>
        <header>
          <h2>Summing it up</h2>
        </header>
        <p>Utopia leaders and experts have explained how accessibility helps Utopia help its investors, including those who need a little extra help, in a <a href="http://corpsp.utopia.com/pnd/mc/Accessibility/SiteAssets/3892_Accessibility_v9.mp4" target="_blank">5-minute video</a>.</p>
      </section>
      <section id="screenreader" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/success/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Milestones</h2>
        </header>
        <p>Explicit efforts to improve the accessibility of Utopia UIs began about 2010, and Utopia founded an Accessibility Unit in 2016. Since then, accessibility improvements have been made in roughly this order:</p>
        <ul>
          <li><mark id="hint-00" class="hint covert">High-traffic external web pages</mark></li>
          <li>VUI components</li>
          <li>non-web channels (telephone, email, etc.)</li>
          <li>mobile apps</li>
          <li>PDF documents</li>
          <li><mark id="hint-01" class="hint covert">crew-facing UIs (StaffNet etc.)</mark></li>
          <li>procured software</li>
        </ul>
        <p>Work continues to:</p>
        <ul>
          <li>audit and report accessibility more systematically</li>
          <li>include more users with disabilities in user testing</li>
          <li>make accessibility training more modular and self-service (this course, for example!)</li>
        </ul>
      </section>
      <section id="milestones" class="section-quiz"></section>
      <section>
        <header>
          <h2>Improvements</h2>
        </header>
        <p>All this work has made Utopia&rsquo;s public-facing websites more accessible. <mark id="hint-02" class="hint covert">This graph shows the number of issues (i.e. defects) according to the <a href="https://www.npmjs.com/package/axe-core">axe-core rules</a> on Utopia&rsquo;s public home page from 1997 to 2019.</mark></p>
        <p class="exhibit"><img src="../../gen/static/progress.png" alt="graph of accessibility issues on the Utopia home page every 2 years from 1997: 63, 10, 20, 7, 6, 5, 6, 20, 3, 16, 18, 1"></p>
        <p>Source: <a href="https://archive.org">Internet Archive</a></p>
        <p>Note that the progress has been erratic, because new features have sometimes been introduced and only later been made accessible.</p>
      </section>
      <section id="progress" class="section-quiz"></section>
      <section>
        <header>
          <h2>Competitive success</h2>
        </header>
        <p>Utopia&rsquo;s efforts have made it an industry leader in accessibility. This graph shows the same test result for the home pages of 12 of the largest financial asset managers in January 2019:</p>
        <p class="exhibit"><img src="../../gen/static/versus.png" alt="graph of accessibility issues on the Utopia home page compared with competitors: Utopia 1, PIMCO 11, BNY Mellon 14, T. Rowe Price 14, UBS 40, PNC 48, BlackRock 56, Schwab 59, J.P. Morgan 66, State Street 79, Allianz 80, Fidelity 110"></p>
        <p><mark id="hint-03" class="hint covert">The issue counts range from 1, for Utopia, to 110, for Fidelity.</mark></p>
        <p>This is only one statistic, and Utopia&rsquo;s leadership could change over time, but as a UI developer at Utopia you can build on success, while some other companies are just getting started.</p>
      </section>
      <section id="competition" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/table/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>A <dfn>table</dfn> is a presentation of data in rows and columns. Where a row and a column intersect, you have a <dfn>cell</dfn>, containing a single datum. Utopia&rsquo;s UIs often organize information into tables. Examples: <a href="https://advisors.utopia.com/investments/mutual-funds" target="_blank">tables of funds</a> and <a href="https://investor.utopia.com/mutual-funds/profile/portfolio/3326?FundIntExt=EXT" target="_blank">tables of data about a particular fund</a>.</p>
        <p>Tables can be challenging for everybody&mdash;not only people with disabilities&mdash;to understand. Making tables accessible can contribute to good experiences for many users.</p>
      </section>
      <section>
        <header>
          <h2>Tables, graphs, and forms</h2>
        </header>
        <p>One principle of accessibility is <a href="https://www.w3.org/TR/WCAG21/#perceivable">providing perceivable ways to consume information</a>, but what is perceivable varies across our diverse user base. So accessibility is enhanced when you present structured data in multiple ways. Options include:</p>
        <ul>
          <li>tables</li>
          <li>graphs</li>
          <li>prose descriptions</li>
          <li>forms for submitting questions and getting answers</li>
        </ul>
        <p>When the amount of information is large, rendering it as a table may overwhelm users. Then other kinds of presentation, and/or breaking the table into smaller tables, may improve accessibility.</p>
        <p><mark id="hint-00" class="hint covert">Graphs are difficult or impossible to consume when users cannot see the interface. Accessibility requires graphs to be accompanied by other mechanisms in the list above, such as tables, so assistive technologies can render the information.</mark></p>
      </section>
      <section id="alternatives" class="section-quiz"></section>
      <section>
        <header>
          <h2>Tables and layouts</h2>
        </header>
        <section>
          <header>
            <h3>When to use a table</h3>
          </header>
          <p>HTML contains a <code>table</code> element. Experts offer various recommendations on how (and whether) to use it. A common recommendation is to use the <code>table</code> element to organize data, but not to organize the items on a page.</p>
          <p>Following that advice is not always easy, because:</p>
          <ul>
            <li>It is sometimes not obvious whether items are <q>data</q>.</li>
            <li>The <code>table</code> element has powerful features that are sometimes valuable for organizing things that you would not think of as <q>data</q>.</li>
          </ul>
          <p>The main alternative to the <code>table</code> element for organizing items into rows and columns is the <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids"><code>grid</code> value of the CSS <code>display</code> property</a>. When choosing between these two mechanisms, the most important questions to ask are:</p>
          <ul>
            <li>Is there something in common among all the items in a row, and among all the items in a column?</li>
            <li>Are there cells containing labels describing the common attributes of the items in each column, and/or the items in each row? (Such a cell is called a <dfn>header</dfn>.)</li>
          </ul>
          <p>If you answer these questions with <q>Yes</q>, then the <code>table</code> element will work better than the <code>display: grid</code> mechanism. The <code>table</code> element has built-in support for semantic relationships among headers and ordinary table cells, but the <code>display: grid</code> mechanism does not. Making such relationships explicit in your code fulfills WCAG Success Criterion <i>1.3.1</i>, which says that the structure and relationships in your interface should be formally expressed in code.</p>
          <p>The typical logic in a table provides that the items in any row are facts about some entity (e.g., a fund or a transaction), and the items in any column are the answers to a single question about multiple entities. <mark id="hint-01" class="hint covert">Each column header asks a question (e.g., <q>What is the price?</q>), and each row header names an entity (e.g., a particular fund).</mark></p>
          <p>Items arranged with the <code>display: grid</code> mechanism, by contrast, are not intrinsically related. Think of the two-dimensional array of app icons on the StaffNet home page, for example. The icons in any row or in any column have nothing in common. So a <code>table</code> element would not be the right mechanism to arrange them.</p>
        </section>
        <section id="when" class="section-quiz"></section>
        <section>
          <header>
            <h3>Avoiding rows and columns</h3>
          </header>
          <p>It is often best for accessibility to use <strong>neither</strong> of these mechanisms. That is because they both interfere with responsiveness to various device shapes and sizes. <mark id="hint-02" class="hint covert">Other mechanisms, such as the CSS <code>flexbox</code> model and CSS media queries, can automatically respond to different browser window widths by varying the numbers of items in a row.</mark></p>
          <p>An example of that decision is the <a href="https://investor.utopia.com/ira/roth-vs-traditional-ira" target="_blank">Utopia page comparing Roth and traditional IRAs</a>.</p>
          <p>Perform these operations:</p>
          <ol>
            <li>Open that page. Note that it contains items that can be interpreted as column headers, row headers, and cells.</li>
            <li>Inspect the sentence <q>What are the contribution limits?</q>, in the section on <q>IRA contribution rules</q>, with the developer tools.</li>
            <li>Note that the sentence is in an <code>h3</code> heading, which is not inside a <code>table</code> element.</li>
            <li>Look for the <code>display</code> declaration for that <code>h3</code> element in the <q>Styles</q> pane. Note that the value of <code>display</code> is <code>block</code> for that element, and also for the elements containing it.</li>
            <li>Thus, the creator of this page chose to use neither the HTML <code>table</code> element nor the CSS <code>display: grid</code> mechanism to arrange this information.</li>
            <li>Narrow the browser window as much as you can. Note that <mark id="hint-03" class="hint covert">the 3 columns of what might have been a table or grid are no longer 3 columns side-by-side, so you don&rsquo;t need to scroll horizontally in order to read the content. A different mechanism (CSS media queries) performs this adaptation.</mark></li>
          </ol>
        </section>
        <section id="avoid" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Table organization</h2>
        </header>
        <p>A table is not merely a collection of rows and columns. In HTML5, it has several parts:</p>
        <ul>
          <li><code>caption</code>: the table&rsquo;s title</li>
          <li><code>colgroup</code>: an enumeration of columns and column groups</li>
          <li>&vellip;</li>
          <li><code>colgroup</code></li>
          <li><code>thead</code>: the header row(s)</li>
          <li><code>tbody</code>: a group of rows in the main content</li>
          <li>&vellip;</li>
          <li><code>tbody</code></li>
          <li>
            <code>tfoot</code>: rows of any summary data and/or footnotes
          </li>
        </ul>
        <p>If you wish to give all cells in particular columns the same border, background, or minimum width, you can do that by applying the style to a <code>col</code> element inside a <code>colgroup</code> element, instead of to each cell.</p>
        <p>If the table contains numbers and at the bottom totals or averages, a <code>tfoot</code> element is the place for those.</p>
        <p>Perform these operations:</p>
        <ul>
          <li>Open an <a href="../../gen/examples/table/simple-a.html" target="_blank">example of an accessible table</a>. You can drag it to a separate window to allow reading these instructions while working on it.</li>
          <li>Note the parts of the table. There are a title, a row of headers, a body containing 4 rows of fund data, a row containing the column averages, and a footnote.</li>
          <li><mark id="hint-04" class="hint covert">The footnote looks as if it is not part of the table, but it is actually inside the table&rsquo;s footer, occupying the row below the row of averages.</mark> This creates a semantic connection between the footnote and the rest of the table. The footnote is not merely under the table, but part of it, so the date is the date on which the <strong>table</strong> was last updated, not the date on which the <strong>page</strong> was last updated.</li>
          <li>Open the developer tools.</li>
          <li><mark id="hint-05" class="hint covert">In the <q>Elements</q> panel, note how the table is coded to partition it into parts.</mark></li>
          <li>Note that after the caption there are two <code>colgroup</code> elements. Note how they are coded to show which columns they include. Note that the third column is the first <code>col</code> element in the second <code>colgroup</code> element.</li>
          <li>Note that the <code>col</code> element for the third column has the class <code>important</code>. In the &ldquo;Sources&rdquo; panel, open <code>style.css</code> and find a ruleset for the <code>important</code> class. Note its <code>background-color</code> declaration. That explains the distinct color of that column.</li>
        </ul>
      </section>
      <section id="org" class="section-quiz"></section>
      <section>
        <header>
          <h2>Headers</h2>
        </header>
        <p>The <code>thead</code> element of a table contains a row, or more than one row, of headers. Typically, they are column headers. They ask the questions that the values in the cells below them answer.</p>
        <p>There may also be row headers, typically identifying the entities described in their rows.</p>
        <p>For example, in the example of an accessible table, <q>Price</q> is a column header and <q>VGWIX</q> is a row header.</p>
        <p>There is no element, such as <code>thead</code>, for row headers; they are just cells in the rows that they are headers of. But both row headers and column headers are marked as headers by being <code>th</code> elements, while ordinary cells (and also unused cells, such as we sometimes find in the upper-left corner of a table) are <code>td</code> elements.</p>
        <p>How do browsers and assistive technologies figure out which headers belong to which cells? There is a complex <a href="https://html.spec.whatwg.org/multipage/tables.html#header-and-data-cell-semantics">algorithm for that</a>. In a simple table like this, the algorithm guesses right. As <a href="https://www.powermapper.com/blog/table-headers-and-scope/">Mark Rogers explains</a>, browsers and assistive technologies use various methods for inferring header&ndash;cell relationships.</p>
        <p>Assistive technologies tell users about the headers of cells that users navigate to. For example, if a user with a screen reader is moving along the VGWAX row and arrives at the $25.37 cell, the screen reader announces <q>Price $25.37</q>, not only <q>$25.37</q>. Then, if the user drops to the $20.29 cell, the screen reader announces <q>VGWLX $20.29</q>.</p>
        <p>Perform these operations:</p>
        <ul>
          <li>Examine the coding of the headers in the above example of an accessible table. Note that they are <code>th</code> elements.</li>
          <li>Examine the coding of the non-header cells. Note that they are <code>td</code> elements.</li>
          <li>Find the <code>table</code> element and select it.</li>
          <li>Open the <q>Accessibility</q> pane. <mark id="hint-06" class="hint covert">Note how the <code>table</code> element is described in the Accessibility Tree. The tree shows the table&rsquo;s caption and all its rows. For each row, it shows all the cells and classifies their roles as <code>gridcell</code>, <code>rowheader</code>, or <code>columnheader</code>.</mark></li>
          <li>Hover over a cell in the tree. Note that the cell on the web page becomes highlighted.</li>
          <li>Click on a cell in the tree. Note that the tree display jumps to the node for that cell in the tree.</li>
          <li>Open a <a href="../../gen/examples/table/simple-b.html" target="_blank">revised version of the same example</a>. Note that in this version the names, not the ticker symbols, are the row headers. This change could make the table easier to understand for users of assistive technologies.</li>
          <li>Examine the description of the <code>table</code> element in the Accessibility Tree. Note that the new row headers are correctly recognized as haing the role <code>rowheader</code>. So they don&rsquo;t need to be in the first column, as long as they are coded as <code>th</code> elements.</li>
        </ul>
      </section>
      <section id="header" class="section-quiz"></section>
      <section>
        <header>
          <h2>Complex tables</h2>
        </header>
        <section>
          <header>
            <h3>Header scope</h3>
          </header>
          <p>Utopia UIs present complex financial information, often with tables more complex than the examples you saw above. In complex tables, it is not always obvious which cells have which headers. Browsers and assistive technologies use <a href="https://www.powermapper.com/blog/table-headers-and-scope/">complex rules to guess</a>, but they may guess wrong. You can code complex tables to prevent such errors.</p>
          <p>The &ldquo;scope&rdquo; of a header is the range of cells it is a header of (typically a row or a column).</p>
          <p>Perform these operations:</p>
          <ul>
            <li>Open a <a href="../../gen/examples/table/cx-actual.html" target="_blank">table drawn from the article <q>Active Fixed Income Perspectives: 2nd quarter 2019</q></a>. This table has been simplified from the original.</li>
            <li>Note how the table is organized. Note the two-column headers at the very top and the hierarchy of single- and multi-row headers on the left. These headers make the table complex.</li>
          </ul>
          <p><mark id="hint-07" class="hint covert">Headers like <q>Treasury/agency</q> look like column headers, but logically are row headers. <q>Treasury/agency</q> is a header for the next six rows under it.</mark> It could have been in a cell to the left of those cells, spanning all six of them vertically. But that would have made the table wider, so it was placed above the group of rows. The <q>Utopia active taxable bond funds</q> header is another row header.</p>
          <p>So, what are the headers for any particular cell, such as <q>VFIIX</q>? It has <strong>five</strong> headers:</p>
          <ul>
            <li><q>GNMA</q></li>
            <li><q>Treasury/agency</q></li>
            <li><q>Utopia active taxable bond funds</q></li>
            <li><q>Ticker symbol</q></li>
            <li><q>Investor Shares</q></li>
          </ul>
          <p>These headers form hierarchies. <mark id="hint-08" class="hint covert"><q>Utopia active taxable bond funds</q> is a direct header of <q>Treasury/agency</q>. <q>Treasury/agency</q> is a direct header of <q>GNMA</q>. <q>Investor Shares</q> is a direct header of (the first) <q>Ticker symbol</q>.</mark> So, <q>VFIIX</q> has only two direct headers: <q>GNMA</q> and (the first) <q>Ticker symbol</q>. Its other three headers are indirect. <q>Utopia fund</q> is another direct header of <q>GNMA</q>, and that fact could help a user understand the <q>GNMA</q> header.</p>
        </section>
        <section id="classify" class="section-quiz"></section>
        <section>
          <header>
            <h3>Header scope ambiguity</h3>
          </header>
          <p>Browsers and assistive technologies can misinterpret your intent for the scopes of headers, especially in complex tables. For example, you can figure out that the <q>Utopia active taxable bond funds</q> header is a row header covering about half the table, but you can&rsquo;t rely on a browser or assistive technology figuring that out.</p>
          <p>Note also the <q>%</q> symbol in some cells. These symbols are intended as headers, each belonging to a set of cells, but you need to guess about that, because it isn&rsquo;t made explicit. Imagine somebody navigating the table with an assistive technology and arriving at the &ldquo;0.35&rdquo; cell to the right of &ldquo;VGCIX&rdquo;. Suppose the user (somehow) knows that the cell is in the &ldquo;Expense ratio&rdquo; column. What will the user understand? Well, 0.35 is a ratio. It means 35%. So the user could understand that the VGCIX fund charges its shareholders 35% of what they own for expenses. In fact, 0.35 means 0.0035, because the &ldquo;%&rdquo; symbol in the cell above it is intended to apply to that cell, too. This is an antiquated format used also with &ldquo;$&rdquo;, but it isn&rsquo;t accessible.</p>
          <p>Perform these operations:</p>
          <ul>
            <li>Inspect any element near the top of the table in the developer tools.</li>
            <li><mark id="hint-09" class="hint covert">Find the <code>table</code> element in the <q>Elements</q> panel and select it.</mark></li>
            <li><mark id="hint-10" class="hint covert">Examine it, its rows, and their cells in the Accessibility Tree.</mark></li>
            <li><mark id="hint-11" class="hint covert">What roles do the cells have: <code>gridcell</code>, <code>rowheader</code>, or <code>columnheader</code>?</mark> They <strong>all</strong> have the <code>gridcell</code> role. Inspect one of the headers. Note that it is coded as a <code>td</code> element, instead of a <code>th</code> element. It isn&rsquo;t coded as a header, so the browser misinterprets it as an ordinary cell.</li>
            <li>Open an <a href="../../gen/examples/table/cx-better.html" target="_blank">improved version of a similar <q>Utopia active bond funds</q> table</a> (from the 4th quarter of 2018). In this version, the inconsistent <q>%</q> symbols have been moved into real headers so they will apply to all appropriate cells. The table has been accessibly organized with <code>caption</code> and <code>thead</code> elements. Since the data are partitioned into two separate sections (taxable and municipal), the <code>tbody</code> element has been split into two <code>tbody</code> elements. All the headers have been recoded from <code>td</code> to <code>th</code> elements. So the table is coded similarly to the above examples of an accessible table.</li>
            <li>Inspect some of the column and row headers in the Accessibility Tree. Note that the browser has <strong>misinterpreted</strong> some of them. Some row headers, such as &ldquo;National municipal&rdquo;, are classified as column headers, because of where they are located.</li>
          </ul>
          <p>You have seen that <code>tbody</code> and <code>th</code> elements are not enough to make the headers in complex tables accessible.</p>
        </section>
        <section id="ambiguity" class="section-quiz"></section>
        <section>
          <header>
            <h3>Disambiguating headers</h3>
          </header>
          <p>HTML5 allows you to configure table headers to eliminate ambiguity as to their scopes and which cells they are headers of.</p>
          <p>Perform these operations:</p>
          <ul>
            <li>Open a <a href="../../gen/examples/table/cx-best.html" target="_blank">further improved version of a <q>Utopia active bond funds</q> table</a>.</li>
            <li>In the <q>Elements</q> panel, inspect the <code>th</code> element for the <q>Investor Shares</q> cell. Note that it has a <code>scope</code> attribute. That defines whether the header governs a row, a row group, a column, or a column group. Here its value is <code>colgroup</code>, because it governs both of the columns below it.</li>
            <li><mark id="hint-12" class="hint covert">Now inspect the <code>td</code> element for the <q>VPAIX</q> cell. Note that it has a <code>headers</code> attribute, with the value <code>r33 c3</code>.</mark></li>
            <li><mark id="hint-13" class="hint covert">Inspect both of the direct headers of the <q>VPAIX</q> cell. Note that its row header has an <code>id</code> attribute with the value <code>r33</code>, and its column header has an <code>id</code> attribute with the value <code>c3</code>. In this way, the <q>VPAIX</q> cell&rsquo;s <code>headers</code> value identifies those two as the direct headers of the cell. Note, also, that those direct headers have their own <code>headers</code> attributes, with values identifying <strong>their</strong> direct headers.</mark></li>
            <li>Inspect the &ldquo;State municipal&rdquo; element in the Accessibility Tree. Note that its role is now <code>rowheader</code> instead of <code>columnheader</code>, because it is coded with <code>scope="rowgroup"</code>.</li>
            <li>Use axe to analyze the last three tables used in this module. Note that axe finds <strong>none</strong> of the accessibility deficiencies in any of them.</li>
          </ul>
          <p>As you saw, the Accessibility Tree classifies headers but doesn&rsquo;t say which headers govern which cells. <mark id="hint-14" class="hint covert">Assistive technologies can follow chains of <code>headers</code> attributes</mark>, but do they? A test of this table with three screen readers (NVDA, Jaws, and VoiceOver) revealed that they do not announce all indirect headers of the cell that the user enters. For example, a user moving between rows is informed of the new fund name, but not of the categories of the fund. A user alternating between the <q>0.21</q> and the <q>VFIJX</q> cells in the top fund row and using Jaws is told that <q>VFIJX</q> is a ticker symbol and 0.21 is an expense ratio, but not whether those are for investor or admiral shares. Thus, Jaws potentially lets the user believe that fund VFIJX has a 0.21 expense ratio, rather than the correct 0.11 expense ratio. (NVDA and VoiceOver announce the indirect column headers, so they do not produce this same misleading impression.)</p>
          <p>Some screen readers with some browsers also announce headers <strong>more</strong> often than necessary, sometimes two or more times consecutively.</p>
          <p>Thus, some browsers and assistive technologies fail to support accessibility standards for tables as fully as they might. What should you do about this? Your options include:</p>
          <ul>
            <li>breaking tables up into smaller ones that today&rsquo;s assistive technologies can correctly analyze</li>
            <li>referencing not only direct but also indirect headers in the <code>headers</code> values</li>
          </ul>
          <p>You also saw that even a state-of-the-art testing tool can fail to reveal accessibility issues in tables. Table accessibility requires inspection and non-automated testing.</p>
        </section>
        <section id="disambiguate" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Large tables</h2>
        </header>
        <section>
          <header>
            <h3>Introduction</h3>
          </header>
          <p>Some Utopia UIs display tables with many rows and/or many columns, making it impossible to see an entire row or column at once. Users scroll horizontally or vertically in order to see rows or columns that are currently off-screen. When they do, they may no longer be able to see row or column headers. That creates a risk of misremembering headers and misunderstanding the information in cells.</p>
          <p>Paradoxically, users relying on screen readers may be better able to understand cell information in large tables than users relying on eyesight, since screen readers (ideally) announce the new header when the user moves the focus to a cell whose header differs from the previous cell&rsquo;s.</p>
          <p>If you want your UI to be accessible not only to users with especially good vision, memory, and dexterity, you can use additional techniques on large tables.</p>
        </section>
        <section>
          <header>
            <h3>Column selection</h3>
          </header>
          <section>
            <header>
              <h4>Introduction</h4>
            </header>
            <p>One  technique for wide tables is to allow the user to decide which columns to display and which ones to hide. The user can select few enough columns so that no horizontal scrolling is necessary.</p>
            <p>Column selection is a common technique. Jira, for example, recognizes hundreds of possible columns on some screens and would be impractical to use if users did not have control over which columns to display.</p>
            <p>The wider a table is, the more unnecessary some of its columns probably are for any particular user. Making the table more accessible with this technique lets users see just what they want to see.</p>
          </section>
          <section>
            <header>
              <h4>How to do it</h4>
            </header>
            <section>
              <header>
                <h5>Header buttons</h5>
              </header>
              <p>One mechanism for column selection is header buttons. These are buttons within column-header cells that the user can press in order to suppress the display of columns.</p>
              <p>This mechanism is not shown here, because it is somewhat complex to implement and can be confusing for the user. It requires the user to go to a different place to redisplay a hidden column.</p>
            </section>
            <section>
              <header>
                <h5>Column-selection form</h5>
              </header>
              <section>
                <header>
                  <h6>Behavior</h6>
                </header>
                <p>Another mechanism is a form that lets users mark each column for display or nondisplay. For an example of this mechanism, perform these operations:</p>
                <ol>
                  <li>Open an <a href="../../gen/examples/tablehc" target="_blank">example of a table with column selection</a>.</li>
                  <li>Narrow the browser window. Note that horizontal scrolling becomes necessary.</li>
                  <li>Clear some of the checkboxes in the column-selection form. Note that the columns named by those checkboxes disappear.</li>
                  <li>Check some of the cleared checkboxes. Note that their columns reappear.</li>
                </ol>
              </section>
              <section>
                <header>
                  <h6>How it works</h6>
                </header>
                <p>You can implement this mechanism in various ways. To see the code that powers this implementation:</p>
                <ol>
                  <li>Open the <code>tablehc/script.js</code> file. Note the <code>initColCtl()</code>, <code>colCtlParagraph()</code>, and <code>toggleCol()</code> functions that create the checkboxes and make them work.</li>
                  <li>Examine the <code>tablehc/style.css</code> file. Note the last ruleset, applying a <code>display: none</code> declaration to any table cell with class <code>covert</code>.</li>
                </ol>
                <p>With this implementation, when you are including tables on a page you can designate any table as a column-controlled table, and then the above-mentioned code will apply to that table. To make a table column-controlled, you:</p>
                <ul>
                  <li>Give the table an <code>id</code> attribute.</li>
                  <li>Include <code>controlled</code> in the list of the table&rsquo;s classes.</li>
                  <li>Include <code>controlled</code> in the classes of every column header that you want to be user-controlled.</li>
                </ul>
                <p>When the page loads, the <code>initColCtl()</code> function is executed. Here is what it does:</p>
                <ul>
                  <li>It looks for all tables with class <code>controlled</code>.</li>
                  <li>For each such table, it creates a form just before the table.</li>
                  <li>It configures the form for a set of column controls by inserting a <code>fieldset</code> element into the form, a <code>legend</code> element into the <code>fieldset</code>, and a line of instructions into the <code>legend</code> element. (If you want to revise that line, change the value assigned to <code>messages.ccLegend</code> at the top of the <code>script.js</code> file.)</li>
                  <li>For each column that you have marked <code>controlled</code>, it inserts into the <code>fieldset</code> element a paragraph containing a labeled checkbox to control that column.</li>
                </ul>
                <p>To create that checkbox paragraph, it calls the <code>colCtlParagraph()</code> function. It passes three values to the function:</p>
                <ul>
                  <li>the <code>id</code> of the table</li>
                  <li>the position of the column header in its row</li>
                  <li>the text content of the column header</li>
                </ul>
                <p>The <code>colCtlParagraph()</code> function creates and returns the required checkbox paragraph as follows:</p>
                <ul>
                  <li>It uses the <code>choiceParagraph()</code> function from the <code>gen/modOnLoad.js</code> file to create a labeled checkbox.</li>
                  <li>It checks that checkbox.</li>
                  <li>It creates an event listener that responds to any change in the checked or unchecked value of the checkbox (i.e. any <code>input</code> event on the checkbox) by executing the <code>toggleCol()</code> function.</li>
                </ul>
                <p>Once the form has been inserted, any change in the state of one of the checkboxes causes execution of the <code>toggleCol()</code> function, which:</p>
                <ul>
                  <li>looks for all cells in the controlled column</li>
                  <li>for each such cell, either adds <code>covert</code> to, or removes it from, the cell&rsquo;s list of classes</li>
                </ul>
                <p>On the basis of the <code>td.covert, th.covert</code> ruleset in the <code>style.css</code> file, this change of class either hides or displays the cell.</p>
                <p><mark id="hint-15" class="hint covert">If the cell is hidden, it is still in the table, but not displayed.</mark></p>
                <p><mark id="hint-16" class="hint covert">The <code>initColCtl()</code> function uses the <code>cellIndex</code> property to identify the column that a column header is in. That property is 0-indexed, so the first column is column 0.</mark></p>
                <p>The <code>toggleCol()</code> function uses that position to decide which cells in each row to show or hide. It chooses those cells by means of the CSS <code>:nth-child()</code> pseudo-class. The argument to that pseudo-class is 1-indexed, so <code>:nth-child(1)</code> identifies the first child of a parent, in this case the first cell of a row. That is why <code>toggleCol()</code> uses <code>cellIndex + 1</code> to compute the argument of <code>:nth-child()</code>.</p>
                <p>In principle, there is an easier way to display and hide columns. The HTML5 specification lets you hide all cells in a column by setting the <code>visibility</code> style property of a <code>col</code> element to <code>collapsed</code>. But no major browser properly implements that feature yet.</p>
                <p>This implementation depends on the table having a uniform row structure. If the user asks to hide the nth column, <code>toggleCol()</code> hides the nth cell in every row. But that method would fail if any adjoining cells before that position were merged.</p>
              </section>
            </section>
            <section id="colselect" class="section-quiz"></section>
          </section>
        </section>
        <section>
          <header>
            <h3>Sticky headers</h3>
          </header>
          <p>The need to scroll impairs the accessibility of large tables. But you can diminish the harm if you freeze the header row(s) and/or the header column(s). Then, although the user must scroll, scrolling doesn&rsquo;t push the headers out of sight. Users wanting to compare column 3 with column 15, for example, may be unable to see them together, but at least they can see what each row and/or column is about.</p>
          <p>HTML5 and CSS3 do not provide useful mechanisms for making ranges of table cells scrollable.</p>
          <ul>
            <li>CSS3 provides a vertical scrolling mechanism with the `overflow-y` CSS style property, but it is applicable only to elements whose `display` style property has the value `block`. You can group table rows into `tbody` elements, but the `display` style property of a `tbody` element is `table-row-group`, not `block`. If you try to change its value to `block`, the browser treats the entire `tbody` element as content of the first column, so the column alignment is destroyed.</li>
            <li>CSS3 provides a similar horizontal scrolling mechanism with the `overflow-x` CSS style property, but there is no element that can contain a subset of the columns in a `tbody` element, so there is nothing to apply this mechanism to.</li>
            <li>CSS3 permits you to keep elements from scrolling out of view with the `position` CSS style property&rsquo;s `sticky` value, but it, too, applies only to elements with the `block` value of the `display` style property. The `table` element and all of its descendants have table-related values of `display`, and they stop behaving properly if you change those values to `block`.</li>
          </ul>
          <p>You can overcome this lack of CSS3 support. The column-selection technique used earlier is really a cell-selection technique. It shows or hides each cell, depending on whether it is in a column that the user wants to see. A user who scrolls is, likewise, deciding which cells to see. You can provide scrolling controls and interpret them as requests to hide and display certain cells.</p>
          <p>You can see one implementation of this principle in an <a href="../../gen/examples/tablesticky" target="_blank">example of a table with sticky headers</a>. Perform these operations:</p>
          <ol>
            <li>Open the example page.</li>
            <li>Operate the scroll buttons. Note that the rows and columns scroll, but the headers remain fixed.</li>
            <li>Change the height and width of your browser window.</li>
            <li>Refresh the page. Note that the number of rows and columns displayed has been adjusted.</li>
            <li>In the <code>script.js</code> file, examine the function <code>scrollUp()</code>.</li>
          </ol>
          <p><mark id="hint-17" class="hint covert">The scrolling functions (<code>scrollUp()</code> etc.) get the table size and the currently displayed range of rows or columns from the <code>dataset</code> property of the <code>table</code> element. The functions then determine whether it <strong>can</strong> scroll the view in the requested direction. (For example, it can&rsquo;t scroll the view up if the top row is already being shown.) If it can, then it does so by showing one currently hidden row or column, and hiding one currently shown row or column.</mark> It uses the <code>reshowTable()</code> function to do this. That function also updates the table&rsquo;s <code>dataset</code> property.</p>
          <p>The data in any table can be either hard-coded into the HTML file or inserted into the table from a source of the data. In this case the data are inserted from an object in the <code>script.js</code> file when the page loads by the <code>populateCDTable()</code> function. The <code>initCDTable()</code> function determines how many rows and columns to show, on the basis of the size of the browser window. It uses the <code>reshowTable()</code> function to hide the cells that are not to be displayed.</p>
          <p>The showing and hiding of rows and columns differ. To show or hide a row, you can change the class of its <code>tr</code> element. That is what the <code>toggleRow()</code> function does. But to show or hide a column you need to change the class of each cell (i.e. each <code>th</code> or <code>td</code> element) in that column. That is what <code>toggleCol()</code> does.</p>
        </section>
        <section id="sticky" class="section-quiz"></section>
        <section>
          <p>Sections on transpose and listify techniques have not been written yet.</p>
        </section>
      </section>
    </main>
  </body>
</html>

==> mod/tablist/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
    <script src="nav.js"></script>
    <link rel="stylesheet" href="style.css">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>One of the common content-selection mechanisms in Utopia UIs is the <dfn>tab list</dfn> (sometimes also called <dfn>tab set</dfn>). It is similar, but not identical, to navigation links, accordions, radio buttons, checkboxes, dropdown lists, menus, menu bars, buttons, action bars, and toggles.</p>
        <p>Tab lists can be made accessible, but not as easily as some of the other mechanisms just mentioned, because tab lists are not native to HTML5.</p>
      </section>
      <section>
        <header>
          <h2>Terms</h2>
        </header>
        <p><mark id="hint-00" class="hint covert">A tab list is a list of tabs. At any time, one of the tabs is selected. It controls a particular item of content, and that item is called a <dfn>tab panel</dfn>.</mark> Most commonly, all the tab panels are located in the same container, and at any given time only one of the tab panels is displayed: the one that corresponds with (i.e. is controlled by) the selected tab.</p>
        <p>Tab lists can operate in either of two ways:</p>
        <ul>
          <li>Manual activation: Putting a tab into focus does not select it; selecting it is a separate step (like a checkbox).</li>
          <li>Automatic activation: Putting a tab into focus automatically selects that tab (like a radio button).</li>
        </ul>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>Accessible behavior</h2>
        </header>
        <p>Making tab lists accessible mainly requires you to ensure that:</p>
        <ul>
          <li>Users can focus and select a tab by clicking it.</li>
          <li><mark id="hint-01" class="hint covert">Users can <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-19" target="_blank">focus and select a tab, and navigate among, from, and to tabs, with a keyboard</a>.</mark></li>
          <li><a href="https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-20" target="_blank">Assistive technologies are told about the properties and states of tab lists.</a></li>
        </ul>
        <p>An accessible tab list also shows the user which tab is currently selected. It does so by making that tab look different from the other tabs. In addition, selecting the same tab again would have no effect, so it improves accessibility to disable the currently selected tab.</p>
        <section class="example">
          <header>
            <h3><label for="types">Investment types</label></h3>
          </header>
          <form>
            <label>
              <input id="types-hard" type="checkbox" checked>
              Require click to select
            </label>
          </form>
          <ul id="types" role="tablist" class="tablist-hard">
            <li
              id="tabmf"
              role="tab"
              tabindex="0"
              aria-selected="true"
              aria-controls="defmf"
            >
              Mutual fund
            </li>
            <li
              id="tabetf"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defetf"
            >
              Exchange-traded fund
            </li>
            <li
              id="tabcs"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defcs"
            >
              Common stock
            </li>
            <li
              id="tabps"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defps"
            >
              Preferred stock
            </li>
            <li
              id="tabb"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defb"
            >
              Bond
            </li>
          </ul>
          <section>
            <p
              id="defmf"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabmf"
              class="overt">A type of investment that pools shareholder money and invests it in a variety of securities. Each investor owns shares of the fund and can buy or sell these shares at any time. Mutual funds are typically more diversified, low-cost, and convenient than investing in individual securities, and they&rsquo;re professionally managed.</p>
            <p
              id="defetf"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabetf"
              class="covert">
              A type of investment with characteristics of both mutual funds and individual stocks. ETFs are professionally managed and typically diversified, like mutual funds, but they can be bought and sold at any point during the trading day using straightforward or sophisticated strategies.
            </p>
            <p
              id="defcs"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabcs"
              class="covert">
              An investment that represents part ownership in a corporation. Each share of stock is a proportional stake in the corporation&rsquo;s assets and profits.
            </p>
            <p
              id="defps"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabps"
              class="covert">
              Stock that takes precedence over common stock when dividends are paid or assets are liquidated. A preferred security doesn&rsquo;t usually carry voting rights.
            </p>
            <p
              id="defb"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabb"
              class="covert">
              A loan made to a corporation or government in exchange for regular interest payments. The bond issuer agrees to pay back the loan by a specific date. Bonds can be traded on the secondary market.
            </p>
          </section>
        </section>
        <p>Perform these operations:</p>
        <ol>
          <li>In the above example of a tab list, click the <q>Mutual fund</q> tab.</li>
          <li>Press the <kbd>TAB</kbd> key. Note that the focus moves to the tab panel of that tab.</li>
          <li>Press the <kbd>TAB</kbd> key again. Note that the focus moves out of the tab list to the next focusable element (a <q>Test yourself</q> button).</li>
          <li>Press the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination. Note that the focus moves back to the tab panel.</li>
          <li>Press the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination again. Note that the focus moves back to the tab.</li>
          <li>Press the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination again. Note that the focus moves out of the tab list to the checkbox before it.</li>
          <li>Press the <kbd>TAB</kbd> key again. Note that the focus moves back to the <q>Mutual fund</q> tab.</li>
          <li>Press the <kbd>&leftarrow;</kbd> key. Note that the focus moves to the last tab. The selection does not automatically follow the focus, because the tab list currently employs the manual-activation method, not the automatic-activation method.</li>
          <li>Press the <kbd>SPACE</kbd> key. This acts like a click, changing your selection to the focused tab (<q>Bond</q>).</li>
          <li>Press the <kbd>SPACE</kbd> key again. Note that it causes scrolling, as it normally does, because the focused tab is now disabled.</li>
          <li>Press the <kbd>&leftarrow;</kbd> key and then the <kbd>ENTER</kbd> key. This (like <kbd>SPACE</kbd>) is equivalent to clicking the focused tab. Note that you have changed the focus to the previous tab, and then you have selected that tab.</li>
          <li>Press the <kbd>ENTER</kbd> key again. Note that nothing happens. The <q>Preferred stock</q> tab is disabled, so the <kbd>ENTER</kbd> key performs its normal function, which is nothing.</li>
          <li>Press all four arrow keys, the <kbd>HOME</kbd> key, and the <kbd>END</kbd> key, to verify that the tab list obeys navigation rules 2, 3, 4, and 5 above.</li>
          <li>Click a tab that isn&rsquo;t in focus. Note that it becomes focused and also selected.</li>
          <li>Click the tab panel, below the tab list. Note that it becomes focused.</li>
          <li>Press the <kbd>&rightarrow;</kbd> key. Note that nothing happens, because the focus is not on a tab.</li>
          <li>Clear the <q>Click tab to select</q> checkbox. This changes the behavior of the tab list from manual to automatic activation.</li>
          <li>Click the <q>Bond</q> tab, then press the <kbd>&rightarrow;</kbd> key. Note that, with automatic activation in force, you have changed the focus and also the selection.</li>
          <li>Experiment further with the tab list to observe that it now implements automatic activation.</li>
        </ol>
        <p>Which activation method is better? The <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel">Accessible Rich Internet Applications Working Group recommends</a> automatic activation if the tab panels are all preloaded in the browser, but otherwise recommends manual activation. <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus">It says this helps accessibility.</a> But it doesn&rsquo;t mention a possible annoyance of the focus method: If the user holds down the left or right arrow key, there will be a rapid replacement of the tab panels with each other. Try it yourself:</p>
        <ol>
          <li>Clear the <q>Require click to select</q> checkbox in the above example.</li>
          <li>Click any of the tabs.</li>
          <li>Hold down the left or right arrow key for a few seconds.</li>
        </ol>
        <p>Imagine a long tab list and a user who is navigating with the arrow keys. The user might need to hold down an arrow key and witness multiple tab panel replacements before arriving at the desired tab. Depending on the tab panel content, this could even create a seizure risk for users with some sensory disabilities. So, while automatic activation requires less work from the user, manual activation may be less disruptive, especially if there are many tabs.</p>
      </section>
      <section id="behave" class="section-quiz"></section>
      <section>
        <header>
          <h2>Making tab lists work</h2>
        </header>
        <p>There is no HTML5 <code>tablist</code>, <code>tab</code>, or <code>tabpanel</code> element. You can create a tab list and make it accessible with mechanisms in HTML5, CSS, WAI-ARIA, and JavaScript. This requires more coding than it would if tab lists were native to HTML5.</p>
        <p><mark id="hint-02" class="hint covert">The W3C provides examples of implementations of tab lists with <a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-2/tabs.html" target="_blank">manual activation</a> and <a href="https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-1/tabs.html">automatic activation</a>.</mark></p>
        <p>You can also inspect the HTML, CSS, and JavaScript of the tab list shown above.</p>
        <p>The ARIA attributes used in tab-list implementations don&rsquo;t make tab lists behave correctly. For example, the <code>aria-controls</code> attribute doesn&rsquo;t show and hide tab panels. The ARIA attributes only help assistive technologies interpret your interface. You can also use <code>aria-controls</code> to choose tab panels to reveal and hide. But it is your JavaScript code that actually does the focus changing, selection indicating, revealing, and hiding.</p>
      </section>
      <section id="work" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/term/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p></p>
      </section>
      <section>
        <header>
          <h2>Abbreviations</h2>
        </header>
        <ol>
          <li>Note that the abbreviations and technical terms in the two tables look different. In <code>table-good.html</code> they have dotted underlines. Observe their behavior when you hover over them with a mouse. Definitions appear in tooltips. Accessible UIs don&rsquo;t just assume that users understand abbreviations and technical terms. Instead, they give explanations or definitions, at least the first time each one appears. There are a few methods for doing this; <code>table-good.html</code> illustrates two of them: (1) tooltips and (2) links to more information.</li>
          <li>You noted the tooltips defining the abbreviations and technical terms in <code>table-good.html</code>. Inspect the HTML code for <q>Tkr Sym</q> on both pages.</li>
          <li>On <code>table-bad.html</code>, it&rsquo;s plain text. But, on <code>table-good.html</code>, it&rsquo;s the text content of an <code>abbr</code> element. That element has a <code>title</code> attribute, whose value is the definition of this abbreviation. This is a method provided by HTML5 for semantically coding abbreviations and their definitions. Browsers and assistive technologies that comply with HTML5 can render abbreviations and definitions in various ways, but you don&rsquo;t need to arrange that. You do your part simply by conforming to the HTML5 standard.</li>
          <li>Browsers and assistive technologies are expected to comply promptly and fully with applicable standards, but they don&rsquo;t always do so. For example, Chrome, Firefox, and Safari treat abbreviations alike, but Internet Explorer 11 is different. It shows the tooltips when you hover on an abbreviation, but doesn&rsquo;t show you in advance which items have tooltips. Among the current versions of screen readers that render content audibly, VoiceOver announces the definitions before announcing abbreviations, but NVDA and Jaws ignore the definitions. If you decide to compensate for such flaws, you can use other methods that are more widely supported until assistive technologies catch up with the standards.</li>
        </ol>
      </section>
      <section id="abbr" class="section-quiz"></section>
      <section>
        <header>
          <h2>Negation</h2>
        </header>
        <ol>
          <li>Look carefully at the negative dollar amounts. The negativizing symbol is longer in <code>table-good.html</code> than in <code>table-bad.html</code>. The bad symbol is a hyphen-minus sign: It is ambiguous between linking two items and making an item negative. So it can cause misinterpretations and mistakes. The good symbol is a minus sign: It has only one meaning.</li>
          <li>Note how the negative dollar amounts are coded. In the bad table they are marked with a hyphen-minus sign: the character that you get by pressing the <q>-</q> key. In the good table they are marked with <code>&amp;minus;</code>: the HTML character entity that stands for the minus sign.</li>
          <li>Sometimes assistive technologies interpret the hyphen-minus sign as <q>minus</q>, but you cannot rely on this. Screen readers currently announce <code>-$1.35</code> as a negative dollar amount, but they don&rsquo;t announce <code>$5 - $3 = $2</code> as a subtraction. So reliably accessible UIs consistently use <code>&amp;minus;</code> for the minus sign.</li>
        </ol>
      </section>
      <section id="neg" class="section-quiz"></section>
      <section>
        <header>
          <h2>Times</h2>
        </header>
        <ol>
          <li>Note the different coding of the last-update time. On <code>table-bad.html</code> it is plain text. On <code>table-good.html</code> it is the text content of a <code>time</code> element. This semantically identifies the date and time as a date and/or time. Moreover, the <code>time</code> element has a <code>datetime</code> attribute, whose value is a string that identifies the date and time, and the time zone, in a standard manner. In some contexts this would allow assistive technologies to perform chronological calculations, enforce deadlines, report time-based market data, etc. However, there is also a risk that out-of-date assistive technologies don&rsquo;t properly handle the <code>time</code> element, leaving some users worse off than if you used plain text for the date and time.</li>
        </ol>
      </section>
      <section id="time" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/teststrat/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Previous modules have asked you to perform accessibility testing with:</p>
        <ul>
          <li>your keyboard</li>
          <li>your mouse</li>
          <li>tap, drag, and gesture actions on mobile devices (optionally)</li>
          <li>axe</li>
          <li>the W3C Markup Validation Service</li>
          <li>WebStorm</li>
          <li>code inspection in the <q>Elements</q> and <q>Sources</q> panels of the developer tools</li>
          <li>the Accessibility Tree</li>
          <li>computed accessibility properties</li>
        </ul>
        <p>The modules on accessibility testing don&rsquo;t repeat the techniques shown in previous modules. They go beyond those techniques:</p>
        <ul>
          <li>This module discusses strategies for accessibility testing.</li>
          <li>The next module deals with automating labor-intensive testing.</li>
          <li>The next module shows you how to test with assistive technologies, such as screen readers.</li>
          <li>The final module introduces tools that simulate difficult user situations during your testing, a kind of &ldquo;stress testing&rdquo; for accessibility.</li>
        </ul>
      </section>
      <section>
        <header>
          <h2>When to test</h2>
        </header>
        <p>The consensus among experts is that testing is mostly conducted too late. Costs, including mainly the time you spend, tend to increase when testing is postponed.</p>
        <p>Early testing implies testing from the start. It implies testing the conceptual design, the layouts, the flows, the writing, and the graphics. This testing includes checklists, automated processes, and trials with human subjects. Testing during the design and writing is crucial, but not covered here, because these modules address the development process. If the pre-development work has been tested for accessibility and revised accordingly, many of the problems discussed in these modules will not exist.</p>
        <p>Once the software implementation begins, testing can be beneficial from the start of coding. A code editor can be configured to warn you of some accessibility defects as you code. You can have accessibility tests performed automatically each time you commit changes to the code.</p>
        <p>Continuous testing makes it less likely that any revision that you make for accessibility will be complex or risk breaking things.</p>
      </section>
      <section>
        <header>
          <h2>What to test for</h2>
        </header>
        <p>Some may tell you that accessibility issues are of two types: component-level and page-level.</p>
        <p>That isn&rsquo;t true. There are also site-level accessibility issues. Those are discussed in the <a href="../sitenav"><q>Accessible Site Navigation</q></a> module. Therefore, thorough accessibility testing requires that you look for site-level, page-level, and component-level problems. Examples:</p>
        <ul>
          <li>Site-level: inconsistent site navigation from page to page.</li>
          <li>Page-level: no level-1 header on page.</li>
          <li>Component-level: table without a <code>caption</code> element.</li>
        </ul>
        <p><mark id="hint-00" class="hint covert">These problem types are generally the targets of end-to-end, integration, and unit tests, respectively.</mark></p>
        <p>Some accessibility testing requires substantial time and/or expertise. It may not be economical to test for everything. Then it is necessary to prioritize. In prioritizing testing, one generally gets the best results by emphasizing problems that:</p>
        <ul>
          <li>are easy to test for</li>
          <li>have major impacts</li>
          <li>real users have complained about</li>
          <li>will be easy to correct</li>
          <li>are likely to occur in many places</li>
          <li>might arise from code changes that you have just made</li>
        </ul>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>How to test</h2>
        </header>
        <section>
          <header>
            <h3>Automation</h3>
          </header>
          <p>For maximum value, accessibility testing is automated. Automated testing is not only faster than human testing, but also:</p>
          <ul>
            <li>more reliable (it doesn&rsquo;t make random errors or forget)</li>
            <li>always-on</li>
          </ul>
          <p>But automated testing has limitations, too.</p>
          <p>The automated testing currently in use at Utopia is fully programmed, i.e. rule-based. This makes it more brittle than human testing. <mark id="hint-01" class="hint covert">Utopia websites exhibit hard-to-predict behavior changes. For example, they unpredictably insert pages that ask for missing personal information or warn about early holiday closures. Automated tests that presume a specific flow from page to page can fail when such deviations occur.</mark></p>
          <p>More intelligent automated testing systems, able to learn autonomously how users respond to random changes, are widely expected to overcome such limitations&mdash;gradually. Utopia is beginning to explore the potential of such systems.</p>
          <p>Automated testing requires developers to figure out algorithms that detect and diagnose accessibility defects. That is hard. Companies producing automated accessibility testing tools currently claim that their own tools can&rsquo;t detect, on average, more than half of all accessibility defects.</p>
          <p>The accessibility features that automated testing tools, including those used at Utopia, currently <strong>can&rsquo;t</strong> detect include these:</p>
          <ul>
            <li>Everything a user can do with a mouse can be done with a keyboard, instead. This includes navigation (such as to, from, and within groups of radio buttons) and actions (such as dismissing a modal dialog).</li>
            <li>The site navigation mechanisms are consistent from page to page.</li>
            <li>The site uses a consistent link style.</li>
            <li><mark id="hint-02" class="hint covert">The foreground-background contrast is great enough when the background is a gradient.</mark></li>
            <li>The text alternative for an image accurately describes the image.</li>
            <li>The accessible name of a button adequately explains the effect of activating the button.</li>
            <li>The user can double the size of the text without losing content or functionality.</li>
            <li>There is a visible indicator of a link&rsquo;s hover state.</li>
          </ul>
          <p>Because of such limitations, achieving substantial accessibility requires not only automated but also human testing.</p>
          <p>Automated accessibility testing varies in how automated it is. Fully automated testing is performed at predetermined times or under predetermined conditions (e.g., the <code>vg-accessibility-attest</code> module). Semi-automated testing is performed on demand (e.g., the axe <q>Analyze</q> command).</p>
        </section>
        <section>
          <header>
            <h3>Equipment</h3>
          </header>
          <p>Human accessibility testing generally falls into four equipment categories:</p>
          <ul>
            <li>
              Testing on a computer operating system
              <ul>
                <li>with only ordinary user peripherals and software</li>
                <li>with assistive technologies, too</li>
              </ul>
            </li>
            <li>
              Testing on a mobile/touch operating system
              <ul>
                <li>with only ordinary user peripherals and software</li>
                <li>with assistive technologies, too</li>
              </ul>
            </li>
          </ul>
          <p>Both mobile OSs and assistive technologies change interfaces, compared with conventional computer OSs. Therefore, in order to simulate the experience of users in these four equipment scenarios, you need to replicate all four of them while testing.</p>
        </section>
        <section>
          <header>
            <h3>Integration</h3>
          </header>
          <p>Developers can organize accessibility testing as:</p>
          <ul>
            <li>a distinct activity</li>
            <li>an integral component of normal software testing</li>
          </ul>
          <p>Both of these approaches have advantages. When accessibility testing is distict, accessibility experts, like those in the Utopia Accessibility Unit, can perform it. When accessibility testing is integrated with other testing, it is easier to ensure that it is done early and repeatedly, and it is more efficient to correct accessibility problems at the same time that non-accessibility problems are being corrected.</p>
          <p>Weighing the advantages, the Utopia Accessibility Unit takes the position that well-integrated accessibility testing is the superior approach.</p>
        </section>
      </section>
      <section id="how" class="section-quiz"></section>
      <section>
        <header>
          <h4>Who tests</h4>
        </header>
      </section>
      <p>Accessibility testing at Utopia, other than fully automated testing, is normally performed by developers and by testers on project teams. Additional validation and specialized testing is also performed by testers within the Accessibility Unit, and by consultants hired by the Accessibility Unit.</p>
      <p>Each of these has a role to play. <mark id="hint-03" class="hint covert">Testing your own code gives you immediate results, allowing you to make corrections while the code is still fresh in your mind. Testing your code with automated tools, by operating your UI with a keyboard, and by turning on assistive technologies, gives you extensive results. It does require some learning and time, and in some cases additional equipment. Once you have done the testing that you can practically do, the Accessibility Unit may be able to validate your results with additional testing. But it cannot do your testing for you.</mark></p>
      <p>What about testing with users? You can do informal user testing by getting colleagues to try your UIs and paying attention to any difficulties they experience. The Accessibility Unit sponsors formal user testing, in which users with various disabilities are observed performing tasks with Utopia UIs. Results from that research help Utopia adopt more accessible UI practices. Finally, Utopia collects data from users&rsquo; interactions with UIs, and research on UI accessibility can make use of such data. Such research can include experiments on alternative UI versions.</p>
      <section id="who" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/tree/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>A web browser helps assistive technologies do their work by creating an <dfn>Accessibility Tree</dfn> containing much of the accessibility-related information about the current state of a page.</p>
        <p>You might, for example, have given a name to some object on a page with any of several methods. The Accessibility Tree will show the object with an <dfn>accessible name</dfn>. Assistive technologies will get the benefit of that pairing, without needing to analyze the various naming methods available in HTML.</p>
      </section>
      <section>
        <header>
          <h2>Navigating and using</h2>
        </header>
        <p>Perform these operations:</p>
        <ol>
          <li>Open the Chrome developer tools while on this page. Open the <q>Elements</q> panel if it isn&rsquo;t already open. Then look at the available panes of that panel. One is the <q>Accessibility</q> pane. Open it.</li>
          <li>Note what appears there. The top structure is a representation of part of the Accessibility Tree: a part that includes the element that is selected in the <q>Elements</q> pane.</li>
          <li><mark id="hint-00" class="hint covert">Expand the <code>body</code> element recursively. Do this by right-clicking on its expansion triangle and selecting the <q>Expand recursively</q> command.</mark></li>
          <li><mark id="hint-01" class="hint covert">Select the <code>h1</code> element</mark>, 5 lines below <code>body</code>.</li>
          <li>Note what has happened to the displayed fragment of the Accessibility Tree. It now includes <q>heading</q>. The Accessibility Tree appends the heading&rsquo;s accessible name to <q>heading</q>. The accessible name has been collected and concatenated from the <code>heading</code> element&rsquo;s children, the <code>span</code> elements inside it.</li>
          <li><mark id="hint-02" class="hint covert">Note also, below, additional information about the element: a <dfn>role</dfn> (<code>heading</code>) and a <dfn>level</dfn> (<q>Level: 1</q>).</mark> Roles and levels are accessibility attributes used by assistive technologies. These two might seem obvious for <code>h1</code>, but HTML offers more ways to specify roles, levels, and other attributes, so the browser helps assistive technologies by giving them attribute values.</li>
        </ol>
      </section>
      <section id="treenav" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/what/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>The word <q>accessibility</q></h2>
        </header>
        <p><q>Accessible</q> in ordinary English can mean <q>reachable</q>, <q>easy to read</q>, <q>non-aloof</q>, or <q>wheelchair-compatible</q>.
        <p>In UI development, <q>accessibility</q> has a special meaning. Here are some ways it is expressed:</p>
        <ul>
          <li>
            <q cite="https://www.w3.org/WAI/fundamentals/accessibility-intro/#what">websites, tools, and technologies are designed and developed so that people with disabilities can use them.</q>
            W3C Web Accessibility Initiative, <cite><a href="https://www.w3.org/WAI/fundamentals/accessibility-intro/#what"><q>Introduction to Web Accessibility</q></a></cite>.
          </li>
          <li>
            <q cite="https://en.wikipedia.org/wiki/Web_accessibility">the inclusive practice of ensuring there are no barriers that prevent interaction with, or access to, websites on the World Wide Web by people with disabilities.</q>
            Wikimedia Foundation, <cite><a href="https://en.wikipedia.org/wiki/Web_accessibility">Wikipedia, <q>Web accessibility</q></a></cite>.
          </li>
          <li>
            <q cite="https://developer.mozilla.org/en-US/docs/Web/Accessibility">enabling as many people as possible to use Web sites, even when those people&rsquo;s abilities are limited in some way.</q>
            Mozilla Foundation, <cite><a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility">MDN Web Docs, <q>Accessibility</q></a></cite>.
          </li>
          <li>
            <q cite="http://corpsp.utopia.com/pnd/mc/Accessibility/Pages/Home.aspx">that all users have equal access to information and functionality, regardless of ability.</q>
            Utopia, <cite><a href="http://corpsp.utopia.com/pnd/mc/Accessibility/Pages/Home.aspx"><q>Accessibility at Utopia</q></a></cite>.
          </li>
        </ul>
        <p><mark id="hint-00" class="hint covert">The numeronym <em>a11y</em> (sometimes pronounced <q>A eleven Y</q>) represents this specific sense of <q>accessibility</q>.</mark> Using it in search engines for accessibility information focuses the results on UI accessibility.</p>
      </section>
      <section id="word" class="section-quiz"></section>
      <section>
        <header>
          <h2>Accessibility and <q>usability</q></h2>
        </header>
        <p>How does accessibility relate to usability?</p>
        <p><a href="https://www.iso.org/obp/ui/#iso:std:iso:9241:-11:ed-2:v1:en">One international standard</a></cite> (<q>Ergonomics of human-system interaction</q>) gives formal definitions for both terms:</p>
        <dl>
          <dt><dfn>usability</dfn></dt>
          <dd>extent to which a system, product or service can be used by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use</dd>
          <dt><dfn>accessibility</dfn></dt>
          <dd>extent to which products, systems, services, environments and facilities can be used by people from a population with the widest range of user needs, characteristics and capabilities to achieve identified goals in identified contexts of use</dd>
        </dl>
        <p>The emphases differ, but they have much in common.</p>
        <p>An informal discussion, easier to understand, says that <mark id="hint-01" class="hint covert">usability deals with the general user experience with UIs, while accessibility deals with how UIs may discriminate, giving people with disabilities an inferior experience.</mark>
        </blockquote>
        <p>Web Accessibility Initiative, <cite><a href="https://www.w3.org/WAI/fundamentals/accessibility-usability-inclusion/">Accessibility, Usability, and Inclusion</a></cite>.</p>
      </section>
      <section id="usability" class="section-quiz"></section>
      <section>
        <header>
          <h2>Accessibility and <q>disability</q></h2>
        </header>
        <p>How does accessibility relate to disability?</p>
        <p>The meaning of <q>disability</q>, and even whether the word is appropriate, are controversial. The <mark id="hint-02" class="hint covert"><cite><a href="https://www.un.org/development/desa/disabilities/convention-on-the-rights-of-persons-with-disabilities/preamble.html">Convention on the Rights of Persons with Disabilities</a></cite> leaves <q>disability</q> undefined, calling it <q>an evolving concept</q>.</mark></p>
        <p>But <mark id="hint-03" class="hint covert"><q>disability</q> is an important term for us. It appears in most of the above-quoted definitions of <q>accessibility</q></mark>, and <mark id="hint-04" class="hint covert">laws protecting people with disabilities are often interpreted to require accessibility.</mark></p>
        <p>Here are a few facts about disability that it is useful for developers to know:</p>
        <ul>
          <li>Accessible UIs help with limitations in several domains, including <mark id="hint-05" class="hint covert">vision, hearing, speech, mobility, cognition, and sensitivity</mark>.</li>
          <li>Accessible UIs help <mark id="hint-06" class="hint covert">not only with long-term, but also with temporary and situational, disabilities</mark>, such as those caused by injuries and difficult use situations.</li>
          <li>Accessible UIs help not only with profound, but also with mild and gradual, disabilities, including those that creep up on almost everybody with advancing age.</li>
          <li>Therefore, while authorities assert that <a href="https://www.who.int/news-room/fact-sheets/detail/disability-and-health">about a billion persons in the world (about 15% to 20%) have disabilities</a>, accessible UIs benefit a much larger fraction of users.</li>
        </ul>
        <p>So, almost anybody can benefit from accessible features in your UIs. If you space buttons apart, you help not only users with tremors, but also bus riders. If you distinguish items by more than color, you help not only users with color vision deficiency (<q>color blindness</q>), but also anybody viewing your interface in insufficient or excessive ambient light or at an acute angle. If you caption audio content, you help not only users who cannot hear, but also patrons in library reading rooms. If you give users plenty of time to complete transactions, you help not only users who read slowly, but also multi-taskers.</p>
      </section>
      <section id="disability" class="section-quiz"></section>
    </main>
  </body>
</html>

==> mod/tablist/style.css <==
li[role=tab] {
  margin: 0 0.25rem;
  padding: 0.25rem 0.25rem 1rem 0.25rem;
  border: solid 3px #a3a3a3;
  border-radius: 0.5rem 0.5rem 0 0;
  writing-mode: vertical-rl;
  line-height: 100%;
  cursor: pointer;
  font-weight: bold;
}
li[role=tab][aria-selected=false] {
  height: 7.5rem;
}
li[role=tab][aria-selected=true] {
  height: 8rem;
  padding-bottom: 1.5rem;
  border-bottom-width: 0;
  background-color: #dce199;
}
[role=tabpanel] {
  margin-top: 0 !important;
  padding: 0.25rem;
  background-color: #dce199;
}
[role=tablist] {
  display: flex;
  margin-bottom: 0;
  padding-bottom: 0;
  padding-left: 0;
  list-style-type: none;
}
==> mod/atechtest/script.js <==
// Objects
quizzes = {
  who: {
    type: 'c1',
    question: 'What accessibility testing with assistive technologies are developers at Utopia normally expected to perform?',
    answers: [
      'none',
      'basic',
      'advanced',
      'basic and advanced',
      'all'
    ],
    correct: new Set(['basic']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  when: {
    type: 'c1',
    question: 'Accessibility testing with assistive technologies is normally done',
    answers: [
      'before automated testing',
      'during automated testing',
      'after automated testing'
    ],
    correct: new Set(['after automated testing']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  which: {
    type: 'cn',
    question: 'Which assistive technologies convert UIs to non-visual interfaces?',
    answers: [
      'screen readers',
      'magnifiers',
      'contrast enhancers'
    ],
    correct: new Set(['screen readers']),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  whatsr: {
    type: 'cn',
    question: 'Which screen readers are built into operating systems?',
    answers: [
      'Narrator',
      'NVDA',
      'JAWS',
      'VoiceOver',
      'TalkBack'
    ],
    correct: new Set([
      'Narrator',
      'VoiceOver',
      'TalkBack'
    ]),
    hints: ['hint-04'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  first: {
    type: 'c1',
    question: 'How does a screen reader announce the <code>h6</code> element on the image example page?',
    answers: [
      'It says nothing.',
      'It announces a level-6 heading but omits the accessible name because it is not a real heading.',
      'It announces a level-6 heading, including its accessible name.',
      'It corrects the level to 3 and omits the accessible name.',
      'It corrects the level to 3 and includes the accessible name.'
    ],
    correct: new Set([
      'It announces a level-6 heading, including its accessible name.'
    ]),
    hints: [
      'hint-05',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  retest: {
    type: 'cn',
    question: 'Which issues on the image example page could you discover only by testing with screen readers?',
    answers: [
      'the gap in heading levels',
      'the absence of a <code>main</code> element',
      'the existence of content that is not in any landmark',
      'an informative image with an empty <code>alt</code> attribute',
      'a heading element containing text that is not a real heading',
      'misclassification by Narrator of adjacent text as part of an image&rsquo;s accessible name'
    ],
    correct: new Set([
      'misclassification by Narrator of adjacent text as part of an image&rsquo;s accessible name'
    ]),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  mag: {
    type: 't1',
    question: 'Using the developer tools, determine the maximum font-size magnification (where 100% = medium) offered by Chrome&rsquo;s font-size setting.',
    width: 4,
    postLine: '%',
    correct: new Set(['150']),
    hints: ['hint-09'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/ats/script.js <==
// Objects
quizzes = {
  ats: {
    type: 'cn',
    question: 'Which of these are assistive technologies?',
    answers: [
      'operating systems',
      'browsers',
      'email clients',
      'converters of eye gazes to trackpad gestures',
      'screen readers',
      'video players',
      'braille output devices',
      'easy-to-see buttons on forms'
    ],
    correct: new Set([
      'converters of eye gazes to trackpad gestures',
      'screen readers',
      'braille output devices'
    ]),
    hints: [
      'hint-00'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/axe/script.js <==
// Objects
quizzes = {
  axe: {
    type: 'cn',
    question: 'If you analyze the form example page, which issues does axe report?',
    answers: [
      'Form elements must have labels',
      'Document must have one main landmark',
      'Page must contain a level-one heading',
      'All page content must be contained by landmarks',
      'Radio buttons must be grouped into a fieldset'
    ],
    correct: new Set([
      'Form elements must have labels',
      'Document must have one main landmark',
      'Page must contain a level-one heading',
      'All page content must be contained by landmarks'
    ]),
    hints: [
      'hint-00',
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/better/script.js <==
// Objects
quizzes = {
  contrast: {
    type: 'cn',
    question: 'Which changes, alone, would make the equal-employment statement easier to read?',
    answers: [
      'making the font lighter',
      'making the font darker',
      'making the background lighter',
      'making the background darker',
      'making the font larger',
      'making the font smaller'
    ],
    correct: new Set([
      'making the font darker',
      'making the font larger'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  formbutton: {
    type: 'cn',
    question: 'What explanations for the cancelation dialog&rsquo;s <q>YES</q> button can assistive technologies recognize?',
    answers: [
      '<q>YES</q>',
      '<q>Are you sure?</q>',
      '<q>By cenceling this transaction, all the information you&rsquo;ve entered will be deleted.</q>',
      '<q>Click <strong>Yes</strong> to cancel this transaction.</strong></q>'
    ],
    correct: new Set(['<q>YES</q>']),
    hints: [
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  graph: {
    type: 'cn',
    question: 'If you cannot distinguish colors, which of these questions can you answer by inspecting the 5-fund graph?',
    answers: [
      'Do the data span 10 years or 10 days?',
      'How many of the funds lost value during the times shown for them?',
      'During the time shown, did the Global ex-US Real Est ETF gain more value than the Total Intl Stock ETF?',
      'On what date had a $10,000 investment in the FTSE AW ex-US Sm-Cap ETF grown to $22,113.33?',
      'Did an investment in the Total World Stock ETF quadruple during the time shown?'
    ],
    correct: new Set([
      'How many of the funds lost value during the times shown for them?',
      'Did an investment in the Total World Stock ETF quadruple during the time shown?'
    ]),
    hints: [
      'hint-03',
      'hint-04',
      'hint-05',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  priority: {
    type: 'c1',
    question: 'Experts advise that UIs should be made accessible',
    answers: [
      'only after complaints are received',
      'in production but not during testing',
      'when being converted from designs to code, but not before',
      'starting when they are first being planned'
    ],
    correct: new Set(['starting when they are first being planned']),
    hints: [
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/cctest/script.js <==
// Objects
quizzes = {};

==> mod/devtool/script.js <==
// Objects
quizzes = {
  dtnav: {
    type: 'cn',
    question: 'Which facts are true about the word <q>Prerequisites</q> on this page?',
    answers: [
      'It is in an <code>h2</code> element',
      'Its element is inside a <code>header</code> element',
      'Its element is inside a <code>nav</code> element',
      'Its font size is 1.5em',
      'Its font size is 2rem',
      'Its font size is 21px',
      'Its top and bottom padding are identical'
    ],
    correct: new Set([
      'It is in an <code>h2</code> element',
      'Its element is inside a <code>header</code> element',
      'Its font size is 2rem',
      'Its top and bottom padding are identical'
    ]),
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/embed/script.js <==
// Objects
quizzes = {
  what: {
    type: 'cn',
    question: 'In embedding, which of these are true?',
    answers: [
      'The host always controls the behavior of the guest',
      'The guest always controls the behavior of the host',
      'The host never controls the behavior of the guest',
      'The guest never controls the behavior of the host'
    ],
    correct: new Set([]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  versus: {
    type: 'cn',
    question: 'Which of these situations are more true for linking than for embedding?',
    answers: [
      'simplicity of content',
      'exposure to risk of clickjacking',
      'responsibility for what another author wrote',
      'risk that the user cannot find a way back to your page'
    ],
    correct: new Set([
      'simplicity of content',
      'risk that the user cannot find a way back to your page'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  mechanism: {
    type: 'c1',
    question: 'When do Utopia web pages that embed videos do it in 2 stages, first embedding an HTML document with <code>iframe</code> and then embedding the video in the <code>iframe</code> with <code>video</code>?',
    answers: [
      'never',
      'sometimes',
      'always'
    ],
    correct: new Set(['sometimes']),
    hints: [
      'hint-04',
      'hint-05'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  iframe: {
    type: 'cn',
    question: 'If you put two <code>iframe</code> elements onto the same page, you make the page more accessible by',
    answers: [
      'giving each <code>iframe</code> element a <code>title</code> attribute with a different value',
      'ensuring that each embedded HTML document has a distinct <code>guest</code> value',
      'making the embedded HTML documents also accessible',
      'locating the <code>iframe</code> elements far apart'
    ],
    correct: new Set([
      'giving each <code>iframe</code> element a <code>title</code> attribute with a different value',
      'making the embedded HTML documents also accessible'
    ]),
    hints: [
      'hint-06',
      'hint-07'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/error/script.js <==
// Objects
quizzes = {
  simple: {
    type: 'cn',
    question: 'Which of these techniques should make the error message <q>Sorry, this amount is less than the minimum $50,000 to buy Admiral Shares of this fund.</q> never normally appear?',
    answers: [
      'Display the error message immediately after the input.',
      'Give the error-message container an <code>aria-live="polite"</code> attribute.',
      'Give the error-message container an <code>aria-live="assertive"</code> attribute.',
      'Put the error-message container into focus after the error.',
      'Ask how much the user wants to pay first, then offer the applicable options.',
      'Ask whether the user wants Admiral Shares first, then set the applicable lower limit on the money amount.'
    ],
    correct: new Set([
      'Ask how much the user wants to pay first, then offer the applicable options.',
      'Ask whether the user wants Admiral Shares first, then set the applicable lower limit on the money amount.'
    ]),
    hints: [
      'hint-00',
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  complex: {
    type: 'cn',
    question: 'Which of the described approaches leave the <code>tabindex</code> attribute unchanged?',
    answers: [
      'summary',
      'aggregate',
      'helper-form'
    ],
    correct: new Set(['helper-form']),
    hints: [
      'hint-03',
      'hint-04',
      'hint-05',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  aria: {
    type: 't1',
    question: 'Enter what is missing.',
    preBlock: [
      '<p id="tickerlabel">Ticker symbol</p>',
      '<input',
      'id="ticker"',
      'name="ticker"',
      'size="6"',
      'maxlength="6"',
      'pattern="[A-Z]{1,6}"',
      'aria-labelledby="tickerlabel tickererror"'
    ],
    width: 50,
    postBlock: [
      '>',
      '<p id="tickererror">No such ticker symbol. Try again.</p>'
    ],
    test: /^ *aria-invalid *= *(['"])true\1 *$/,
    hints: ['hint-07'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/form/nav.js <==
// Handlers
const toggleHandler = event => {
  const target = event.target;
  if (target.tagName === 'BUTTON' || (
      target.tagName === 'LABEL' && target.parentElement.tagName === 'BUTTON'
  )) {
    const list = event.currentTarget;
    const togglees = list.getElementsByClassName('togglable');
    for (let i = 0; i < togglees.length; i++) {
      const togglee = togglees.item(i);
      if (togglee.classList.contains('covert')) {
        togglee.classList.replace('covert', 'overt');
      }
      else {
        togglee.classList.replace('overt', 'covert');
      }
    }
  }
};
// Listeners
const awaitToggle = () => {
  const toggleLists = document.body.getElementsByClassName('toggleList');
  for (let i = 0; i < toggleLists.length; i++) {
    toggleLists.item(i).addEventListener('click', toggleHandler);
  }
};
// Functions to be executed on page load.
document.addEventListener('DOMContentLoaded', awaitToggle);

==> mod/form/script.js <==
// Objects
quizzes = {
  intro: {
    type: 't1',
    question: 'A checkbox is a kind of',
    width: 25,
    correct: new Set([
      'control',
      'input'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  semantics: {
    type: 'cn',
    question: 'Semantic markup of forms',
    answers: [
      'reveals whether one control is above or below another',
      'lets a user know what activating a control would do',
      'makes forms take less space on a page',
      'makes user errors impossible',
      'associates error messages with the controls they are about',
      'specifies which controls are grouped with each other'
    ],
    correct: new Set([
      'lets a user know what activating a control would do',
      'associates error messages with the controls they are about',
      'specifies which controls are grouped with each other'
    ]),
    hints: [
      'hint-01',
      'hint-02',
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  groups: {
    type: 't1',
    question: 'An accessible name for a group of form input is the text content of an HTML5',
    width: 25,
    postLine: [' element.'],
    correct: new Set(['legend']),
    hints: [
      'hint-05',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  naming: {
    type: 'cn',
    question: 'A layout that places an explanatory text next to only the control that it belongs to',
    answers: [
      'helps assistive technologies guess what it explains',
      'ensures assistive technologies report what it explains',
      'helps users understand by sight what it explains',
      'eliminates the need for HTML5 code to associate it with its control'
    ],
    correct: new Set([
      'helps assistive technologies guess what it explains',
      'helps users understand by sight what it explains'
    ]),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  inputbasics: {
    type: 'cn',
    question: 'If a user clicks the accessible name of a radio button, which things happen?',
    answers: [
      'The name flashes.',
      'The name gets the focus outline.',
      'The name and the button together get the focus outline.',
      'The button gets the focus outline.',
      'The button&rsquo;s state becomes or remains checked.',
      'The button is toggled into the opposite of its current state.',
      'Any other checked button in the same group becomes unchecked.'
    ],
    correct: new Set([
      'The button gets the focus outline.',
      'The button&rsquo;s state becomes or remains checked.',
      'Any other checked button in the same group becomes unchecked.'
    ]),
    hints: [
      'hint-09',
      'hint-10'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  inputmechanisms: {
    type: 't1',
    question: 'What mechanism of accessible naming requires the text strings in an element&rsquo;s name to be immediately before and/or after the element? ',
    width: 25,
    postLine: [' labeling'],
    correct: new Set(['implicit']),
    hints: ['hint-11'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  inputimplicit: {
    type: 't1',
    question: 'Correct this implicit labeling.',
    width: 75,
    max: 90,
    init: '<input type="checkbox" name="fund" value="VMVFX"></input><label>VMVFX</label>',
    correct: new Set([
      '<label><input type="checkbox" name="fund" value="VMVFX">VMVFX</label>'
    ]),
    hints: ['hint-12'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  inputexplicit: {
    type: 't1',
    question: 'Correct this explicit labeling.',
    width: 60,
    init: '<label id="scode">Secret code</label>',
    postBlock: ['<input type="password" id="scode" name="scode">'],
    correct: new Set(['<label for="scode">Secret code</label>']),
    hints: ['hint-13'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  inputshared: {
    type: 't1',
    question: 'Make <q>Email address: Home</q> the accessible name of this input.',
    width: 30,
    preBlock: [
      '<h4 id="home">Home</h4>',
      '<p id="email">Email address:</p>',
      '<p>'
    ],
    preLine: '<input type="email" name="hemail" ',
    postLine: '>',
    postBlock: ['</p>'],
    correct: new Set(['aria-labelledby="email home"']),
    hints: ['hint-14'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  buttonbasic: {
    type: 'cn',
    question: 'If you want a text string located immediately before a button to be the accessible name of (and only of) that button, you can use',
    answers: [
      'content naming',
      'implicit labeling',
      'explicit labeling',
      'shared labeling'
    ],
    correct: new Set([
      'implicit labeling',
      'explicit labeling',
      'shared labeling'
    ]),
    hints: [
      'hint-15',
      'hint-16',
      'hint-17'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  content: {
    type: 't1',
    question: 'Correct this code to name the button properly.',
    width: 60,
    init: '<button title="Confirm purchase">',
    correct: new Set(['<button>Confirm purchase</button>']),
    hints: [
      'hint-18',
      'hint-19'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  buttonimplicit: {
    type: 't1',
    question: 'Correct this implicit labeling to make <q>Preview Order No. 453873</q> the accessible name of the button without changing the order of the text strings.',
    width: 70,
    init: '<label>Preview</label> <button>Submit</button> <label>Order No. 453873</label>',
    correct: new Set([
      '<label>Preview <button>Submit</button> Order No. 453873</label>',
      '<label>Preview<button>Submit</button> Order No. 453873</label>',
      '<label>Preview <button>Submit</button>Order No. 453873</label>',
      '<label>Preview<button>Submit</button>Order No. 453873</label>'
    ]),
    hints: [
      'hint-20',
      'hint-21'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  buttonexplicit: {
    type: 't1',
    question: 'What is the accessible name of this <code>button</code> element?<br>&lt;label for="cancel"&gt;You may cancel this purchase by clicking this button.&lt;/label&gt;<br>&lt;button id="cancel"&gt;Cancel purchase!&lt;/button&gt;',
    width: 70,
    correct: new Set([
      'You may cancel this purchase by clicking this button.'
    ]),
    hints: [
      'hint-22',
      'hint-23'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  buttonshared: {
    type: 't1',
    question: 'Correct this code to make <q>Are you an accredited investor? Yes</q> the accessible name of the button.',
    width: 70,
    preBlock: ['<p id="accredited">Are you an accredited investor?</p>'],
    init: '<button id="yes">Yes</button>',
    correct: new Set([
      '<button id="yes" aria-labelledby="accredited yes">Yes</button>',
      '<button aria-labelledby="accredited yes" id="yes">Yes</button>'
    ]),
    hints: [
      'hint-24',
      'hint-25',
      'hint-26'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  buttonrisk: {
    type: 'cn',
    question: 'When a button irreversably executes an important financial decision, which mechanisms of accessible naming are low-risk?',
    answers: [
      'content naming',
      'implicit labeling',
      'explicit labeling',
      'shared labeling'
    ],
    correct: new Set([
      'content naming',
      'shared labeling'
    ]),
    hints: ['hint-27'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  describe: {
    type: 't1',
    question: 'Make the <q>Caution:</q> and <q>Instructions:</q> paragraphs (in that order) the description of this input.',
    width: 40,
    preBlock: ['<p id="instr">Instructions: Enter the full name of your supervisor.</p>', '<p><label>', 'Supervisor'],
    preLine: '<input type="text"',
    postLine: '>',
    postBlock: ['</label></p>', '<p id="warn">', 'Caution: By naming a supervisor on this form, you are authorizing Utopia to contact the named person and authorizing that person to provide information to Utopia about your previous employment.', '</p>'],
    correct: new Set(['aria-describedby="warn instr"']),
    hints: [
      'hint-28',
      'hint-29'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  type: {
    type: 't1',
    question: 'What <code>autocomplete</code> value represents a user&rsquo;s ZIP code?.',
    width: 40,
    correct: new Set([
      'postal-code',
      '"postal-code"'
    ]),
    hints: ['hint-30'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/here/script.js <==
// Objects
quizzes = {
  unique: {
    type: 'cn',
    question: 'Which locations can be potential answers to the question &ldquo;Where am I?&rdquo;?',
    answers: [
      'location of focus',
      'location of page',
      'location of title',
      'location of hover',
      'location of back button',
      'location of activation',
      'location of next page',
      'locations of selected items',
      'locations of checked items'
    ],
    correct: new Set([
      'location of focus',
      'location of hover',
      'location of activation',
      'locations of selected items',
      'locations of checked items'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  hover: {
    type: 't1',
    question: 'Information displayed when a user hovers must not disappear when the user hovers over that information, according to WCAG success criterion',
    width: 30,
    correct: new Set(['1.4.13']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  focusbasic: {
    type: 't1',
    question: 'Make this ruleset place focus indicators 3 pixels away from their elements.',
    width: 20,
    preBlock: [
      '*:focus {',
      'outline: solid 3px blue;'
    ],
    postBlock: ['}'],
    test: /^ *outline-offset *: *3px *; *$/,
    hints: ['hint-03'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  focuskbd: {
    type: 'cn',
    question: 'If a date input is in focus and its month field is selected, which keys would change the month from March to February?',
    answers: [
      '<kbd>&uparrow;</kbd>',
      '<kbd>&downarrow;</kbd>',
      '<kbd>&leftarrow;</kbd>',
      '<kbd>&rightarrow;</kbd>',
      '<kbd>SPACE</kbd>',
      '<kbd>SHIFT</kbd>-<kbd>SPACE</kbd>',
      '<kbd>ENTER</kbd>',
      '<kbd>SHIFT</kbd>-<kbd>ENTER</kbd>',
      '<kbd>TAB</kbd>',
      '<kbd>SHIFT</kbd>-<kbd>TAB</kbd>'
    ],
    correct: new Set(['<kbd>&downarrow;</kbd>']),
    hints: ['hint-04'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  implicit: {
    type: 'c1',
    question: 'If a form contains an <q>Email</q> <code>email</code>-type input and a <q>Telephone</q> <code>tel</code>-type input, when will pressing <kbd>ENTER</kbd> submit the form?',
    answers: [
      'never',
      'only when the email input is in focus',
      'only when the telephone input is in focus',
      'when either of those inputs is in focus',
      'when either of those inputs is in focus if there is a submit button',
      'when either of those inputs is in focus if there is no submit button',
      'when both inputs have non-blank values, regardless of focus'
    ],
    correct: new Set([
      'when either of those inputs is in focus if there is a submit button'
    ]),
    hints: ['hint-05'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  custom: {
    type: 't1',
    question: 'Make it possible for a user to put this image into focus with the <kbd>TAB</kbd> key.',
    width: 40,
    preBlock: [
      '<img',
      'src="../static/images/bogle.jpg"',
      'alt="John C. Bogle"'
    ],
    postBlock: ['>'],
    test: /^ *tabindex *= *(["']?)0\1 *$/,
    hints: [
      'hint-02',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  distinct: {
    type: 'cn',
    question: 'When hovering and focusing have different effects, the accessible options include',
    answers: [
      'letting the browser and assistive technologies handle the indicators',
      'defining identical hover an focus indicators',
      'defining conflicting hover and focus indicators',
      'defining compatible but different hover and focus indicators',
      'leaving hover without any indicator',
      'leaving focus without any indicator'
    ],
    correct: new Set([
      'letting the browser and assistive technologies handle the indicators',
      'defining compatible but different hover and focus indicators'
    ]),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/inputval/nav.js <==
// Messages
const msgs = {};
msgs.contribRule = 'Only digits and <q>.</q> permitted';
msgs.fewerNeeded = n => `${n} too many characters`;
msgs.moreAllowed = n =>
  n === 1 ? '1 more character allowed' : `${n} more characters allowed`;
msgs.moreNeeded = n =>
  n === 1 ? '1 more character required' : `${n} more characters required`;
msgs.nan = n => `${n} is not a number`;
msgs.ok = n => `${n} is OK`;
msgs.onePoint = 'Only one decimal point permitted';
msgs.tooPrecise = n => `${n} has too many decimal places`;
msgs.tooSmall = n => `${n} is not enough`;
msgs.tooBig = n => `${n} is too large`;
msgs.zipRule = 'Only digits and <q>-</q> permitted';
msgs.zipPuncRule = string =>
  `${string} does not have the format <kbd>00000-0000</kbd>`;
msgs.zipRawShort = string => `${string} has fewer than 5 digits`;
msgs.zipRawLong = string => `${string} has more than 9 digits`;
msgs.zipRawBetween = string => `${string} does not have 5 or 9 digits`;
// Functions
const createRMDLimits = () => {
  const tomorrow = new Date();
  const yearEnd = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  yearEnd.setMonth(11, 31);
  const rmdinput = document.getElementById('rmddate');
  rmdinput.min = tomorrow.toISOString().slice(0, 10);
  rmdinput.max = yearEnd.toISOString().slice(0, 10);
};
// Handlers
const goalInputHandler = (event, lengthAdvisor, lengthMin, lengthMax) => {
  let advice;
  let isInvalid = false;
  const input = event.target;
  const currentLength = input.value.length;
  if (currentLength === 0) {
    advice = '';
    isInvalid = false;
  }
  else if (currentLength < lengthMin) {
    advice = msgs.moreNeeded(lengthMin - currentLength);
    isInvalid = true;
  }
  else if (currentLength <= lengthMax) {
    advice = msgs.moreAllowed(lengthMax - currentLength);
    isInvalid = false;
  }
  else if (currentLength > lengthMax) {
    advice = msgs.fewerNeeded(currentLength - lengthMax);
    isInvalid = true;
  }
  lengthAdvisor.innerHTML = advice;
  input.setAttribute('aria-invalid', isInvalid);
};
const contribInputHandler = (
  event, magAdvisor, magMin, magMax, magStepReciprocal
) => {
  let advice;
  let isInvalid = false;
  const input = event.target;
  const stepReciprocal = Number.parseInt(magStepReciprocal);
  const currentMagString = input.value;
  const currentMag = Number.parseFloat(currentMagString);
  // Delete any invalid character from the input value.
  if (/[^.\d]/.test(currentMagString)) {
    input.value = currentMagString.replace(/[^.\d]/g, '');
    advice = msgs.contribRule;
  }
  else if (/\..*\./.test(currentMagString)) {
    input.value = currentMagString.replace(/\.(?=[^.]*$)/, '');
    advice = msgs.onePoint;
  }
  else if (currentMagString.length === 0) {
    advice = '';
    isInvalid = false;
  }
  else if (Number.isNaN(currentMag)) {
    advice = msgs.nan(currentMagString);
    isInvalid = true;
  }
  else if (
    Math.round(stepReciprocal * currentMag) !== stepReciprocal * currentMag
  ) {
    advice = msgs.tooPrecise(currentMag);
    isInvalid = true;
  }
  else if (currentMag < magMin) {
    advice = msgs.tooSmall(currentMag);
    isInvalid = true;
  }
  else if (currentMag <= magMax) {
    advice = msgs.ok(currentMag);
    isInvalid = false;
  }
  else if (currentMag > magMax) {
    advice = msgs.tooBig(currentMag);
    isInvalid = true;
  }
  magAdvisor.innerHTML = advice;
  input.setAttribute('aria-invalid', isInvalid);
};
const ZIPInputHandler = (event, ZIPAdvisor) => {
  let advice;
  let isInvalid = false;
  const input = event.target;
  const currentString = input.value;
  // Delete any entered invalid character from the input value.
  if (/[^-\d]/.test(currentString)) {
    input.value = currentString.replace(/[^-\d]/g, '');
    advice = msgs.zipRule;
  }
  else if (currentString.length === 0) {
    advice = '';
    isInvalid = false;
  }
  else if (currentString.includes('-')) {
    if (/^\d{5}-\d{4}$/.test(currentString)) {
      advice = msgs.ok(currentString);
      isInvalid = false;
    }
    else {
      advice = msgs.zipPuncRule(currentString);
      isInvalid = true;
    }
  }
  else {
    const zipLength = currentString.length;
    if (zipLength === 5 || zipLength === 9) {
      advice = msgs.ok(currentString);
      isInvalid = false;
    }
    else if (zipLength < 5) {
      advice = msgs.zipRawShort(currentString);
      isInvalid = true;
    }
    else if (zipLength > 9) {
      advice = msgs.zipRawLong(currentString);
      isInvalid = true;
    }
    else {
      advice = msgs.zipRawBetween(currentString);
      isInvalid = true;
    }
  }
  ZIPAdvisor.innerHTML = advice;
  input.setAttribute('aria-invalid', isInvalid);
};
// Listeners
const createGoalListener = () => {
  const goalInput = document.getElementById('goals');
  const lengthMin = goalInput.dataset.minlength;
  const lengthMax = goalInput.dataset.maxlength;
  const lengthAdvisor = document.getElementById(
    goalInput.getAttribute('aria-controls')
  );
  // Listen for any change in the value of goalInput.
  goalInput.addEventListener('input', () => {
    goalInputHandler(event, lengthAdvisor, lengthMin, lengthMax);
  });
};
const createContribListener = () => {
  const contribInput = document.getElementById('contribpct');
  const magMin = contribInput.dataset.min;
  const magMax = contribInput.dataset.max;
  const magStepReciprocal = contribInput.dataset.stepreciprocal;
  const magAdvisor = document.getElementById(
    contribInput.getAttribute('aria-controls')
  );
  // Listen for any change in the value of contribInput.
  contribInput.addEventListener('input', () => {
    contribInputHandler(
      event, magAdvisor, magMin, magMax, magStepReciprocal
    );
  });
};
const createZIPListener = () => {
  const ZIPInput = document.getElementById('zip');
  const ZIPAdvisor = document.getElementById(
    ZIPInput.getAttribute('aria-controls')
  );
  // Listen for any change in the value of ZIPInput.
  ZIPInput.addEventListener('input', () => {
    ZIPInputHandler(event, ZIPAdvisor);
  });
};
document.addEventListener(
  'DOMContentLoaded', createRMDLimits, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createGoalListener, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createContribListener, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createZIPListener, {
    once: true
  }
);

==> mod/inputval/script.js <==
// Objects
quizzes = {
  intro: {
    type: 'cn',
    question: 'Which of these checks fit the definition of <q>formal</q> input validation?',
    answers: [
      'The input consists of 5 digits.',
      'The client was an adult in that year.',
      'The input is the ticker symbol of an ETF.',
      'The client has owned that security for more than 60 days.',
      'The input has the format of an email address.'
    ],
    correct: new Set([
      'The input consists of 5 digits.',
      'The input has the format of an email address.'
    ]),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  lengthstd: {
    type: 't1',
    question: 'Make this element prohibit a string 8 characters or shorter.',
    preBlock: [
      '<input',
      'type="text"',
      'name="ssn"'
    ],
    width: 30,
    postBlock: ['>'],
    test: /^ *minlength *= *("|'|)9\1 *$/,
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  lengthcust: {
    type: 't1',
    question: 'In the <code>nav.js</code> code for the above example, what is the value returned by the function <code>messages.moreNeeded(7)</code>?',
    width: 50,
    correct: new Set(['7 more characters required']),
    hints: ['hint-03'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  magstd: {
    type: 't1',
    question: 'Complete this JavaScript statement to make a date input named <code>filingdate</code> require its value to be before the 16th day of April in 2026.',
    preLine: ['filingdate'],
    width: 50,
    postLine: [';'],
    tests: [
      /^ *\. *setAttribute *\( *(["'])max\1 *, *(["'])2026-04-15\2 *\) *$/,
      /^ *\. *max *= *(["'])2026-04-15\1 *$/
    ],
    hints: [
      'hint-04',
      'hint-05'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  magcust: {
    type: 'cn',
    question: 'If the above <code>input</code> element&rsquo;s <code>stepreciprocal</code>&rsquo;s value were changed from <code>10</code> to <code>100</code>, which numbers would be valid?',
    answers: [
      '352.77',
      '0',
      '11.95',
      '7.3',
      '40',
      '35.125',
      '29.9'
    ],
    correct: new Set([
      '0',
      '11.95',
      '7.3'
    ]),
    hints: [
      'hint-06',
      'hint-07'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  proto: {
    type: 'cn',
    question: 'Which of these email addresses satisfies the browser&rsquo;s validation?',
    answers: [
      'anything@nothing',
      'anything @ nothing',
      'user.@domain',
      '.user.@.domain.',
      'a@k.9'
    ],
    correct: new Set([
      'anything@nothing',
      'user.@domain',
      'a@k.9'
    ]),
    hints: [
      'hint-08',
      'hint-09',
      'hint-10'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  format: {
    type: 't1',
    question: 'Enter a string that would be valid if <code>pattern="V[A-Z]{3}X"</code>.',
    width: 20,
    test: /^V[A-Z]{3}X$/,
    hints: [
      'hint-11',
      'hint-12',
      'hint-13',
      'hint-14'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/intro/script.js <==
// Objects
quizzes = {
  hints: {
    type: 'cn',
    question: 'When you give an incorrect answer to a quiz and click the <q>Hint</q> button, what changes take place?',
    answers: [
      'A hint appears next to the <q>Hint</q> button',
      'A hint appears in a tooltip above the <q>Hint</q> button',
      'An alert dialog box containing a hint opens',
      'Hints in the module text become bold-faced',
      'Hints in the module become highlighted',
      'The focus moves to a hint in the module text, and it is outlined'
    ],
    correct: new Set([
      'Hints in the module text become bold-faced',
      'Hints in the module become highlighted',
      'The focus moves to a hint in the module text, and it is outlined'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  browsers: {
    type: 'cn',
    question: 'Which of the following modules have requirements satisfied by the Firefox browser?',
    answers: [
      'What Accessibility Means',
      'Assistive Technologies',
      'Accessible Colors',
      'Accessible Numeric Inputs'
    ],
    correct: new Set([
      'What Accessibility Means',
      'Assistive Technologies'
    ]),
    hints: [
      'hint-01',
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/lang/script.js <==
// Objects
quizzes = {
  alternatives: {
    type: 'cn',
    question: 'Which mechanisms for presentation of data work best via assistive technologies where the user cannot see the display?',
    answers: [
      'Table',
      'Graph',
      'Question form',
      'Written description of facts and patterns'
    ],
    correct: new Set([
      'Table',
      'Question form',
      'Written description of facts and patterns'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  when: {
    type: 't1',
    question: 'In a table of information about some funds, one cell contains the expense ratio of the Total Stock Market Index Fund. <q>Expense Ratio</q> would normally be found in a',
    width: 25,
    correct: new Set(['column header']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  avoid: {
    type: 'cn',
    question: 'Mechanisms that are effective for making displays of data responsive to window widths include',
    answers: [
      'HTML <code>table</code>',
      'CSS <code>display: grid</code>',
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ],
    correct: new Set([
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  org: {
    type: 't1',
    question: 'In the example of an accessible table, the footnote row has been given a <code>class</code> attribute, whose value is',
    width: 20,
    correct: new Set([
      'note',
      '"note"'
    ]),
    hints: [
      'hint-04',
      'hint-05'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  header: {
    type: 'c1',
    question: 'Which node of the Accessibility Tree contains a description of the relationships between headers and other cells?',
    answers: [
      'table',
      'thead',
      'header',
      'cell',
      'th',
      'td'
    ],
    correct: new Set(['table']),
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  classify: {
    type: 'c1',
    question: 'What kind of header is <q>Investor Shares</q> for <q>Below-investment-grade</q>?',
    answers: [
      'a direct header',
      'an indirect header',
      'no header'
    ],
    correct: new Set(['no header']),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  ambiguity: {
    type: 't1',
    question: 'What role does the Accessibility Tree assign to <q>Investor Shares</q> in the <q>[better] Utopia active bond funds</q> table?',
    width: 25,
    correct: new Set(['rowheader']),
    hints: [
      'hint-09',
      'hint-10',
      'hint-11'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  disambiguate: {
    type: 'cn',
    question: 'Which of these attribute assignments <strong>could</strong> help an AT tell a user that VGCAX is taxable?',
    answers: [
      'headers="r21 c5"',
      'headers="r21 c3"',
      'scope="colgroup"',
      'expenseRatio="0.25"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'class="tbodyhead"',
      'id="r0"'
    ],
    correct: new Set([
      'headers="r21 c5"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'id="r0"'
    ]),
    hints: [
      'hint-12',
      'hint-13',
      'hint-14'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/layer/nav.js <==
// Variables
const msgs = {
  confirmed: 'Confirmed',
  canceled: 'Canceled'
};
// Functions
const clean = (rawText, dirtyPattern, lengthLimit) => {
  const cleanText = rawText.replace(RegExp(dirtyPattern, 'g'), '');
  if (lengthLimit) {
    return cleanText.slice(0, lengthLimit);
  }
  else {
    return cleanText;
  }
};
// Handlers
const alertHandler = (event, trigger) => {
  const targetData = event.target.dataset;
  const text = targetData[trigger];
  if (text) {
    window.alert(text);
    const dest = targetData.dest;
    if (dest) {
      document.getElementById(dest).textContent = '';
    }
  }
};
const confirmHandler = event => {
  const target = event.target;
  const text = target.dataset.confirm;
  if (text) {
    const confirmation = window.confirm(text);
    const dest = document.getElementById(target.dataset.dest);
    if (dest) {
      dest.textContent = msgs[confirmation ? 'confirmed' : 'canceled'];
      dest.tabIndex = '0';
      dest.focus();
    }
  }
};
const promptHandler = event => {
  const targetData = event.target.dataset;
  const text = targetData.prompt;
  if (text) {
    const rawInput = window.prompt(text);
    if (rawInput) {
      const dest = document.getElementById(targetData.dest);
      if (dest) {
        let cleanInput = rawInput;
        if (targetData.dirty) {
          cleanInput = clean(rawInput, targetData.dirty, targetData.length);
        }
        if (cleanInput) {
          if (targetData.prefix) {
            cleanInput = `${targetData.prefix}${cleanInput}`;
          }
          dest.textContent = cleanInput;
          dest.focus();
        }
      }
    }
  }
};
// Listeners
const createClickAlertListeners = () => {
  const alertables = document.body.querySelectorAll('[data-clickalert]');
  for (let i = 0; i < alertables.length; i++) {
    alertables.item(i).addEventListener('click', () => {
      alertHandler(event, 'clickalert');
    });
  }
};
const createFocusAlertListeners = () => {
  const alertables = document.body.querySelectorAll('[data-focusalert]');
  for (let i = 0; i < alertables.length; i++) {
    alertables.item(i).addEventListener(
      'focusin', () => {
        alertHandler(event, 'focusalert');
      }, {
        once: true
      }
    );
  }
};
const createConfirmListeners = () => {
  const confirmables = document.body.querySelectorAll('[data-confirm]');
  for (let i = 0; i < confirmables.length; i++) {
    confirmables.item(i).addEventListener('click', confirmHandler);
  }
};
const createPromptListeners = () => {
  const promptables = document.body.querySelectorAll('[data-prompt]');
  for (let i = 0; i < promptables.length; i++) {
    promptables.item(i).addEventListener(
      'click', promptHandler
    );
  }
};
document.addEventListener(
  'DOMContentLoaded', createClickAlertListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createFocusAlertListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createConfirmListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createPromptListeners, {
    once: true
  }
);

==> mod/layer/script.js <==
// Objects
quizzes = {
  what: {
    type: 'cn',
    question: 'A layer',
    answers: [
      'covers the entire viewport',
      'covers part of the viewport',
      'allows the user to work on all parts of the page',
      'allows the user to work on only the visible parts of the page',
      'allows the user to work only on the layer itself',
      'is a temporary part of a page',
      'is a permanent part of a page'
    ],
    correct: new Set([
      'covers part of the viewport',
      'allows the user to work only on the layer itself',
      'is a temporary part of a page'
    ]),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  why: {
    type: 'cn',
    question: 'Modal dialogs with these titles are likely to cause problems for users with memory challenges:',
    answers: [
      '<q>Do you agree with the following terms?</q>',
      '<q>Please rate your investment experience on this scale:</q>',
      '<q>Proceed with the purchase at the price you specified?</q>',
      '<q>Have you received a prospectus for each security named on the form?</q>',
      '<q>Is the address you entered your residence?</q>',
      '<q>Please indicate the communications you wish to receive electronically:</q>'
    ],
    correct: new Set([
      '<q>Proceed with the purchase at the price you specified?</q>',
      '<q>Have you received a prospectus for each security named on the form?</q>',
      '<q>Is the address you entered your residence?</q>'
    ]),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  builtin: {
    type: 'cn',
    question: 'Modal dialogs, while open, are expected to:',
    answers: [
      'allow the user to navigate to anything still visible on the page',
      'allow the user to click anywhere on the page',
      'keep user navigation within themselves',
      'prevent the user from operating any control outside them',
      'remain invisible',
      'make everything else invisible'
    ],
    correct: new Set([
      'keep user navigation within themselves',
      'prevent the user from operating any control outside them'
    ]),
    hints: ['hint-03'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  custom: {
    type: 't1',
    question: 'Which <code>event</code> method does the <code>keyHandler</code> function of the custom-confirmation-dialog example call in order to determine whether the <kbd>SHIFT</kbd> key is engaged while the <kbd>TAB</kbd> key is pressed?',
    width: 30,
    correct: new Set([
      'getModifierState',
      'getModifierState()',
      "getModifierState('Shift')"
    ]),
    hints: ['hint-04'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/layout/script.js <==
// Objects
quizzes = {
  alternatives: {
    type: 'cn',
    question: 'Which mechanisms for presentation of data work best via assistive technologies where the user cannot see the display?',
    answers: [
      'Table',
      'Graph',
      'Question form',
      'Written description of facts and patterns'
    ],
    correct: new Set([
      'Table',
      'Question form',
      'Written description of facts and patterns'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  when: {
    type: 't1',
    question: 'In a table of information about some funds, one cell contains the expense ratio of the Total Stock Market Index Fund. <q>Expense Ratio</q> would normally be found in a',
    width: 25,
    correct: new Set(['column header']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  avoid: {
    type: 'cn',
    question: 'Mechanisms that are effective for making displays of data responsive to window widths include',
    answers: [
      'HTML <code>table</code>',
      'CSS <code>display: grid</code>',
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ],
    correct: new Set([
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  org: {
    type: 't1',
    question: 'In the example of an accessible table, the footnote row has been given a <code>class</code> attribute, whose value is',
    width: 20,
    correct: new Set([
      'note',
      '"note"'
    ]),
    hints: [
      'hint-04',
      'hint-05'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  header: {
    type: 'c1',
    question: 'Which node of the Accessibility Tree contains a description of the relationships between headers and other cells?',
    answers: [
      'table',
      'thead',
      'header',
      'cell',
      'th',
      'td'
    ],
    correct: new Set(['table']),
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  classify: {
    type: 'c1',
    question: 'What kind of header is <q>Investor Shares</q> for <q>Below-investment-grade</q>?',
    answers: [
      'a direct header',
      'an indirect header',
      'no header'
    ],
    correct: new Set(['no header']),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  ambiguity: {
    type: 't1',
    question: 'What role does the Accessibility Tree assign to <q>Investor Shares</q> in the <q>[better] Utopia active bond funds</q> table?',
    width: 25,
    correct: new Set(['rowheader']),
    hints: [
      'hint-09',
      'hint-10',
      'hint-11'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  disambiguate: {
    type: 'cn',
    question: 'Which of these attribute assignments <strong>could</strong> help an AT tell a user that VGCAX is taxable?',
    answers: [
      'headers="r21 c5"',
      'headers="r21 c3"',
      'scope="colgroup"',
      'expenseRatio="0.25"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'class="tbodyhead"',
      'id="r0"'
    ],
    correct: new Set([
      'headers="r21 c5"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'id="r0"'
    ]),
    hints: [
      'hint-12',
      'hint-13',
      'hint-14'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/link/script.js <==
// Objects
quizzes = {
  what: {
    type: 'c1',
    question: 'An element that, when clicked, performs a calculation and takes the user to another page where the result is displayed is, according to standard practice,',
    answers: [
      'a link',
      'a button',
      'a link or a button (equally acceptable)',
      'not legitimate'
    ],
    correct: new Set(['a button']),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  look: {
    type: 'cn',
    question: 'Which link style properties are applied automatically by browsers?',
    answers: [
      'bold font weight',
      'italic font style',
      'underlined',
      'reddish brown before being visited',
      'blue after being visited',
      'blue before being visited',
      'purple after being visited'
    ],
    correct: new Set([
      'underlined',
      'blue before being visited',
      'purple after being visited'
    ]),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  predict: {
    type: 't1',
    question: 'Make the effect of activating this link predictable.',
    preBlock: [
      '<p>',
      '<a',
      'id="reg"',
      'href="/confs/techtalk2019/reg"'
    ],
    width: 50,
    postBlock: [
      '>Register</a>',
      '<span id="fortt2019">for the Tech Talks 2019 conference!</span>',
      '</p>'
    ],
    test: /^ *aria-labelledby *= *(["'])reg +fortt2019\1 *$/,
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/magtest/script.js <==
// Objects
quizzes = {
  mag: {
    type: 't1',
    question: 'Using the developer tools, determine the maximum font-size magnification (where 100% = medium) offered by Chrome&rsquo;s font-size setting.',
    width: 4,
    postLine: '%',
    correct: new Set(['150']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/markupval/script.js <==
// Objects
quizzes = {
  intro: {
    type: 'c1',
    question: 'Web Content Accessibility Guidelines',
    answers: [
      'include all of the HTML validity requirements',
      'include some but not all HTML validity requirements',
      'are entirely distinct from the HTML validity requirements',
      'have been entirely incorporated into HTML'
    ],
    correct: new Set([
      'include some but not all HTML validity requirements'
    ]),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  w3c: {
    type: 'cn',
    question: 'When you check an <a href="../../gen/examples/zoom" target="_blank">example of size customization</a> with the W3C Markup Validation Service, it reports',
    answers: [
      'a missing page title',
      'an invalid character in the value of an <code>href</code> attribute',
      'an <code>li</code> element that isn&rsquo;t a child of a <code>ul</code> or <code>ol</code> element',
      'duplicate <code>id</code> values',
      '<code>section</code> elements without headings'
    ],
    correct: new Set([
      'an invalid character in the value of an <code>href</code> attribute',
      '<code>section</code> elements without headings'
    ]),
    hints: [
      'hint-02',
      'hint-03',
      'hint-04',
      'hint-05',
      'hint-06',
      'hint-07'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  webstorm: {
    type: 'cn',
    question: 'WebStorm&rsquo;s HTML validation',
    answers: [
      'is available only during code creation',
      'is available only for whole files of code',
      'works both while and after code is written',
      'is reliably more thorough than the W3C tool',
      'may miss some errors caught by the W3C tool',
      'eliminates the need to run axe'
    ],
    correct: new Set([
      'works both while and after code is written',
      'may miss some errors caught by the W3C tool'
    ]),
    hints: [
      'hint-08',
      'hint-09',
      'hint-10'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/norm/script.js <==
// Objects
quizzes = {
  industry: {
    type: 'c1',
    question: 'WCAG is developed under the auspices of',
    answers: [
      'U.S. Unit of Civil Rights',
      'United Nations',
      'W3C',
      'Western Corporate Accessibility Group',
      'Utopia'
    ],
    correct: new Set(['W3C']),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  law: {
    type: 'cn',
    question: 'The H&R Block lawsuit settlement required H&R Block websites and apps to conform to which levels of WCAG?',
    answers: [
      'A',
      'AA',
      'AAA',
      'AAAA'
    ],
    correct: new Set([
      'A',
      'AA'
    ]),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/org/script.js <==
// Objects
quizzes = {
  heading: {
    type: 't1',
    question: 'Correct this code:',
    width: 50,
    preBlock: ['<h1>Open an account</h1>'],
    init: '<h3>About you</h3>',
    correct: new Set(['<h2>About you</h2>']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/size/script.js <==
// Objects
quizzes = {
  text: {
    type: 't1',
    question: 'What computed font size is shown for the <code>span</code> element containing the <q>All investing is subject to risk</q> disclaimer on the <a href="https://institutional.utopia.com/VGApp/iip/institutional/csa/investments/aggregateviews/equity" target="_blank">institutional equity investments page</a>?',
    width: 15,
    correct: new Set([
      '13px',
      '13 pixels'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  control: {
    type: 't1',
    question: 'What is the height, as shown in a style declaration, of the <q>Run Simulation</q> button in the Retirement Nest Egg Calculator?',
    width: 15,
    correct: new Set([
      '44px',
      '44 pixels'
    ]),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  how: {
    type: 'cn',
    question: 'Which actions enlarge all of the content and adjust the text line breaks to fit the width, in Chrome on Windows?',
    answers: [
      '<kbd>ctrl</kbd>-<kbd>+</kbd>',
      '<kbd>ctrl</kbd>-<kbd>0</kbd>',
      'increasing the <q>zoom</q> setting',
      'using a pinch gesture',
      'using a spread gesture',
      'increasing the <q>Font size</q> setting'
    ],
    correct: new Set([
      '<kbd>ctrl</kbd>-<kbd>+</kbd>',
      'increasing the <q>zoom</q> setting'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  let: {
    type: 'cn',
    question: 'If a user zooms in to make everything 50% larger than the default scale, what should remain intact, according to WCAG 2.1?',
    answers: [
      'information',
      'functionality',
      'text size',
      'image size',
      'vertical-only scrolling',
      'relative positions of items'
    ],
    correct: new Set([
      'information',
      'functionality',
      'vertical-only scrolling'
    ]),
    hints: [
      'hint-04',
      'hint-05',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  browser: {
    type: 'cn',
    question: 'Users usually get the benefit of reflow when zooming in on a web page, except if they are on what kinds of device?',
    answers: [
      'Windows',
      'OS X',
      'Linux',
      'Android',
      'iOS'
    ],
    correct: new Set([
      'Android',
      'iOS'
    ]),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  strategy: {
    type: 'c1',
    question: 'To ensure reflow when a user zooms in on a mobile browser, your UI must',
    answers: [
      'control the height and width of every text container',
      'leave every text container without height restrictions',
      'let the user zoom with the spread gesture',
      'provide an on-page tool for the user to adjust sizes'
    ],
    correct: new Set([
      'provide an on-page tool for the user to adjust sizes',
    ]),
    hints: [
      'hint-09',
      'hint-10'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  textcontrol: {
    type: 'c1',
    question: 'When you set the font size to <q>Small</q> in Chrome, operating the text-size controls on the financial-advisor blog page changes',
    answers: [
      'nothing',
      'the size of all text',
      'the size of ordinary text but not headings',
      'the size of headings but not of ordinary text'
    ],
    correct: new Set(['the size of headings but not of ordinary text']),
    hints: [
      'hint-11',
      'hint-12',
      'hint-13',
      'hint-14'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  contentcontrol: {
    type: 't1',
    question: 'What is the size, as shown in the <q>Styles</q> pane, of the font of the size-control buttons on the size-customization example page?',
    width: 15,
    correct: new Set(['1rem']),
    hints: ['hint-15'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/space/script.js <==
// Objects
quizzes = {
  paraline: {
    type: 't1',
    question: 'The line height of the summary paragraphs in the middle column of the <a href="https://www.utopiainvestments.com.au/institutional/inst/investor-resources/research-commentary.html#?c=featured&sc=all">Utopia Australia research and commentary page</a> is',
    width: 20,
    correct: new Set([
      '19px',
      '19 pixels'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  input: {
    type: 't1',
    question: 'On the <q>Tell us about you</q> page, if you inspect the middle radio button&rsquo;s <code>input</code> element with the developer tools and expand its <code>margin</code> declaration, what do you find its bottom margin is set to?',
    width: 15,
    correct: new Set(['1px']),
    hints: [
      'hint-01',
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/srtest/script.js <==
quizzes = {
  whatsr: {
    type: 'cn',
    question: 'Which screen readers are built into operating systems?',
    answers: [
      'Narrator',
      'NVDA',
      'JAWS',
      'VoiceOver',
      'TalkBack'
    ],
    correct: new Set([
      'Narrator',
      'VoiceOver',
      'TalkBack'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  first: {
    type: 'c1',
    question: 'How does a screen reader announce the <code>h6</code> element on the image example page?',
    answers: [
      'It says nothing.',
      'It announces a level-6 heading but omits the accessible name because it is not a real heading.',
      'It announces a level-6 heading, including its accessible name.',
      'It corrects the level to 3 and omits the accessible name.',
      'It corrects the level to 3 and includes the accessible name.'
    ],
    correct: new Set([
      'It announces a level-6 heading, including its accessible name.'
    ]),
    hints: [
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  retest: {
    type: 'cn',
    question: 'Which issues on the image example page could you discover only by testing with screen readers?',
    answers: [
      'the gap in heading levels',
      'the absence of a <code>main</code> element',
      'the existence of content that is not in any landmark',
      'an informative image with an empty <code>alt</code> attribute',
      'a heading element containing text that is not a real heading',
      'misclassification by Narrator of adjacent text as part of an image&rsquo;s accessible name'
    ],
    correct: new Set([
      'misclassification by Narrator of adjacent text as part of an image&rsquo;s accessible name'
    ]),
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/stake/script.js <==
// Objects
quizzes = {
  client: {
    type: 'c1',
    question: 'Utopia&rsquo;s claim about UI accessibility is that',
    answers: [
      'it helps all investors achieve their objectives',
      'it keeps costs low',
      'shareholders should have access to proxy ballots',
      'it&rsquo;s the most modern style of UI development',
      'access control is critical for information security',
      'our buildings should be wheelchair-friendly'
    ],
    correct: new Set([
      'it helps all investors achieve their objectives'
    ]),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  crew: {
    type: 'cn',
    question: 'Which accessible UIs support Utopia&rsquo;s mission?',
    answers: [
      'Public-facing UIs',
      'Client-facing UIs',
      'Crew-facing UIs'
    ],
    correct: new Set([
      'Public-facing UIs',
      'Client-facing UIs',
      'Crew-facing UIs'
    ]),
    hints: [
      'hint-00',
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  age: {
    type: 'c1',
    question: 'The fraction of Utopia clients aged 40 and older is about',
    answers: [
      '30%',
      '40%',
      '50%',
      '60%',
      '70%'
    ],
    correct: new Set(['70%']),
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  profit: {
    type: 'cn',
    question: 'Accessible UIs help our telephone associates by',
    answers: [
      'making them more productive',
      'making them answer accessibility questions, too',
      'increasing the number of calls from disabled clients',
      'giving robo-advice directly to clients',
      'empowering clients to transact without telephone support'
    ],
    correct: new Set([
      'making them more productive',
      'empowering clients to transact without telephone support'
    ]),
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  risk: {
    type: 'cn',
    question: 'Which risks can accessibility decrease for Utopia?',
    answers: [
      'risk of being sued for disability discrimination',
      'risk of responsibility for erroneous transactions',
      'risk of decreases in prices of portfolio positions',
      'risk of bad publicity for treating disabled investors unfairly',
      'risk of distributed denial of service attack'
    ],
    correct: new Set([
      'risk of being sued for disability discrimination',
      'risk of responsibility for erroneous transactions',
      'risk of bad publicity for treating disabled investors unfairly'
    ]),
    hints: ['hint-05'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  quality: {
    type: 'cn',
    question: 'Accessible UIs tend to',
    answers: [
      'be ugly',
      'load slowly',
      'embody software best practices',
      'be easier for subsequent developers to update',
      'contain fast-moving animation effects',
      'be findable through search engines'
    ],
    correct: new Set([
      'embody software best practices',
      'be easier for subsequent developers to update',
      'be findable through search engines'
    ]),
    hints: [
      'hint-06',
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  screenreader: {
    type: 'c1',
    question: 'Tom Timonte likens a screen reader to',
    answers: [
      'a machine that makes movie subtitles',
      'a personal assistant',
      'an audiobook',
      'a videogame device',
      'a touchscreen interface'
    ],
    correct: new Set(['an audiobook']),
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/success/script.js <==
// Objects
quizzes = {
  milestones: {
    type: 'c1',
    question: 'How has Utopia sequenced accessibility work on client-facing and crew-facing websites?',
    answers: [
      'Client-facing first',
      'Crew-facing first',
      'Both at the same time'
    ],
    correct: new Set(['Client-facing first']),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  progress: {
    type: 'c1',
    question: 'According to the axe-core test, our home page',
    answers: [
      'was about equally accessible in 2001 and 2011',
      'was more accessible in 2017 than in 2013',
      'was more accessible in 1997 than it has ever been since then',
      'improved accessibility year-over year 5 times since 1997'
    ],
    correct: new Set(['was about equally accessible in 2001 and 2011']),
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  competition: {
    type: 'cn',
    question: 'According to the axe-core test of home pages in January 2019,',
    answers: [
      'BlackRock had fewer defects than State Street',
      'Fidelity corrected 110 bugs from January 2018 to January 2019',
      'Utopia was the worst among its competitors',
      'Utopia was the best among its competitors',
      'J.P. Morgan had more issues in 2019 than Utopia had in 1997'
    ],
    correct: new Set([
      'BlackRock had fewer defects than State Street',
      'Utopia was the best among its competitors',
      'J.P. Morgan had more issues in 2019 than Utopia had in 1997'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/table/script.js <==
// Objects
quizzes = {
  alternatives: {
    type: 'cn',
    question: 'Which mechanisms for presentation of data work best via assistive technologies where the user cannot see the display?',
    answers: [
      'Table',
      'Graph',
      'Question form',
      'Written description of facts and patterns'
    ],
    correct: new Set([
      'Table',
      'Question form',
      'Written description of facts and patterns'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  when: {
    type: 't1',
    question: 'In a table of information about some funds, one cell contains the expense ratio of the Total Stock Market Index Fund. <q>Expense Ratio</q> would normally be found in a',
    width: 25,
    correct: new Set(['column header']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  avoid: {
    type: 'cn',
    question: 'Mechanisms that are effective for making displays of data responsive to window widths include',
    answers: [
      'HTML <code>table</code>',
      'CSS <code>display: grid</code>',
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ],
    correct: new Set([
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  org: {
    type: 't1',
    question: 'In the example of an accessible table, the footnote row has been given a <code>class</code> attribute, whose value is',
    width: 20,
    correct: new Set([
      'note',
      '"note"'
    ]),
    hints: [
      'hint-04',
      'hint-05'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  header: {
    type: 'cn',
    question: 'Which roles of cells are found in the Accessibility Tree?',
    answers: [
      'table',
      'thead',
      'header',
      'rowheader',
      'columnheader',
      'cell',
      'gridcell',
      'th',
      'td'
    ],
    correct: new Set([
      'rowheader',
      'columnheader',
      'gridcell'
    ]),
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  classify: {
    type: 'c1',
    question: 'What kind of header is <q>Investor Shares</q> for <q>Below-investment-grade</q>?',
    answers: [
      'a direct header',
      'an indirect header',
      'no header'
    ],
    correct: new Set(['no header']),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  ambiguity: {
    type: 't1',
    question: 'What role does the Accessibility Tree assign to <q>Investor Shares</q> in the <q>[original] Utopia active bond funds</q> table?',
    width: 25,
    correct: new Set(['gridcell']),
    hints: [
      'hint-09',
      'hint-10',
      'hint-11'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  disambiguate: {
    type: 'cn',
    question: 'Which of these attribute assignments <strong>could</strong> help an AT tell a user that VGCAX is taxable?',
    answers: [
      'headers="r21 c5"',
      'headers="r21 c3"',
      'scope="colgroup"',
      'expenseRatio="0.25"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'class="tbodyhead"',
      'id="r0"'
    ],
    correct: new Set([
      'headers="r21 c5"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'id="r0"'
    ]),
    hints: [
      'hint-12',
      'hint-13',
      'hint-14'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  colselect: {
    type: 't1',
    question: 'In the example of a table with column selection, what is the value of the <code>colIndex</code> property of any <q>Price</q> cell if the <q>Min Inv</q> and <q>SEC Yield</q> checkboxes are cleared and the others are checked?',
    width: 20,
    correct: new Set(['5']),
    hints: [
      'hint-15',
      'hint-16'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  sticky: {
    type: 'c1',
    question: 'In the example of a sticky-header table, when the rightmost column is being shown and the user activates the right-arrow button:',
    answers: [
      'nothing happens',
      'the leftmost shown column becomes hidden',
      'the columns wrap around and the first columns become shown',
      'an error message is displayed'
    ],
    correct: new Set(['nothing happens']),
    hints: ['hint-17'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/tablist/nav.js <==
// Functions
const selectTab = (tabList, tab) => {
  // Deselect the currently selected tab.
  const activeTab = tabList.querySelector('[aria-selected=true]');
  activeTab.setAttribute('aria-selected', 'false');
  activeTab.setAttribute('tabindex', '-1');
  document
  .getElementById(activeTab.getAttribute('aria-controls'))
  .classList
  .replace('overt', 'covert');
  // Select the specified tab.
  tab.setAttribute('aria-selected', 'true');
  tab.setAttribute('tabindex', '0');
  tab.focus();
  document
  .getElementById(tab.getAttribute('aria-controls'))
  .classList
  .replace('covert', 'overt');
};
const tabListKeyUtil = (isEasy, event, tabList, activeElement) => {
  const key = event.key;
  let newTab;
  if (key === 'ArrowRight') {
    newTab
      = activeElement.nextElementSibling || tabList.firstElementChild;
  }
  else if (key === 'ArrowLeft') {
    newTab
      = activeElement.previousElementSibling || tabList.lastElementChild;
  }
  else if (key === 'Home') {
    newTab = tabList.firstElementChild;
  }
  else if (key === 'End') {
    newTab = tabList.lastElementChild;
  }
  if (newTab) {
    event.preventDefault();
    if (isEasy) {
      selectTab(tabList, newTab);
    }
    else {
      newTab.focus();
    }
  }
  else if (
    (key === 'Enter' || key === ' ')
    && ! isEasy
    && activeElement.getAttribute('aria-selected') === 'false'
  ) {
    event.preventDefault();
    selectTab(tabList, activeElement);
  }
};
// Handlers
const tabListClickHandler = event => {
  const target = event.target;
  if (target.tagName === 'LI') {
    const tabList = event.currentTarget;
    selectTab(tabList, target);
  }
};
const tabListKeyHandler = event => {
  const activeElement = document.activeElement;
  if (activeElement.getAttribute('role') === 'tab') {
    const tabList = activeElement.parentElement;
    const isEasy = tabList.classList.contains('tablist-easy');
    tabListKeyUtil(isEasy, event, tabList, activeElement);
  }
};
const typesEaseChangeHandler = event => {
  const isHard = event.target.checked;
  document.getElementById('types').classList
    = isHard ? 'tablist-hard' : 'tablist-easy';
};
// Listeners
const createTabListListeners = () => {
  const tabLists = document.body.querySelectorAll('[role=tablist]');
  for (let i = 0; i < tabLists.length; i++) {
    tabLists.item(i).addEventListener('click', tabListClickHandler);
  }
  document.getElementById('types-hard').addEventListener(
    'change', typesEaseChangeHandler
  );
};
document.addEventListener('keydown', tabListKeyHandler);
document.addEventListener('DOMContentLoaded', createTabListListeners, {
  once: true
});

==> mod/tablist/script.js <==
// Objects
quizzes = {
  what: {
    type: 'c1',
    question: 'A tab selects',
    answers: [
      'a tab list',
      'a form',
      'a tab panel',
      'an <code>li</code> element',
      'a page',
      'nothing'
    ],
    correct: new Set(['a tab panel']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  behave: {
    type: 'cn',
    question: 'If a tab list with 3 tabs employs the click method and its last tab is currently in focus, which keys can you press to move the focus to the first tab?',
    answers: [
      '<kbd>1</kbd>',
      '<kbd>&leftarrow;</kbd>',
      '<kbd>&rightarrow;</kbd>',
      '<kbd>&uparrow;</kbd>',
      '<kbd>&downarrow;</kbd>',
      '<kbd>TAB</kbd>',
      '<kbd>HOME</kbd>',
      '<kbd>END</kbd>'
    ],
    correct: new Set([
      '<kbd>&rightarrow;</kbd>',
      '<kbd>&downarrow;</kbd>',
      '<kbd>HOME</kbd>'
    ]),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  work: {
    type: 'c1',
    question: 'The attribute that tells assistive technologies which tab panel is associated with a tab is',
    answers: [
      'aria-associated',
      'aria-owns',
      'aria-controls',
      'aria-selected',
      'aria-tabpanelof'
    ],
    correct: new Set(['aria-controls']),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/term/script.js <==
// Objects
quizzes = {
  alternatives: {
    type: 'cn',
    question: 'Which mechanisms for presentation of data work best via assistive technologies where the user cannot see the display?',
    answers: [
      'Table',
      'Graph',
      'Question form',
      'Written description of facts and patterns'
    ],
    correct: new Set([
      'Table',
      'Question form',
      'Written description of facts and patterns'
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  when: {
    type: 't1',
    question: 'In a table of information about some funds, one cell contains the expense ratio of the Total Stock Market Index Fund. <q>Expense Ratio</q> would normally be found in a',
    width: 25,
    correct: new Set(['column header']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  avoid: {
    type: 'cn',
    question: 'Mechanisms that are effective for making displays of data responsive to window widths include',
    answers: [
      'HTML <code>table</code>',
      'CSS <code>display: grid</code>',
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ],
    correct: new Set([
      'CSS <code>flexbox</code>',
      'CSS media queries'
    ]),
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  org: {
    type: 't1',
    question: 'In the example of an accessible table, the footnote row has been given a <code>class</code> attribute, whose value is',
    width: 20,
    correct: new Set([
      'note',
      '"note"'
    ]),
    hints: [
      'hint-04',
      'hint-05'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  header: {
    type: 'c1',
    question: 'Which node of the Accessibility Tree contains a description of the relationships between headers and other cells?',
    answers: [
      'table',
      'thead',
      'header',
      'cell',
      'th',
      'td'
    ],
    correct: new Set(['table']),
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  classify: {
    type: 'c1',
    question: 'What kind of header is <q>Investor Shares</q> for <q>Below-investment-grade</q>?',
    answers: [
      'a direct header',
      'an indirect header',
      'no header'
    ],
    correct: new Set(['no header']),
    hints: [
      'hint-07',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  ambiguity: {
    type: 't1',
    question: 'What role does the Accessibility Tree assign to <q>Investor Shares</q> in the <q>[better] Utopia active bond funds</q> table?',
    width: 25,
    correct: new Set(['rowheader']),
    hints: [
      'hint-09',
      'hint-10',
      'hint-11'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  disambiguate: {
    type: 'cn',
    question: 'Which of these attribute assignments <strong>could</strong> help an AT tell a user that VGCAX is taxable?',
    answers: [
      'headers="r21 c5"',
      'headers="r21 c3"',
      'scope="colgroup"',
      'expenseRatio="0.25"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'class="tbodyhead"',
      'id="r0"'
    ],
    correct: new Set([
      'headers="r21 c5"',
      'id="r21"',
      'headers="c r4"',
      'id="r4"',
      'headers="r0"',
      'id="r0"'
    ]),
    hints: [
      'hint-12',
      'hint-13',
      'hint-14'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/teststrat/script.js <==
// Objects
quizzes = {
  what: {
    type: 't1',
    question: 'Unit testing generally detects',
    width: 30,
    post: '-level accessibility problems',
    test: /^ *[cC]omponent *$/,
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  how: {
    type: 'cn',
    question: 'Which conditions make automated accessibility testing difficult?',
    answers: [
      'gradient backgrounds',
      'repeated testing',
      'large web pages',
      'randomly inserted pages',
      'forms',
      'four or more levels of headings'
    ],
    correct: new Set([
      'gradient backgrounds',
      'randomly inserted pages'
    ]),
    hints: [
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  who: {
    type: 'c1',
    question: 'Testing user interfaces for accessibility',
    answers: [
      'is not necessary',
      'begins with you',
      'is entirely the responsibility of the Accessibility Unit'
    ],
    correct: new Set(['begins with you']),
    hints: ['hint-03'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/tree/script.js <==
// Objects
quizzes = {
  treenav: {
    type: 'c1',
    question: 'What role does the browser report for <code>section</code> elements?',
    answers: [
      'section',
      'sectionRole',
      'region',
      'landmark'
    ],
    correct: new Set(['region']),
    hints: [
      'hint-00',
      'hint-01',
      'hint-02'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> mod/what/script.js <==
// Objects
quizzes = {
  word: {
    type: 't1',
    question: 'The numeronym for <q>accessibility</q> is',
    width: 25,
    correct: new Set(['a11y']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  usability: {
    type: 'c1',
    question: 'According to the Web Accessibility Initiative, a UI that is enjoyable for everybody except people with dyslexia would be:',
    answers: [
      'neither usable nor accessible',
      'usable but not accessible',
      'accessible but not usable',
      'both usable and accessible'
    ],
    correct: new Set(['usable but not accessible']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  disability: {
    type: 'cn',
    question: 'Which statements about disability are true?',
    answers: [
      'It includes not only physical but also cognitive limitations',
      'It is a concern for usability but not accessibility',
      'It almost always begins at birth',
      'It is defined precisely by the Convention on the Rights of Persons with Disabilities',
      'Disability laws are sometimes found to require accessibility'
    ],
    correct: new Set([
      'It includes not only physical but also cognitive limitations',
      'Disability laws are sometimes found to require accessibility'
    ]),
    hints: [
      'hint-02',
      'hint-03',
      'hint-04',
      'hint-05',
      'hint-06'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};
