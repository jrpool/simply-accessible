==gThan new/here/index.html <==
lThan!DOCTYPE htmlgThan
lThanhtml lang="en-US"gThan
  lThanheadgThan
    lThantitlegThanlThan/titlegThan
    lThanmeta charset="UTF-8"gThan
    lThanscript src="../../gen/homeData.js"gThanlThan/scriptgThan
    lThanscript src="../../gen/modOnLoad.js"gThanlThan/scriptgThan
  lThan/headgThan
  lThanbody itemscope itemtype="https://schema.org/WebPage"gThan
    lThanmaingThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanIntroductionlThan/h2gThan
        lThan/headergThan
        lThanpgThanWhen we say that a user lThanqgThannavigateslThan/qgThan a website, we aren&rsquo;t using a Utopia nautical metaphor. Much of the world talks this way, in many languages using travel words. This custom roots web browsing in ancient human experience.lThan/pgThan
        lThanpgThanSo, lThanqgThanWhere am I?lThan/qgThan is a reasonable question for a user to ask. On an accessible website, there should be no need to ask, because the user&rsquo;s location should always be evident.lThan/pgThan
        lThanpgThanBut what do we mean by the user&rsquo;s lThanqgThanlocationlThan/qgThan? How can a UI can make locations clear?lThan/pgThan
        lThanpgThanWhen users ask lThanqgThanWhere am I?lThan/qgThan, they may be asking about their locations in a website or on a web page.lThan/pgThan
        lThanpgThanUtopia has multiple websites and orients users with a site menu at the top, allowing users to see which site they are in (e.g., lThanqgThanPERSONAL INVESTORSlThan/qgThan) and switch to a different site. Most Utopia sites also provide within-site orientations. A navigation menu bar at the top contains topics and highlights the current topic. Breadcrumbs below the menu bar show the place of the current page in the outline of that topic. Those devices help users with site navigation.lThan/pgThan
        lThanpgThanThis module deals not with site navigation, but with page navigation.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanUnique stateslThan/h2gThan
        lThan/headergThan
        lThanpgThanUnlike a shopping mall, on a web page the user doesn&rsquo;t have a single location. A single lThanqgThanYou are herelThan/qgThan marker isn&rsquo;t enough. Instead, there are at least three locations that the user can be at. Keeping the user well informed requires letting the user know all three.lThan/pgThan
        lThanpgThanSpecifically, lThanmark id="hint-00" class="hint covert"gThana highly accessible UI answers these questions:lThan/markgThanlThan/pgThan
        lThanulgThan
          lThanligThanWhere is the thing am I hovering over?lThan/ligThan
          lThanligThanWhere is my focus?lThan/ligThan
          lThanligThanWhere is the thing I am activating?lThan/ligThan
        lThan/ulgThan
        lThanpgThanEach question has at most one answer, because the hover, focus, and activation states are unique: For each state, only one element on a page can be in it at any time.lThan/pgThan
        lThanpgThanHowever, they can also coincide. An element can be hovered over, be in focus, and be activated at the same time. So, the question arises: Can a UI notify the user not only about single states, but also combinations of states?lThan/pgThan
      lThan/sectiongThan
      lThansection id="unique" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanChanging stateslThan/h2gThan
        lThan/headergThan
        lThanpgThanWho controls the states of the elements in a UI? Control is shared. Your code exercises some control, but so does the user.lThan/pgThan
        lThanpgThanClients and crew members perform rule-governed actions in Utopia UIs. Your code enforces the rules, in part by restricting the states that users can put elements into. Subject to those restrictions, users choose where to hover, what to focus on, and what to activate.lThan/pgThan
        lThanpgThanUsers typically employ keyboards, mice, trackpads, styluses, fingers, and speech to change the states of elements. Users with disabilities also employ various assistive input technologies, such as eye trackers. Many of those assistive technologies emulate keyboards, and some users can&rsquo;t successfully operate mice, trackpads, and other analog devices. A consensus has emerged that lThanmark id="hint-01" class="hint covert"gThanthe keyboard interface must be fully respected by UI creators. Whatever users may do, they must be permitted to do with a keyboard. WCAG Success Criterion lThanigThan2.1.1lThan/igThan says this.lThan/markgThanlThan/pgThan
        lThanpgThanThis criterion seems straightforward, but the reality is not simple, as you will see.lThan/pgThan
      lThan/sectiongThan
      lThansection id="change" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanHoverlThan/h2gThan
        lThan/headergThan
        lThanpgThanIf any element is in a lThandfngThanhoverlThan/dfngThan state, it is clickable. If you operate the primary mouse or trackpad button, you click that element. Showing the user what element is in a hover state says lThanqgThanYou will click here if you click nowlThan/qgThan.lThan/pgThan
        lThanpgThanBut doesn&rsquo;t the mouse lThandfngThancursorlThan/dfngThan (i.e. the visible icon representing the mouse&rsquo;s position) give the user this information? If you click, don&rsquo;t you click wherever the mouse cursor is? Not always. UIs can contain remote clickability. The cursor can be at point A, but if you click with the mouse you can actually click an element at point B. An example of this common pattern is lThana href="../form"gThanlabels of form inputslThan/agThan. If you click when the cursor is on a label, you actually click the input (such as a checkbox). Moreover, on a large display the cursor can be hard to find.lThan/pgThan
        lThanpgThanHover states generally don&rsquo;t exist in mobile operating systems. A sliding finger isn&rsquo;t treated like a sliding mouse. Those systems normally use finger taps for clicking, so the user doesn&rsquo;t need to be told what element a mouse click will target.lThan/pgThan
        lThanpgThanHover states are also irrelevant for users who do not use mice, trackpads, or other hovering devices. This includes most users with low or no vision and users who can&rsquo;t move pointers precisely.lThan/pgThan
        lThanpgThanGiven these facts, the hover state has a two-sided relationship with accessibility:lThan/pgThan
        lThanulgThan
          lThanligThanMaking hover states clear to users helps them know, in advance, what a click action will do.lThan/ligThan
          lThanligThanHowever, accessible interfaces also don&rsquo;t ask users to take important actions by hovering, since some devices and some users cannot hover, or cannot hover precisely. For example, Utopia doesn&rsquo;t ask users to choose a fund to buy merely by hovering over it. Such an interface would make users vulnerable to error, or be unusable in some situations. Utopia does, however, let users modify the displayed content by hovering. Go to the lThana href="https://investor.utopia.com/home/"gThanpersonal-investor home pagelThan/agThan, for example, and hover over the lThanqgThanInvestinglThan/qgThan menu. The UI not only darkens the background to show where you are hovering; it also opens that menu for your further action.lThan/ligThan
        lThan/ulgThan
        lThanpgThanA lThandfngThanhover indicatorlThan/dfngThan tells the user which element is in a hover state. Browsers&rsquo; built-in hover indicators are often subtle. You can improve accessibility by defining an easily noticeable hover indicator for elements that are clickable, i.e. elements that will do something significant if clicked, and by making that indicator consistent, so users learn to recognize it.lThan/pgThan
        lThanpgThanYou can use CSS to define a hover indicator. lThanmark id="hint-02" class="hint covert"gThanCSS has a lThancodegThan:hoverlThan/codegThan pseudo-class. You create a ruleset, starting with a selector. If you append lThancodegThan:hoverlThan/codegThan to a ruleset selector (e.g., lThancodegThanbutton:hoverlThan/codegThan), the style you define there will be applied when a specified element is in a hover state.lThan/markgThan You will see an example below.lThan/pgThan
        lThanpgThanPerform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanWith your mouse, hover over the lThanqgThanTest yourselflThan/qgThan button above. Note that it changes appearance.lThan/ligThan
          lThanligThanClick the button to open the quiz.lThan/ligThan
          lThanligThanHover over some checkbox labels. Note the change in appearance of the labels and the checkboxes themselves.lThan/ligThan
          lThanligThanWhile hovering over a label, click with the mouse. Note that you had the same effect as if you had clicked the checkbox.lThan/ligThan
          lThanligThanOpen the developer tools.lThan/ligThan
          lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, examine the code in the lThancodegThanstyle.csslThan/codegThan file.lThan/ligThan
          lThanligThanFind a ruleset that defines a hover indicator for lThancodegThanbuttonlThan/codegThan elements. Note that it changes a button&rsquo;s text color to black and its background color to #c2c2c2 (Utopia&rsquo;s standard 40% Cool Gray).lThan/ligThan
          lThanligThanlThanmark id="hint-03" class="hint covert"gThanFind another ruleset that defines a hover indicator for some other element types, including lThancodegThaninputlThan/codegThan and link lThan(codegThanalThan/codegThan) elements. It sets a background color for the element to lThancodegThan#d1d1d1lThan/codegThan (Utopia 30% Cool Gray).lThan/markgThanlThan/ligThan
          lThanligThanInspect any lThanqgThanTest yourselflThan/qgThan button with the developer tools.lThan/ligThan
          lThanligThanIn the lThanqgThanStyleslThan/qgThan pane, note the ruleset for the lThancodegThanbutton-quizlThan/codegThan class, defining a background color.lThan/ligThan
          lThanligThanToggle the element state, forcing it to lThancodegThan:hoverlThan/codegThan. Note that the pane shows the lThancodegThanbutton:hoverlThan/codegThan ruleset&rsquo;s lThancodegThanbackground-colorlThan/codegThan declaration superseding the one in the lThancodegThan.button-quizlThan/codegThan ruleset. The new lThancodegThancolorlThan/codegThan declaration similarly supersedes the one in the lThancodegThanbuttonlThan/codegThan ruleset below.lThan/ligThan
        lThan/olgThan
        lThanpgThanYou can also use other style properties as hover indicators. Utopia&rsquo;s current hover indicators vary across&mdash;and within&mdash;its websites. Here is an example:lThan/pgThan
        lThanolgThan
          lThanligThanOpen the lThana href="https://investor.utopia.com/corporate-portal/" target="_blank"gThanUtopia corporate portallThan/agThan.lThan/ligThan
          lThanligThanHover over links in the right column at the top. Note that the hover indicator is a white background.lThan/ligThan
          lThanligThanHover over links in the middle of the page. Note that the hover indicator is underlining of the text.lThan/ligThan
          lThanligThanHover over links at the bottom of the page. Note that the hover indicator is missing (except for the cursor change).lThan/ligThan
        lThan/olgThan
      lThan/sectiongThan
      lThansection id="hover" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanFocuslThan/h2gThan
        lThan/headergThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanThe basicslThan/h3gThan
          lThan/headergThan
          lThanpgThanIf an element is in lThandfngThanfocuslThan/dfngThan, it is in a state of heightened operability. You can do something with it that you could not otherwise do. What that is depends on the element type.lThan/pgThan
          lThanpgThanWhen you press a keyboard key, the effect you have can depend on what element is in focus.lThan/pgThan
          lThanpgThanSo, in order for a user to know how to act and to predict the effect of a keypress, the user needs to know what element, if any, is in focus. To tell a user that an element is in focus, your UI marks the element with a lThandfngThanfocus indicatorlThan/dfngThan. Browsers do this automatically, but their focus indicators are typically difficult to see. The WCAG permits relying on the browser&rsquo;s built-in focus indicator, but by replacing it with a more visible one you can improve accessibility.lThan/pgThan
          lThanpgThanYou can do this with CSS. CSS has a lThancodegThan:focuslThan/codegThan pseudo-class, which allows you to apply style declarations to elements that are in focus. You create a ruleset, starting with a selector. For a ruleset that will apply to lThanstronggThananylThan/stronggThan element in focus, you can use the selector lThancodegThan*:focuslThan/codegThan.lThan/pgThan
          lThanpgThanBy default, browsers put elements into focus in response to user keypresses, clicks, and taps:lThan/pgThan
          lThanulgThan
            lThanligThanClicks and taps put the clicked or tapped element into focus (if it is focusable).lThan/ligThan
            lThanligThanThe lThankbdgThanTABlThan/kbdgThan key or lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination moves the focus to the next or previous focusable lThandfngThansimple elementlThan/dfngThan, namely element that has no internal set of focusable sub-elementslThan/ligThan
            lThanligThanThe arrow keys move the focus to the next or previous focusable sub-element in a lThandfngThancomplex elementlThan/dfngThan, namely one that has a set of focusable sub-elements. Groups of radio buttons and drop-down lThan(qgThanselectlThan/qgThan) lists are examples of complex elements. (A lThancodegThanfieldsetlThan/codegThan element is lThanstronggThannotlThan/stronggThan treated as a complex element.)lThan/ligThan
          lThan/ulgThan
          lThanpgThanYou can make your UI override the default behavior by giving lThandfngThanlThancodegThantabindexlThan/codegThanlThan/dfngThan attributes to elements. Only two of the possible values of lThancodegThantabindexlThan/codegThan are widely used and recommended: lThancodegThan0lThan/codegThan and lThancodegThan-1lThan/codegThan.lThan/pgThan
          lThanulgThan
            lThanligThanlThanmark id="hint-04" class="hint covert"gThanlThancodegThantabindex="0"lThan/codegThan makes an element fully focusable.lThan/markgThanlThan/ligThan
            lThanligThanlThancodegThantabindex="-1"lThan/codegThan makes an element focusable lThanstronggThanexceptlThan/stronggThan with the lThankbdgThanTABlThan/kbdgThan key or lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination.lThan/ligThan
            lThanligThanNo lThancodegThantabindexlThan/codegThan attribute at all gives the element its default focusability: Actionable elements such as form controls and links are focusable, and others are not.lThan/ligThan
          lThan/ulgThan
          lThanpgThanYour JavaScript code can put a focusable element into focus with the lThancodegThanfocus()lThan/codegThan method.lThan/pgThan
          lThanpgThanPerform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanOpen an lThana href="../../gen/examples/form/simple/bad/form-bad.html" target="_blank"gThanexample of a partly accessible formlThan/agThan.lThan/ligThan
            lThanligThanPress the lThankbdgThanTABlThan/kbdgThan key twice. Note the outlines identifying the elements in focus.lThan/ligThan
            lThanligThanOpen an lThana href="../../gen/examples/form/simple/good/form-good.html" target="_blank"gThanexample of a highly accessible formlThan/agThan.lThan/ligThan
            lThanligThanPress the lThankbdgThanTABlThan/kbdgThan key twice. Note that the outlines identifying the elements in focus are more visible than those on the other page.lThan/ligThan
            lThanligThanlThanmark id="hint-05" class="hint covert"gThanOn the stylesheet of lThancodegThanform-good.htmllThan/codegThan, find a ruleset for any element in focus. Note that it surrounds the element with a solid outline 3 pixels in thickness, in color lThancodegThan#005293lThan/codegThan (Utopia&rsquo;s standard Royal Blue), drawn with 2 pixels of space between the outline and the element.lThan/markgThan There is no such ruleset for lThancodegThanform-bad.htmllThan/codegThan, so that page uses the browser&rsquo;s default focus indicator.lThan/ligThan
          lThan/olgThan
          lThanpgThanMost Utopia UIs use the default browser focus indicator, but there are exceptions. For example, a lThana href="https://investornews.utopia/a-look-back-at-the-life-of-utopias-founder/"gThannews page on the life of John C. BoglelThan/agThan uses six different focus indicators:lThan/pgThan
          lThanulgThan
            lThanligThandefault (Utopia logo)lThan/ligThan
            lThanligThandefault plus darker background color lThan(qgThanFORMSlThan/qgThan)lThan/ligThan
            lThanligThandefault plus darker text lThan(qgThanNews homelThan/qgThan)lThan/ligThan
            lThanligThanunderline lThan(qgThanCOMPANY NEWSlThan/qgThan)lThan/ligThan
            lThanligThanicon color change to red lThan(qgThan&hellip;lThan/qgThan in speech bubble)lThan/ligThan
            lThanligThantext underline and icon color change lThan(qgThanView tributelThan/qgThan)lThan/ligThan
          lThan/ulgThan
          lThanpgThanYour UI will provide an accessibility benefit if you adopt a consistent and easy-to-see focus indicator that conforms to a common convention. The most conventional focus indicator on the web is an outline, and it is usually blue.lThan/pgThan
          lThanpgThanAn outline (made with the CSS lThancodegThanoutlinelThan/codegThan property) makes a more user-friendly focus indicator than a border (made with the CSS lThancodegThanborderlThan/codegThan property) would. In CSS, a border is part of its element, so, if an element acquired and lost a border whenever it goes into or out of focus, the element could jerk. An outline is drawn outside its element, so when it appears and disappears it leaves the element stationary.lThan/pgThan
        lThan/sectiongThan
        lThansection id="focusbasic" class="section-quiz"gThanlThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanFocus and the keyboardlThan/h3gThan
          lThan/headergThan
          lThanpgThanAs mentioned above, lThanmark id="hint-06" class="hint covert"gThanfocus can change what keypresses do. Below is a summary of that interaction. When the focus is on one of the listed elements, the listed keys have the effects described.lThan/markgThan For example, the lThankbdgThanSPACElThan/kbdgThan key toggles a focused checkbox (checking or unchecking it). The lThanqgThanscrolllThan/qgThan action is to scroll the viewport on the page.lThan/pgThan
          lThanpgThanThe focal elements are listed with ordinary English names. For example, a lThandfngThanlinklThan/dfngThan is an lThancodegThanalThan/codegThan element, and a lThandfngThanrangelThan/dfngThan is an lThancodegThaninputlThan/codegThan element with lThancodegThantype="range"lThan/codegThan. Elements classified as lThandfngThantextuallThan/dfngThan are inputs with text values (see lThana href="../form"gThanlThanqgThanAccessible FormslThan/qgThanlThan/agThan).lThan/pgThan
          lThantablegThan
            lThancaptiongThanKeypress dependence on focus: lThankbdgThanSPACElThan/kbdgThan and lThankbdgThanENTERlThan/kbdgThanlThan/captiongThan
            lThancolgroupgThan
              lThancolgThanlThancolgThanlThancolgThanlThancolgThanlThancolgThan
            lThan/colgroupgThan
            lThantheadgThan
              lThantrgThan
                lThanthgThanFocal elementlThan/thgThan
                lThanthgThanlThankbdgThanSPACElThan/kbdgThanlThan/thgThan
                lThanthgThanlThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanSPACElThan/kbdgThanlThan/thgThan
                lThanthgThanlThankbdgThanENTERlThan/kbdgThanlThan/thgThan
                lThanthgThanlThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanENTERlThan/kbdgThanlThan/thgThan
              lThan/trgThan
            lThan/theadgThan
            lThantbodygThan
              lThantrgThan
                lThanthgThanbuttonlThan/thgThan
                lThantdgThanactivatelThan/tdgThan
                lThantdgThanactivatelThan/tdgThan
                lThantdgThanactivatelThan/tdgThan
                lThantdgThanactivatelThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanlinklThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanactivatelThan/tdgThan
                lThantdgThanactivate (new window)lThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanradio buttonlThan/thgThan
                lThantdgThanselectlThan/tdgThan
                lThantdgThanselectlThan/tdgThan
                lThantdgThaninertlThan/tdgThan
                lThantdgThaninertlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThancheckboxlThan/thgThan
                lThantdgThantogglelThan/tdgThan
                lThantdgThantogglelThan/tdgThan
                lThantdgThaninertlThan/tdgThan
                lThantdgThaninertlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanrangelThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThaninertlThan/tdgThan
                lThantdgThaninertlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThandatelThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThansubmitlThan/tdgThan
                lThantdgThansubmitlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThantextuallThan/thgThan
                lThantdgThanenter lThankbdgThanSPACElThan/kbdgThan at insertion pointlThan/tdgThan
                lThantdgThanenter lThankbdgThanSPACElThan/kbdgThan at insertion pointlThan/tdgThan
                lThantdgThansubmitlThan/tdgThan
                lThantdgThansubmitlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanotherwiselThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThaninertlThan/tdgThan
                lThantdgThaninertlThan/tdgThan
              lThan/trgThan
            lThan/tbodygThan
          lThan/tablegThan
          lThantablegThan
            lThancaptiongThanKeypress dependence on focus: arrow keyslThan/captiongThan
            lThancolgroupgThan
              lThancolgThanlThancolgThanlThancolgThanlThancolgThanlThancolgThan
            lThan/colgroupgThan
            lThantheadgThan
              lThantrgThan
                lThanthgThanFocal elementlThan/thgThan
                lThanthgThanlThankbdgThan&uparrow;lThan/kbdgThanlThan/thgThan
                lThanthgThanlThankbdgThan&downarrow;lThan/kbdgThanlThan/thgThan
                lThanthgThanlThankbdgThan&leftarrow;lThan/kbdgThanlThan/thgThan
                lThanthgThanlThankbdgThan&rightarrow;lThan/kbdgThanlThan/thgThan
              lThan/trgThan
            lThan/theadgThan
            lThantbodygThan
              lThantrgThan
                lThanthgThanbuttonlThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanlinklThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanradio buttonlThan/thgThan
                lThantdgThanfocus and select previouslThan/tdgThan
                lThantdgThanfocus and select nextlThan/tdgThan
                lThantdgThanfocus and select previouslThan/tdgThan
                lThantdgThanfocus and select nextlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThancheckboxlThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanrangelThan/thgThan
                lThantdgThanincrementlThan/tdgThan
                lThantdgThandecrementlThan/tdgThan
                lThantdgThandecrementlThan/tdgThan
                lThantdgThanincrementlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThandatelThan/thgThan
                lThantdgThanincrement selected partlThan/tdgThan
                lThantdgThandecrement selected partlThan/tdgThan
                lThantdgThanselect previous partlThan/tdgThan
                lThantdgThanselect next partlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThantextuallThan/thgThan
                lThantdgThanmove insertion point to startlThan/tdgThan
                lThantdgThanmove insertion point to endlThan/tdgThan
                lThantdgThanmove insertion point 1 leftlThan/tdgThan
                lThantdgThanmove insertion point 1 rightlThan/tdgThan
              lThan/trgThan
              lThantrgThan
                lThanthgThanotherwiselThan/thgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
                lThantdgThanscrolllThan/tdgThan
              lThan/trgThan
            lThan/tbodygThan
          lThan/tablegThan
          lThanpgThanYou could capture keypresses and change these effects with JavaScript, but that would generally make your UI behave differently from most. Adhering to common conventions generally improves accessibility.lThan/pgThan
        lThan/sectiongThan
        lThansection id="focuskbd" class="section-quiz"gThanlThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanImplicit submissionlThan/h3gThan
          lThan/headergThan
          lThanpgThanlThanmark id="hint-07" class="hint covert"gThanIn the first table above the effect of the lThankbdgThanENTERlThan/kbdgThan key and the lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanENTERlThan/kbdgThan combination is described as lThanqgThansubmitlThan/qgThan when a date or textual input is in focus. This means submitting the form that the input is part of. This lThana href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission"gThansubmission behavior is conditionallThan/agThan. The form is submitted if and only if either of these conditions is true:lThan/markgThanlThan/pgThan
          lThanulgThan
            lThanligThanThere is a submit button in the form.lThan/ligThan
            lThanligThanThe textual input is the only one in the form.lThan/ligThan
          lThan/ulgThan
          lThanpgThanIf your form is being submitted at all, then it is good for accessibility to offer a button for explicit submission. So let&rsquo;s assume your form contains such a button. Then, if it also has multiple textual inputs, the default behavior is for an lThankbdgThanENTERlThan/kbdgThan keypress, while any of those inputs is in focus, to submit the form, even if some or all of the input fields are empty.lThan/pgThan
          lThanpgThanIs implicit submission an accessible feature? lThana href="https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/"gThanYes, it is, argues TJ VanTolllThan/agThan, because this is the standard behavior and conformance to standards is a basic requirement for accessibility. But lThana href="https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/#disqus_thread"gThansome developers argue the oppositelThan/agThan. They say this behavior conflicts with worksheet behavior, where lThankbdgThanENTERlThan/kbdgThan moves the focus to the next cell down, and causes users to submit forms by mistake.lThan/pgThan
          lThanpgThanIf mistakenly submitting a form could cause damage, you can consider disabling implicit submission with JavaScript. Otherwise, this behavior reminds you to provide a visible and recognizable focus indicator. Even users know knows how implicit submission works could be surprised by it if they can&rsquo;t see what element is in focus.lThan/pgThan
        lThan/sectiongThan
        lThansection id="implicit" class="section-quiz"gThanlThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanCustom focuslThan/h3gThan
          lThan/headergThan
          lThanpgThanUnder some conditions, it can be useful to put into focus elements that by default are not focusable. On this page, for example, when you click lThanqgThanTest yourselflThan/qgThan, a form appears, and the lThancodegThanformlThan/codegThan element goes into focus. Why? For two reasons:lThan/pgThan
          lThanulgThan
            lThanligThanThis makes it easy for you to navigate within the form with your keyboard. With a single lThankbdgThanTABlThan/kbdgThan keypress, you can begin interacting with the form&rsquo;s controls.lThan/ligThan
            lThanligThanIt&rsquo;s good for users of assistive technologies. When the form appears on the page, the fact that it goes into focus ensures it comes to the user&rsquo;s attention.lThan/ligThan
          lThan/ulgThan
          lThanpgThanlThanmark id="hint-08" class="hint covert"gThanYou can decide to put any element into focus or to let the user do so. For this purpose you can use the lThancodegThantabindexlThan/codegThan attribute described above, and the JavaScript lThancodegThanfocus()lThan/codegThan method.lThan/markgThanlThan/pgThan
          lThanpgThanTo see examples of these mechanisms, perform these operations:lThan/pgThan
          lThanulgThan
            lThanligThanClick any lThanqgThanTest yourselflThan/qgThan button.lThan/ligThan
            lThanligThanInspect any element in the form with the developer tools.lThan/ligThan
            lThanligThanFind the enclosing lThancodegThanformlThan/codegThan element. Note that its lThancodegThantabindexlThan/codegThan attribute has the value lThancodegThan0lThan/codegThan.lThan/ligThan
            lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, select the lThancodegThangen/modOnLoad.jslThan/codegThan file.lThan/ligThan
            lThanligThan
              In that file, find the lThancodegThanshowQuizlThan/codegThan function. As the comment says, it creates, shows, and focuses a specified quiz. Note that it:
              lThanulgThan
                lThanligThancreates a lThancodegThanformlThan/codegThan element and names it lThancodegThanformlThan/codegThanlThan/ligThan
                lThanligThanpopulates this new element with the content it needslThan/ligThan
                lThanligThangives it a lThancodegThantabindexlThan/codegThan attribute and sets its value to lThancodegThan0lThan/codegThanlThan/ligThan
                lThanligThanputs it into focus by executing lThancodegThanform.focus()lThan/codegThanlThan/ligThan
              lThan/ulgThan
            lThan/ligThan
          lThan/ulgThan
        lThan/sectiongThan
        lThansection id="custom" class="section-quiz"gThanlThan/sectiongThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanActivationlThan/h2gThan
        lThan/headergThan
        lThanpgThanWhen an element is in a state of lThandfngThanactivationlThan/dfngThan, it is performing an action. Buttons and links can be activated. The lThana href="https://w3c.github.io/uievents/#event-flow-activation"gThanlThanqgThanactivation triggerslThan/qgThanlThan/agThan can be mouse clicks, or also the lThankbdgThanENTERlThan/kbdgThan or lThankbdgThanSPACElThan/kbdgThan key with or without the lThankbdgThanSHIFTlThan/kbdgThan key.lThan/pgThan
        lThanpgThanA user might not be aware that a button or link is being activated. Displaying an activation indicator when the user presses a mouse button or lThankbdgThanSPACElThan/kbdgThan key down on a button or link can promote that awareness and give the user an opportunity to interrupt the activation by moving the mouse away or pressing the lThankbdgThanTABlThan/kbdgThan key before lifting the mouse button or lThankbdgThanSPACElThan/kbdgThan key.lThan/pgThan
        lThanpgThanNo success criterion in WCAG lThanstronggThanrequireslThan/stronggThan an activation indicator, but you can provide one by adding CSS rulesets to your UI, in which the selector selects elements in an active state. CSS has an lThana href="https://developer.mozilla.org/en-US/docs/Web/CSS/:active"gThanlThancodegThan:activelThan/codegThan pseudo-classlThan/agThan that can do the job. By applying distinctive styles to lThancodegThana:activelThan/codegThan and lThancodegThanbutton:activelThan/codegThan elements, you can make a link or button change its appearance in the situations described above. The link or button adopts its activation style when you press the mouse button or lThankbdgThanSPACElThan/kbdgThan key down, and it resumes its normal style and activates when you release the mouse button or lThankbdgThanSPACElThan/kbdgThan key&mdash;as long as you haven&rsquo;t dragged the mouse or moved the focus away from the element.lThan/pgThan
        lThanpgThanPerform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanOpen the developer tools.lThan/ligThan
          lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, select the lThancodegThanmod/here/index.htmllThan/codegThan file (shown as lThancodegThan(index)lThan/codegThan) to display this page&rsquo;s HTML code.lThan/ligThan
          lThanligThanFind the lThancodegThanlink rel="stylesheet"lThan/codegThan element inside the lThancodegThanheadlThan/codegThan element. Note the reference to a stylesheet.lThan/ligThan
          lThanligThanSelect the referenced stylesheet.lThan/ligThan
          lThanligThanIn that stylesheet, lThanmark id="hint-09" class="hint covert"gThanfind a ruleset for lThancodegThana:activelThan/codegThan. That selector applies the ruleset to links lThan(codegThanalThan/codegThan elements) that are in the active state. Note the declarations in the ruleset. They set the text color lThan(codegThancolorlThan/codegThan) to lThancodegThanwhitelThan/codegThan and the background color to lThancodegThan#69923alThan/codegThan (Utopia 100% green).lThan/markgThanlThan/ligThan
          lThanligThanHold your mouse button down on a link on this page, and then drag the mouse away. Note that the ruleset is applied to the link as long as you hold the mouse button down. That is because that action holds the button in the active state.lThan/ligThan
          lThanligThanHold your mouse button down on the lThanqgThanTest yourselflThan/qgThan button at the end of this section. Note that the button&rsquo;s appearance changes and remains changed as long as you hold the mouse button down. That action, likewise, holds the button in the active state.lThan/ligThan
          lThanligThanRelease the mouse button to open the quiz.lThan/ligThan
          lThanligThanIn the lThanqgThanSourceslThan/qgThan panel of the developer tools, select the lThancodegThangen/modOnLoad.jslThan/codegThan file.lThan/ligThan
          lThanligThanFind the lThancodegThanclickHandlerlThan/codegThan function and note how it is designed.lThan/ligThan
        lThan/olgThan
      lThan/sectiongThan
      lThansection id="activate" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanState distinctionlThan/h2gThan
        lThan/headergThan
        lThanpgThanIt is possible to make the activation, focus, and hover indicators (or any two of them) identical rather than distinct. In some Utopia UIs, the focus and hover indicators are identical.lThan/pgThan
        lThanpgThanBut making them all different has an accessibility benefit. Suppose one element is in focus and another element is being hovered over. How will the user know which is which? If they look alike, the user might press the lThankbdgThanENTERlThan/kbdgThan key and expect to follow a link, but actually perform a transaction by clicking a button. Or a user could click the lThanqgThanNolThan/qgThan button instead of the lThanqgThanYeslThan/qgThan button. The mouse cursor might be over a label, far from the radio button or checkbox that it labels, making it non-obvious which one is in focus and which one is being hovered over.lThan/pgThan
        lThanpgThanIf you decide to make the indicators distinct, you also need to make at least the focus and hover indicators lThanstronggThannoncompetitivelThan/stronggThan. It must be possible for an element that is in lThanstronggThanbothlThan/stronggThan the focus and the hover states to show this to the user. If you made the focus indicator a blue outline and the hover indicator a gray outline, for example, they would compete (even if they are spaced at different distances from their elements). lThanmark id="hint-10" class="hint covert"gThanOnly one outline can appear around an element at any time. In these modules, the focus indicator is an outline and the hover indicator is a set of colors. Those don&rsquo;t compete. They can appear simultaneously when an element is in both states.lThan/markgThanlThan/pgThan
        lThanpgThanPerform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanClick the lThanqgThanTest yourselflThan/qgThan button in the lThanqgThanImplicit submissionlThan/qgThan section above.lThan/ligThan
          lThanligThanClick the first radio button.lThan/ligThan
          lThanligThanWith your mouse, hover over the word lThanqgThanfocuslThan/qgThan in the last label. Note that the first radio button exhibits the focus indicator, but the last radio button and its label exhibit the hover indicator.lThan/ligThan
          lThanligThanClick with the mouse. Note that you clicked the last radio button, causing it to become focused, hovered over, and selected.lThan/ligThan
          lThanligThanHover elsewhere and then back over the last radio button or its label. Note that its focus and hover indicators are both visible.lThan/ligThan
          lThanligThanOpen an lThana href="../../gen/examples/indicator" target="_blank"gThanexample of identical hover and focus indicatorslThan/agThan.lThan/ligThan
          lThanligThanPress the lThankbdgThanTABlThan/kbdgThan key once to put the lThanqgThanYeslThan/qgThan button into focus.lThan/ligThan
          lThanligThanHover over the word lThanqgThanincorrectlylThan/qgThan and leave your mouse there. Note that both buttons have identical indicators.lThan/ligThan
          lThanligThanPress the lThankbdgThanENTERlThan/kbdgThan key. Note the outcome message.lThan/ligThan
        lThan/olgThan
        lThanpgThanThis last example page has a mixture of accessibility features and defects. The identity of the focus and hover indicators isn&rsquo;t the only problem, but it is one of the contributors to a risk of user error.lThan/pgThan
      lThan/sectiongThan
      lThansection id="distinct" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanpgThanWindows high-contrast mode overrides background colors. Reconsider using them for hover indication.lThan/pgThan
      lThan/sectiongThan
    lThan/maingThan
  lThan/bodygThan
lThan/htmlgThan

==gThan new/here/script.js <==
// Objects
quizzes = {
  unique: {
    type: 'cn',
    question: 'Which locations does a highly accessible UI inform users about?',
    answers: [
      'location of focus',
      'location of page',
      'location of title',
      'location of hover',
      'location of back button',
      'location of activation',
      'location of next page'
    ],
    correct: new Set([
      'location of focus',
      'location of hover',
      'location of activation',
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  change: {
    type: 't1',
    question: 'All functionality must be available with use of a keyboard, according to WCAG Success Criterion',
    width: 30,
    correct: new Set(['2.1.1']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  hover: {
    type: 't1',
    question: 'Make this ruleset apply only to links and buttons when they are hovered over.',
    width: 30,
    postLine: ' {',
    postBlock: [
      'outline: solid 3px mediumgray;',
      'outline-offset: 1px;',
      '}'
    ],
    tests: [
      /^ *a:hover *, *button:hover *$/,
      /^ *button:hover *, *a:hover *$/
    ],
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  focusbasic: {
    type: 't1',
    question: 'Make this ruleset place focus indicators 3 pixels away from their elements.',
    width: 20,
    preBlock: [
      '*:focus {',
      'outline: solid 3px blue;'
    ],
    postBlock: ['}'],
    test: /^ *outline-offset *: *3px *; *$/,
    hints: ['hint-05'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  focuskbd: {
    type: 'cn',
    question: 'If a date input is in focus and its month field is selected, which keys would change the month from March to February?',
    answers: [
      'lThankbdgThan&uparrow;lThan/kbdgThan',
      'lThankbdgThan&downarrow;lThan/kbdgThan',
      'lThankbdgThan&leftarrow;lThan/kbdgThan',
      'lThankbdgThan&rightarrow;lThan/kbdgThan',
      'lThankbdgThanSPACElThan/kbdgThan',
      'lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanSPACElThan/kbdgThan',
      'lThankbdgThanENTERlThan/kbdgThan',
      'lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanENTERlThan/kbdgThan',
      'lThankbdgThanTABlThan/kbdgThan',
      'lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan'
    ],
    correct: new Set(['lThankbdgThan&downarrow;lThan/kbdgThan']),
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  implicit: {
    type: 'c1',
    question: 'If a form contains an lThanqgThanEmaillThan/qgThan lThancodegThanemaillThan/codegThan-type input and a lThanqgThanTelephonelThan/qgThan lThancodegThantellThan/codegThan-type input, when will pressing lThankbdgThanENTERlThan/kbdgThan submit the form?',
    answers: [
      'never',
      'only when the email input is in focus',
      'only when the telephone input is in focus',
      'when either of those inputs is in focus',
      'when either of those inputs is in focus if there is a submit button',
      'when either of those inputs is in focus if there is no submit button',
      'when both inputs have non-blank values, regardless of focus'
    ],
    correct: new Set([
      'when either of those inputs is in focus if there is a submit button'
    ]),
    hints: ['hint-07'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  custom: {
    type: 't1',
    question: 'Make it possible for a user to put this image into focus with the lThankbdgThanTABlThan/kbdgThan key.',
    width: 40,
    preBlock: [
      'lThanimg',
      'src="../static/images/bogle.jpg"',
      'alt="John C. Bogle"'
    ],
    postBlock: ['gThan'],
    test: /^ *tabindex *= *(["']?)0\1 *$/,
    hints: [
      'hint-04',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  activate: {
    type: 't1',
    question: 'What text color does the CSS ruleset of this page give to the text of buttons being activated?',
    width: 25,
    correct: new Set([
      'black',
      '#000',
      '#000000'
    ]),
    hints: ['hint-09'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  distinct: {
    type: 'cn',
    question: 'Which single declarations will make a button hover indicator noncompetitive with, and distinct from, a button focus indicator, if the focus indicator&rsquo;s only declaration is lThancodegThanoutline: solid 3px bluelThan/codegThan?',
    answers: [
      'lThancodegThanoutline: solid 3px bluelThan/codegThan',
      'lThancodegThanoutline: solid 3px redlThan/codegThan',
      'lThancodegThanoutline: solid 6px bluelThan/codegThan',
      'lThancodegThanbackground-color: darkbluelThan/codegThan',
      'lThancodegThanbackground-color: yellowlThan/codegThan',
      'lThancodegThancolor: bluelThan/codegThan',
      'lThancodegThancolor: purplelThan/codegThan'
    ],
    correct: new Set([
      'lThancodegThanbackground-color: darkbluelThan/codegThan',
      'lThancodegThanbackground-color: yellowlThan/codegThan',
      'lThancodegThancolor: bluelThan/codegThan',
      'lThancodegThancolor: purplelThan/codegThan'
    ]),
    hints: ['hint-10'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==gThan new/layer/index.html <==
lThan!DOCTYPE htmlgThan
lThanhtml lang="en-US"gThan
  lThanheadgThan
    lThantitlegThanlThan/titlegThan
    lThanmeta charset="UTF-8"gThan
    lThanscript src="../../gen/homeData.js"gThanlThan/scriptgThan
    lThanscript src="../../gen/modOnLoad.js"gThanlThan/scriptgThan
    lThanscript src="nav.js"gThanlThan/scriptgThan
  lThan/headgThan
  lThanbody itemscope itemtype="https://schema.org/WebPage"gThan
    lThanmaingThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanIntroductionlThan/h2gThan
        lThan/headergThan
        lThanpgThanThe typical display that a user sees is two-dimensional. It has a height and a width, but it has no depth. It is flat.lThan/pgThan
        lThanpgThanHowever, UI creators often try to cause content to be rendered in a way that mimics three-dimensional space, such as a desk surface with a pile of papers on it. For this purpose designers use shadows, shading, and perspective to trick the user&rsquo;s visual intuition.lThan/pgThan
        lThanpgThanWhat about users who are not using vision to perceive the display? They rely on assistive technologies to analyze the content, and assistive technologies ignore shadows, shading, and perspective. So the usual design patterns that trick visual users don&rsquo;t trick assistive technologies. They could leave assistive technologies, and their users, confused.lThan/pgThan
        lThanpgThanFor maximum accessibility, it is usually wise to avoid three-dimensional metaphors, not trying to show things lThanqgThanon top oflThan/qgThan, lThanqgThancoveringlThan/qgThan, or lThanqgThanoverlayinglThan/qgThan other things. Instead, you might, for example, insert one thing in between other things already being displayed.lThan/pgThan
        lThanpgThanNevertheless, many Utopia UIs contain three-dimensionality, in the form of lThanstronggThanlayerslThan/stronggThan. So it is useful to know how layers can be made accessible.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanWhat is a layer?lThan/h2gThan
        lThan/headergThan
        lThanpgThanlThanmark id="hint-00" class="hint covert"gThanA lThandfngThanlayerlThan/dfngThan is a container that occupies lThanstronggThanpartlThan/stronggThan but not all of the viewport and blocks interactions with lThanstronggThanalllThan/stronggThan of the rest of the content in the viewport.lThan/markgThanlThan/pgThan
        lThanpgThanlThanmark id="hint-01" class="hint covert"gThanIf a container occupied all of the viewport, it would be a page. What makes it a layer is that it gets added to the existing content, temporarily obscuring part of it and blocking interaction with all of it, except itself.lThan/markgThan Users see the layer and see the part of the viewport not occupied by the layer, but something tells them that that other part is not currently available for interaction.lThan/pgThan
      lThan/sectiongThan
      lThansection id="what" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanWhat are layers for?lThan/h2gThan
        lThan/headergThan
        lThanpgThanA layer is usually an interruption. Interaction is taking place, and then something special happens. Doubt arises about what should happen next. So a detour is appropriate. Before the interaction continues, Utopia and the user clarify or settle something.lThan/pgThan
        lThanpgThanThe thing to be clarified or settled could be:lThan/pgThan
        lThanulgThan
          lThanligThanConfirm that this is what you want to do.lThan/ligThan
          lThanligThanConfirm that these are the correct facts.lThan/ligThan
          lThanligThanBe aware of the following requirements.lThan/ligThan
          lThanligThanNote the following consequences of your answer.lThan/ligThan
          lThanligThanCertify that you have read and understand these terms and conditions.lThan/ligThan
        lThan/ulgThan
        lThanpgThanA layer addresses that need by covering part of the page with the detour process and then, when its chore is complete, disappearing, revealing the original page.lThan/pgThan
        lThanpgThanNote the potential problem here. lThanmark id="hint-02" class="hint covert"gThanThe user may need to examine the page content to resolve the question asked by the layer, but the layer is lThanstronggThancovering some of the contentlThan/stronggThan!lThan/markgThan So, if you are not careful, your layer can prevent itself from achieving its purpose.lThan/pgThan
      lThan/sectiongThan
      lThansection id="why" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanBuilt-in layerslThan/h2gThan
        lThan/headergThan
        lThanpgThanThere are three layer types built into the lThancodegThanWindowlThan/codegThan Web API.lThan/pgThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanAlertlThan/h3gThan
          lThan/headergThan
          lThanpgThanThe simplest built-in layer type is the lThancodegThanalertlThan/codegThan method. Here is an example:lThan/pgThan
          lThansection class="example"gThan
            lThanheadergThan
              lThanh3gThanCommunication preferencelThan/h3gThan
            lThan/headergThan
            lThanformgThan
              lThanfieldsetgThan
                lThanlegendgThanPlease send my statements and confirmationslThan/legendgThan
                lThanpgThanlThanlabelgThan
                  lThaninput type="radio" name="compref" value="elec" checkedgThan
                  electronically
                lThan/labelgThanlThan/pgThan
                lThanpgThan
                  lThanlabel
                    title="Mail may make you ineligible for some fee discounts."
                  gThan
                    lThaninput
                      type="radio"
                      name="compref"
                      value="mail"
                      data-focusalert="Mail may make you ineligible for some fee discounts."
                    gThan
                    by mail
                  lThan/labelgThan
                lThan/pgThan
                lThanp class="center"gThan
                  lThanbutton type="button"gThanSubmitlThan/buttongThan
                lThan/pgThan
              lThan/fieldsetgThan
            lThan/formgThan
          lThan/sectiongThan
          lThanpgThanPerform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanClick lThanqgThanelectronicallylThan/qgThan in the above example to put it into focus.lThan/ligThan
            lThanligThanPress the lThankbdgThan&downarrow;lThan/kbdgThan key. Note that an alert appears, covering part of the viewport.lThan/ligThan
            lThanligThanTry to click the lThanqgThanSubmitlThan/qgThan button. Note that interaction with it is blocked.lThan/ligThan
            lThanligThanPress the lThankbdgThanENTERlThan/kbdgThan key, twice if necessary. Note that this dismisses the alert, completes your radio-button change, and lets you interact with the form.lThan/ligThan
            lThanligThanInspect the lThanqgThanby maillThan/qgThan label with the developer tools. Note that it contains an lThancodegThaninputlThan/codegThan element with a lThancodegThandata-focusalertlThan/codegThan attribute.lThan/ligThan
            lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, select lThancodegThanmod/layer/nav.jslThan/codegThan.lThan/ligThan
            lThanligThanExamine the lThancodegThancreateFocusAlertListenerslThan/codegThan. It creates listeners for elements (like this input) that have lThancodegThandata-focusalertlThan/codegThan attributes.lThan/ligThan
            lThanligThanExamine the lThancodegThanalertHandlerlThan/codegThan function. When a listener executes it, it launches an lThancodegThanalertlThan/codegThan layer.lThan/ligThan
          lThan/olgThan
          lThanpgThanThe created listeners listen for the lThancodegThanfocusinlThan/codegThan event. That event occurs when an element is about to go into focus. (You triggered that event when you navigated to the lThancodegThanby maillThan/codegThan radio button.) Upon such an event, a listener passes to lThancodegThanalertHandlerlThan/codegThan the value of the element&rsquo;s lThancodegThandata-focusalertlThan/codegThan attribute and calls the function, which, in turn, displays an alert layer.lThan/pgThan
          lThanpgThanThe lThancodegThanwindow.alert()lThan/codegThan method is part of the HTML5 standard, so in principle you don&rsquo;t need to do more to make it accessible, but assistive technologies do not always support it correctly. The NVDA screen reader, for example, announces the alert without ever telling the user about the lThanqgThanby maillThan/qgThan option that it is warning about. It also misinforms the user that the alert message is on row 1 of 2 rows of a table.lThan/pgThan
          lThanpgThanBuilt-in alerts are governed by browsers. You can&rsquo;t decide where on the page they appear, what they look like, or what the lThanqgThanOKlThan/qgThan button text says. You can&rsquo;t change how they look. So they are relatively easy to implement, but not very configurable.lThan/pgThan
        lThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanConfirmlThan/h3gThan
          lThan/headergThan
          lThanpgThanlThanmark id="hint-03" class="hint covert"gThanThe lThancodegThanconfirmlThan/codegThan method is a little more complex. It has two buttons: lThanqgThanOKlThan/qgThan and lThanqgThanCancellThan/qgThan.lThan/markgThan Here is an example:lThan/pgThan
          lThansection class="example"gThan
            lThanheadergThan
              lThanh3gThanAgent authorizationlThan/h3gThan
            lThan/headergThan
            lThanformgThan
              lThanpgThanI authorize the above-named agent to perform all actions on my account that I may perform.lThan/pgThan
              lThanp class="center"gThan
                lThanbutton
                  type="button"
                  class="title-confirm"
                  title="You are giving your agent full power over your account!"
                  data-confirm="You are giving your agent full power over your account!"
                  data-dest="agent-ack"
                gThanAgreelThan/buttongThan
              lThan/pgThan
            lThan/formgThan
            lThanp id="agent-ack" class="ack"gThanlThan/pgThan
          lThan/sectiongThan
          lThanpgThanPerform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanClick the lThanqgThanAgreelThan/qgThan button in the above example.lThan/ligThan
            lThanligThanSelect lThanqgThanOKlThan/qgThan.lThan/ligThan
            lThanligThanReload the page and repeat, this time selecting lThanqgThanCancellThan/qgThan.lThan/ligThan
            lThanligThanlThanmark id="hint-04" class="hint covert"gThanIn the lThanqgThanSourceslThan/qgThan panel of the developer tools, examine the lThancodegThanconfirmHandlerlThan/codegThan function of lThancodegThannav.jslThan/codegThan.lThan/markgThanlThan/ligThan
          lThan/olgThan
          lThanpgThanThe lThancodegThanconfirmHandlerlThan/codegThan function launches a confirmation layer and processes the choice made by the user between its two options.lThan/pgThan
        lThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanPromptlThan/h3gThan
          lThan/headergThan
          lThanpgThanThe lThancodegThanpromptlThan/codegThan method is still more complex. It provides an input for text. Here is an example, which uses the lThancodegThanpromptlThan/codegThan method for the lThanqgThanYeslThan/qgThan button and the lThancodegThanalertlThan/codegThan method for the lThanqgThanNolThan/qgThan button:lThan/pgThan
          lThansection class="example"gThan
            lThanheadergThan
              lThanh3gThanYour retirement scenarioslThan/h3gThan
            lThan/headergThan
            lThanformgThan
              lThanfieldsetgThan
                lThanlegendgThan
                  Do you want to save this retirement scenario?
                lThan/legendgThan
                lThanp class="center"gThan
                  lThanbutton
                    id="scenario-yes"
                    type="button"
                    data-prompt="Enter an optional shortcut (1 to 10 letters a&ndash;z) for this scenario."
                    data-dirty="[^a-z]"
                    data-length="10"
                    data-dest="scenario-ack"
                    data-prefix="The shortcut for this scenario will be: "
                  gThanYeslThan/buttongThan
                lThan/pgThan
                lThanp class="center"gThan
                  lThanbutton
                    type="button"
                    data-clickalert="This scenario was not saved."
                    data-dest="scenario-ack"
                  gThanNolThan/buttongThan
                lThan/pgThan
              lThan/fieldsetgThan
            lThan/formgThan
            lThanp id="scenario-ack" class="ack" tabindex="-1"gThanlThan/pgThan
          lThan/sectiongThan
          lThanpgThanPerform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanClick the lThanqgThanYeslThan/qgThan button in the above example.lThan/ligThan
            lThanligThanClick the lThanqgThanCancellThan/qgThan button on the prompt layer.lThan/ligThan
            lThanligThanReload the page and repeat, except click the lThanqgThanOKlThan/qgThan button.lThan/ligThan
            lThanligThanReload the page and repeat, except enter some text in the input box before clicking the lThanqgThanOKlThan/qgThan button. Note that the text is sanitized to comply with the specified format rule.lThan/ligThan
            lThanligThanInspect the lThanqgThanYeslThan/qgThan button in the developer tools.lThan/ligThan
            lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, examine the lThancodegThanpromptHandlerlThan/codegThan function.lThan/ligThan
          lThan/olgThan
          lThanpgThanThe lThanqgThanYeslThan/qgThan button contains some lThancodegThandata-*lThan/codegThan attributes used by the lThancodegThanpromptHandlerlThan/codegThan function to construct the prompt message, sanitize the user&rsquo;s input, and construct and display a response.lThan/pgThan
        lThan/sectiongThan
      lThan/sectiongThan
      lThansection id="builtin" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanCustom layerslThan/h2gThan
        lThan/headergThan
        lThanpgThanAlthough using built-in layers is straightforward and they take care of basic accessibility, they have limited functionality and configurability. Usually, Utopia UIs, when they display layers, display custom layers.lThan/pgThan
        lThanpgThanAn accessible custom layer:lThan/pgThan
        lThanulgThan
          lThanligThanappears when reasonably expectedlThan/ligThan
          lThanligThanis made known to the userlThan/ligThan
          lThanligThansuccessfully blocks interaction with the rest of the viewportlThan/ligThan
          lThanligThanhas accessible contentlThan/ligThan
          lThanligThanallows the user to see information that it covers if relevantlThan/ligThan
          lThanligThanallows the user to dismiss it with an explicit control and also by pressing the lThankbdgThanESCAPElThan/kbdgThan keylThan/ligThan
          lThanligThanwhen dismissed puts the expected element into focuslThan/ligThan
        lThan/ulgThan
        lThanpgThanThere are many ways to implement accessible custom layers. If you attend to the above-stated requirements and test to ensure that you have satisfied them, your custom layer will be accessible.lThan/pgThan
        lThanpgThanThe most common case in which UI creators at Utopia decide to use custom layers is transaction cancelation. When a user begins to define a transaction but explicitly requests that it be abandoned, Utopia UIs typically launch a layer to tell the user what the consequences will be and ask the user to confirm or rescind the cancelation.lThan/pgThan
        lThanpgThanThis common case entails accessibility risks:lThan/pgThan
        lThanulgThan
          lThanligThanThe layer covers the details of a transaction while the UI asks the user to finalize a decision about it. The user who doesn&rsquo;t remember all the details could be frustrated that they are hidden when needed.lThan/ligThan
          lThanligThanThe question asked to the user is whether to undo an undoing. That is intrinsically complex and exposes the user to a risk of doing the opposite of what is intended.lThan/ligThan
        lThan/ulgThan
        lThanpgThanThese obstacles to accessibility can be overcome. Specifically:lThan/pgThan
        lThanulgThan
          lThanligThanYou can let the user see the hidden details without dismissing the layer, such as by allowing the user to minimize it temporarily or to drag it around the viewport.lThan/ligThan
          lThanligThanYou can ensure that the controls offered by the layer for making the final decision are fully explained, leaving no room for doubt about their effects. For example, instead of lThanqgThanYeslThan/qgThan and lThanqgThanNolThan/qgThan buttons, you can offer lThanqgThanYes, cancellThan/qgThanand lThanqgThanNo, don&rsquo;t cancellThan/qgThan buttons.lThan/ligThan
        lThan/ulgThan
        lThanpgThanAn example will illustrate the possibility of an accessible layer to confirm or rescind an important transaction decision. Perform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanOpen an lThana href="../../gen/examples/layer" target="_blank"gThanexample of an accessible order-submission interfacelThan/agThan.lThan/ligThan
          lThanligThanClick the lThanqgThanSubmitlThan/qgThan button. Note that a confirmation dialog appears and goes into focus. That ensures that it comes to the attention of assistive technologies.lThan/ligThan
          lThanligThanTry to use the mouse to interact with the three buttons in the lThanqgThanActionlThan/qgThan section. If you can do so, you have found a bug; please report it!lThan/ligThan
          lThanligThanUse the lThankbdgThanTABlThan/kbdgThan key and the lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination to navigate. Try to escape the dialog with them. If you can do so, you have found a bug; please report it!lThan/ligThan
          lThanligThanExamine the lThanqgThanYes, submit nowlThan/qgThan button in the Accessibility Tree. Note that it has a role and name, and is in a group with a name that explains the button. This accessibility arises from the coding of the button in a lThancodegThanfieldsetlThan/codegThan element with a lThancodegThanlegendlThan/codegThan element.lThan/ligThan
          lThanligThanClick the lThanqgThanHidelThan/qgThan button.lThan/ligThan
          lThanligThanVerify with the collapsed dialog that lThankbdgThanTABlThan/kbdgThan navigation still stays within the dialog.lThan/ligThan
          lThanligThanClick the lThanqgThanShowlThan/qgThan button.lThan/ligThan
          lThanligThanVerify that you can activate the lThanqgThanHidelThan/qgThan and lThanqgThanShowlThan/qgThan buttons with the lThankbdgThanSPACElThan/kbdgThan key, too, once you have used lThankbdgThanTABlThan/kbdgThan or lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan to put them into focus.lThan/ligThan
          lThanligThanClick the lThanqgThanCloselThan/qgThan button. Note that the dialog and the surrounding shading disappear and the button that launched them goes into focus again.lThan/ligThan
          lThanligThanLaunch the layer again and click the lThanqgThanNo, do not &hellip; yetlThan/qgThan button.lThan/ligThan
          lThanligThanLaunch the layer again and click the lThanqgThanYes &hellip; nowlThan/qgThan button.lThan/ligThan
          lThanligThanReload the page and make the layer appear again. Then close it by pressing the lThankbdgThanESCAPElThan/kbdgThan key.lThan/ligThan
          lThanligThanSimilarly, check the behavior of the custom layer when you click the lThanqgThanCancel itlThan/qgThan button instead of the lThanqgThanSubmit itlThan/qgThan button.lThan/ligThan
        lThan/olgThan
        lThanpgThanThis example is only about layer accessibility, so after a layer is closed it doesn&rsquo;t take you anywhere else.lThan/pgThan
        lThanpgThanThe above operations test the interface for the accessibility features listed above.lThan/pgThan
        lThanpgThanThe HTML, CSS, and JavaScript coding that makes this example work accessibly is similar to that underlying the built-in layer mechanisms discussed above. But without the built-in mechanisms you need to code the accessibility features that they automatically provide. The example also offers some additional features. So, the coding here needs to be more elaborate.lThan/pgThan
        lThanpgThanOne of the accessibility features you observed above is focus management. When a layer opens, it goes into focus, so the user becomes aware of it and can easily begin to interact with it. When a layer is closed, an appropriate element goes into focus. In the case of this example, if the user aborted the (submission or cancelation) action, the button that launched the layer goes into focus again. To see how this feature is implemented here, perform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanInspect the lThanqgThanSubmit itlThan/qgThan button with the developer tools. Note that it has a lThancodegThanclasslThan/codegThan attribute with the value lThancodegThancustom-confirmlThan/codegThan and an lThancodegThanaria-controlslThan/codegThan attribute with the value lThancodegThanlayer0lThan/codegThan.lThan/ligThan
          lThanligThanBelow that, find the code for the lThancodegThanCancel itlThan/codegThan button. Note that it is similar, except that the value of lThancodegThanaria-controlslThan/codegThan is lThancodegThanlayer1lThan/codegThan instead of lThancodegThanlayer0lThan/codegThan.lThan/ligThan
          lThanligThanlThanmark id="hint-05" class="hint covert"gThanIn the lThanqgThanSourceslThan/qgThan panel, select lThancodegThannav.jslThan/codegThan. This file contains the JavaScript code for this example.lThan/markgThanlThan/ligThan
          lThanligThanIn lThancodegThannav.jslThan/codegThan, examine the function lThancodegThanlayerCloseHandlerlThan/codegThan. Note that it defines a variable named lThancodegThanlayerLauncherlThan/codegThan, which refers to the button that launched the layer. This definition searches the lThancodegThanbodylThan/codegThan element of the document for the first occurrence of an element that has a lThancodegThanclasslThan/codegThan value of lThancodegThancustom-confirmlThan/codegThan and an lThancodegThanaria-controlslThan/codegThan value of whatever the lThancodegThanidlThan/codegThan of the layer is. At the end, if the user activated one of the two buttons that abort the action, the function closes the layer by changing its lThancodegThanovertlThan/codegThan class to lThancodegThancovertlThan/codegThan and gives the focus to the lThancodegThanlayerLauncherlThan/codegThan element.lThan/ligThan
        lThan/olgThan
        lThanpgThanThe lThanqgThanSubmit itlThan/qgThan and lThanqgThanCancel itlThan/qgThan buttons have lThancodegThanaria-controlslThan/codegThan attributes that perform two functions:lThan/pgThan
        lThanulgThan
          lThanligThanThey choose which layer to launch.lThan/ligThan
          lThanligThanThey tell the application which button to put back into focus when the layer is closed.lThan/ligThan
        lThan/ulgThan
        lThanpgThanReturning the focus to its pre-layer element is the typical practice for accessibility. It is not an absolute rule, however. The user&rsquo;s action on the layer might make the previous focal element obsolete. This example application uses the lThancodegThanaria-controlslThan/codegThan attribute to return the focus when the user aborts the action. If, however, the user confirms the action, the buttons become obsolete. So then the application finds an element that has been given an lThancodegThanidlThan/codegThan of lThancodegThanack-homelThan/codegThan, empties that element out (deleting the three-button form), inserts an acknowledgement there, and puts it into focus. This ensures that any assistive technology is made aware of the acknowledgement.lThan/pgThan
      lThan/sectiongThan
      lThansection id="custom" class="section-quiz"gThanlThan/sectiongThan
    lThan/maingThan
  lThan/bodygThan
lThan/htmlgThan

==gThan new/layer/nav.js <==
// Variables
messages.confirmed = 'Confirmed';
messages.canceled = 'Canceled';
// Functions
const clean = (rawText, dirtyPattern, lengthLimit) (arrow) {
  const cleanText = rawText.replace(RegExp(dirtyPattern, 'g'), '');
  if (lengthLimit) {
    return cleanText.slice(0, lengthLimit);
  }
  else {
    return cleanText;
  }
};
// Handlers
const alertHandler = (event, trigger) (arrow) {
  const targetData = event.target.dataset;
  const text = targetData[trigger];
  if (text) {
    window.alert(text);
    const dest = targetData.dest;
    if (dest) {
      document.getElementById(dest).textContent = '';
    }
  }
};
const confirmHandler = event (arrow) {
  const target = event.target;
  const text = target.dataset.confirm;
  if (text) {
    const confirmation = window.confirm(text);
    const dest = document.getElementById(target.dataset.dest);
    if (dest) {
      dest.textContent = messages[confirmation ? 'confirmed' : 'canceled'];
      dest.tabIndex = '0';
      dest.focus();
    }
  }
};
const promptHandler = event (arrow) {
  const targetData = event.target.dataset;
  const text = targetData.prompt;
  if (text) {
    const rawInput = window.prompt(text);
    if (rawInput) {
      const dest = document.getElementById(targetData.dest);
      if (dest) {
        let cleanInput = rawInput;
        if (targetData.dirty) {
          cleanInput = clean(rawInput, targetData.dirty, targetData.length);
        }
        if (cleanInput) {
          if (targetData.prefix) {
            cleanInput = `${targetData.prefix}${cleanInput}`;
          }
          dest.textContent = cleanInput;
          dest.focus();
        }
      }
    }
  }
};
// Listeners
const createClickAlertListeners = () (arrow) {
  const alertables = document.body.querySelectorAll('[data-clickalert]');
  for (let i = 0; i lThan alertables.length; i++) {
    alertables.item(i).addEventListener('click', () (arrow) {
      alertHandler(event, 'clickalert');
    });
  }
};
const createFocusAlertListeners = () (arrow) {
  const alertables = document.body.querySelectorAll('[data-focusalert]');
  for (let i = 0; i lThan alertables.length; i++) {
    alertables.item(i).addEventListener(
      'focusin', () (arrow) {
        alertHandler(event, 'focusalert');
      }, {
        once: true
      }
    );
  }
};
const createConfirmListeners = () (arrow) {
  const confirmables = document.body.querySelectorAll('[data-confirm]');
  for (let i = 0; i lThan confirmables.length; i++) {
    confirmables.item(i).addEventListener('click', confirmHandler);
  }
};
const createPromptListeners = () (arrow) {
  const promptables = document.body.querySelectorAll('[data-prompt]');
  for (let i = 0; i lThan promptables.length; i++) {
    promptables.item(i).addEventListener(
      'click', promptHandler
    );
  }
};
document.addEventListener(
  'DOMContentLoaded', createClickAlertListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createFocusAlertListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createConfirmListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createPromptListeners, {
    once: true
  }
);

==gThan new/layer/script.js <==
// Objects
quizzes = {
  what: {
    type: 'cn',
    question: 'A layer',
    answers: [
      'covers the entire viewport',
      'covers part of the viewport',
      'allows the user to work on all parts of the page',
      'allows the user to work on only the visible parts of the page',
      'allows the user to work only on the layer itself',
      'is a temporary part of a page',
      'is a permanent part of a page'
    ],
    correct: new Set([
      'covers part of the viewport',
      'allows the user to work only on the layer itself',
      'is a temporary part of a page'
    ]),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  why: {
    type: 'cn',
    question: 'Layers with these titles are likely to have accessibility problems:',
    answers: [
      'lThanqgThanDo you agree with the following terms?lThan/qgThan',
      'lThanqgThanPlease rate your investment experience on this scale:lThan/qgThan',
      'lThanqgThanProceed with the purchase at the price you specified?lThan/qgThan',
      'lThanqgThanHave you received a prospectus for each security named on the form?lThan/qgThan',
      'lThanqgThanIs the address you entered your residence?lThan/qgThan',
      'lThanqgThanPlease indicate the communications you wish to receive electronically:lThan/qgThan'
    ],
    correct: new Set([
      'lThanqgThanProceed with the purchase at the price you specified?lThan/qgThan',
      'lThanqgThanHave you received a prospectus for each security named on the form?lThan/qgThan',
      'lThanqgThanIs the address you entered your residence?lThan/qgThan'
    ]),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  builtin: {
    type: 't1',
    question: 'If lThancodegThanwarnlThan/codegThan is the name of a text string that you want displayed on a layer asking the user whether to proceed or stop, correct this method call so it launches that layer.',
    width: 40,
    init: 'document.alert(message=warn);',
    test: /^ *window *\. *confirm *\( *warn *\) *;? */,
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  custom: {
    type: 't1',
    question: 'Which lThancodegThaneventlThan/codegThan method does the lThancodegThankeyHandlerlThan/codegThan function of the custom-confirmation-layer example call in order to determine whether the lThankbdgThanSHIFTlThan/kbdgThan key is engaged while the lThankbdgThanTABlThan/kbdgThan key is pressed?',
    width: 30,
    correct: new Set([
      'getModifierState',
      'getModifierState()',
      "getModifierState('Shift')"
    ]),
    hints: ['hint-05'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==gThan new/priority/index.html <==
lThan!DOCTYPE htmlgThan
lThanhtml lang="en-US"gThan
  lThanheadgThan
    lThantitlegThanlThan/titlegThan
    lThanmeta charset="UTF-8"gThan
    lThanscript src="../../gen/homeData.js"gThanlThan/scriptgThan
    lThanscript src="../../gen/modOnLoad.js"gThanlThan/scriptgThan
  lThan/headgThan
  lThanbody itemscope itemtype="https://schema.org/WebPage"gThan
    lThanmaingThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanWhy we prioritizelThan/h2gThan
        lThan/headergThan
        lThanpgThanMaking UIs more accessible produces benefits, but can entail costs, too. So Utopia UI creators consider both costs and benefits when deciding which accessibility features to implement, and when.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanHow we prioritizelThan/h2gThan
        lThan/headergThan
        lThanpgThanTypical accessibility priorities at Utopia include:lThan/pgThan
        lThanulgThan
          lThanligThanhigh-traffic forms and views more than low-traffic oneslThan/ligThan
          lThanligThanreusable components (that multiple Utopia projects adopt) more than individual interfaceslThan/ligThan
          lThanligThanessential features more than merely convenient oneslThan/ligThan
          lThanligThanissues reported to Utopia by clients more than issues that might arise in the futurelThan/ligThan
          lThanligThanlThanmark id="hint-00" class="hint covert"gThannew UI design more thorough than improvement of existing UIslThan/markgThanlThan/ligThan
          lThanligThanproduction interfaces more than experimental oneslThan/ligThan
          lThanligThaneasy-to-discover and easy-to-correct defects more than subtle and complex oneslThan/ligThan
          lThanligThanconformity with formal guidelines more than additional improvementslThan/ligThan
        lThan/ulgThan
        lThanpgThanVarious participants make decisions on priorities. These may include you as an individual developer, your team as a whole, writers, designers, project managers, product owners, component developers, and the Accessibility Office. As Utopia adopts new ways of working, responsibilities may shift.lThan/pgThan
      lThan/sectiongThan
      lThansection id="how" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanTiminglThan/h2gThan
        lThan/headergThan
        lThanpgThanExperts agree that lThanmark id="hint-01" class="hint covert"gThanwe can produce accessibility most efficiently and effectively if we start doing it at the beginning.lThan/markgThanlThan/pgThan
        lThanulgThan
          lThanligThan
            Carie Fisher says: lThanq cite="https://www.deque.com/blog/5-digital-accessibility-myths-busted/"gThanThink about accessibility early and often in the design and development process to save time, effort, and money on the overall projectlThan/qgThan.
            lThancitegThanlThana href="https://www.deque.com/blog/5-digital-accessibility-myths-busted/"gThanlThanqgThan5 Digital Accessibility Myths BustedlThan/qgThanlThan/agThan, 2018lThan/citegThan.
          lThan/ligThan
          lThanligThan
            Sagar Barbhaya says lThanq cite="shift-left-csun-Sagar-Barbhaya.pdf"gThan56% of all software defects emerge during the requirement phase, 27% in the design phase, 7% during the development phaselThan/qgThan.
            lThancitegThanlThana href="shift-left-csun-Sagar-Barbhaya.pdf"gThanlThanqgThanShift-Left AccessibilitylThan/qgThan, 2018lThan/agThanlThan/citegThan.
          lThan/ligThan
          lThanligThan
            Stephen Watts says lThanq cite="https://www.bmc.com/blogs/what-is-shift-left-shift-left-testing-explained/"gThandefects identified and resolved during the requirement &amp; design phase are about 100 times less expensive to fix than those discovered after the release of a product.lThan/qgThan.
            lThancitegThanlThana href="shift-left-csun-Sagar-Barbhaya.pdf"gThanlThanqgThanWhat is &lsquo;Shift Left&rsquo;? Shift Left Testing ExplainedlThan/qgThan, 2017lThan/agThanlThan/citegThan.
          lThan/ligThan
        lThan/ulgThan
        lThanpgThanConsequently, priorities for accessibility at Utopia are shifting left. Increasingly, the emphasis is on making new UIs highly accessible as soon as work on their design begins.lThan/pgThan
      lThan/sectiongThan
      lThansection id="when" class="section-quiz"gThanlThan/sectiongThan
    lThan/maingThan
  lThan/bodygThan
lThan/htmlgThan

==gThan new/priority/script.js <==
// Objects
quizzes = {
  how: {
    type: 'c1',
    question: 'How does Utopia typically prioritize accessibility between existing and new interfaces?',
    answers: [
      'Address all issues in existing interfaces first',
      'Work on both kinds, but more thoroughly for existing interfaces',
      'Work on both kinds, but more thoroughly for new interfaces',
      'Leave existing interfaces inaccessible and work only on new ones'
    ],
    correct: new Set([
      'Work on both kinds, but more thoroughly for new interfaces'
    ]),
    hints: [
      'hint-00'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  priority: {
    type: 'c1',
    question: 'Experts advise that UIs should be made accessible',
    answers: [
      'only after complaints are received',
      'in production but not during testing',
      'when being converted from designs to code, but not before',
      'starting when they are first being planned'
    ],
    correct: new Set(['starting when they are first being planned']),
    hints: [
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==gThan new/tablist/index.html <==
lThan!DOCTYPE htmlgThan
lThanhtml lang="en-US"gThan
  lThanheadgThan
    lThantitlegThanlThan/titlegThan
    lThanmeta charset="UTF-8"gThan
    lThanscript src="../../gen/homeData.js"gThanlThan/scriptgThan
    lThanscript src="../../gen/modOnLoad.js"gThanlThan/scriptgThan
    lThanscript src="nav.js"gThanlThan/scriptgThan
    lThanlink rel="stylesheet" href="style.css"gThan
  lThan/headgThan
  lThanbody itemscope itemtype="https://schema.org/WebPage"gThan
    lThanmaingThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanIntroductionlThan/h2gThan
        lThan/headergThan
        lThanpgThanUIs often give users opportunities to choose among blocks of content. Examples:lThan/pgThan
        lThanulgThan
          lThanligThanWhich fund to see details aboutlThan/ligThan
          lThanligThanWhat period of time to see price changes overlThan/ligThan
          lThanligThanWhat kind of account to fill out a form to openlThan/ligThan
          lThanligThanWhat topic to get educated aboutlThan/ligThan
        lThan/ulgThan
        lThanpgThanUtopia UIs give such choices to users by means of various lThandfngThancontent selection mechanismlThan/dfngThans. These are mechanisms that offer controls to users for selecting what content to consume.lThan/pgThan
        lThanpgThanOne content selection mechanism is the lThandfngThantab listlThan/dfngThan (sometimes also called lThandfngThantab setlThan/dfngThan). It is similar, but not identical, to navigation links, accordions, radio buttons, checkboxes, dropdown lists, menus, buttons, action bars, and toggles.lThan/pgThan
        lThanpgThanThe tab list mechanism can be made accessible, but not as easily as some of the other mechanisms just mentioned. Some of them are built into HTML5, but the tab list mechanism isn&rsquo;t. When a UI creator decides to use tab lists for user selection of content, that implies some complexity in the coding to ensure accessibility.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanWhat is a tab list?lThan/h2gThan
        lThan/headergThan
        lThanpgThanA tab list is a list. Normally its items aren&rsquo;t numbered, and you create it with the HTML5 lThancodegThanullThan/codegThan element. If you had reason to use the lThancodegThanollThan/codegThan or lThancodegThandllThan/codegThan element instead, however, you could. In fact, it could even be a collection of elements not organized into any HTML5 list type, but let&rsquo;s assume it is a lThancodegThanullThan/codegThan list. Coding a list as a list is generally a contribution to accessibility.lThan/pgThan
        lThanpgThanEach item in a tab list (i.e. each lThandfngThantablThan/dfngThan) is a device for selecting content. This sense of lThanqgThantablThan/qgThan is distinct from the sense referring to the lThankbdgThanTABlThan/kbdgThan key on a keyboard or a tab stop in a document layout.lThan/pgThan
        lThanpgThanlThanmark id="hint-00" class="hint covert"gThanEach tab selects a particular item of content, and that item is called a lThandfngThantab panellThan/dfngThan.lThan/markgThanlThan/pgThan
        lThanpgThanThe tabs are typically lThancodegThanlilThan/codegThan elements, as in any other such list. (They could be lThancodegThandtlThan/codegThan or lThancodegThanddlThan/codegThan elements if in a lThancodegThandllThan/codegThan list.)lThan/pgThan
        lThanpgThanUsers use tabs to select content. So, tabs resemble controls in a form, even though they are not in a form.lThan/pgThan
        lThanpgThanTab lists can appear anywhere. Most commonly, they are at or near the top of a page. They can be arranged vertically or horizontally. Horizontal arrangement is more common.lThan/pgThan
      lThan/sectiongThan
      lThansection id="what" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanTab list behaviorlThan/h2gThan
        lThan/headergThan
        lThanpgThanAn ordinary list doesn&rsquo;t behave; it just sits on the page waiting to be read.lThan/pgThan
        lThanpgThanBut a tab list does behave. It has a container, and each tab fills that container with the tab&rsquo;s tab panel, replacing any tab panel that was already there. So the tab list controls the content of that container.lThan/pgThan
        lThanpgThanThe user selects the content for the container by selecting one of the tabs.lThan/pgThan
        lThanpgThanWhen you implement a tab list, you have two alternative user selection methods to choose between:lThan/pgThan
        lThanulgThan
          lThanligThanClicklThan/ligThan
          lThanligThanFocuslThan/ligThan
        lThan/ulgThan
        lThanpgThanIf you choose the click method (also called lThandfngThanmanual activationlThan/dfngThan), the user selects content by clicking one of the tabs. If you choose the focus method (also called lThandfngThanautomatic activationlThan/dfngThan), the user selects content by putting one of the tabs into focus. For somebody using a keyboard to navigate, the click method requires two steps: put a tab into focus and then use the lThankbdgThanSPACElThan/kbdgThan or lThankbdgThanENTERlThan/kbdgThan key to select it. (Compare radio buttons, which get automatically selected when focused, versus checkboxes, which require the extra step of selection with the lThankbdgThanSPACElThan/kbdgThan key.)lThanpgThan
        lThanpgThanlThanmark id="hint-01" class="hint covert"gThanA tab list has particular rules for navigation:lThan/markgThanlThan/pgThan
        lThanolgThan
          lThanligThanThe lThankbdgThanTABlThan/kbdgThan key navigates between the selected tab and its tab panel, and also into and out of the tab list.lThan/ligThan
          lThanligThanAll four arrow keys move the focus among the tabs if they are arranged vertically, but only the left and right arrow keys do so if the tabs are arranged horizontally.lThan/ligThan
          lThanligThanArrow-key navigation cycles among the tabs: Trying to move the focus past either end moves it to the other end.lThan/ligThan
          lThanligThanThe lThankbdgThanHOMElThan/kbdgThan key navigates to the first tab.lThan/ligThan
          lThanligThanThe lThankbdgThanENDlThan/kbdgThan key navigates to the last tab.lThan/ligThan
          lThanligThanClicking any tab ensures it is both focused and selected.lThan/ligThan
          lThanligThanIf a tab is focused but not selected, the lThankbdgThanSPACElThan/kbdgThan or lThankbdgThanENTERlThan/kbdgThan key selects it.lThan/ligThan
          lThanligThanClicking the currently displayed tab panel focuses it.lThan/ligThan
        lThan/olgThan
        lThanpgThanAn accessible tab list also tells the user which tab&rsquo;s tab panel is currently selected. It does so by making that tab look different from the other tabs. In addition, selecting the same tab again would have no effect, so it improves accessibility to disable the currently selected tab.lThan/pgThan
        lThansection class="example"gThan
          lThanheadergThan
            lThanh3gThanlThanlabel for="types"gThanInvestment typeslThan/labelgThanlThan/h3gThan
          lThan/headergThan
          lThanformgThan
            lThanlabelgThan
              lThaninput id="types-hard" type="checkbox" checkedgThan
              Require click to select
            lThan/labelgThan
          lThan/formgThan
          lThanul id="types" role="tablist" class="tablist-hard"gThan
            lThanli
              id="tabmf"
              role="tab"
              tabindex="0"
              aria-selected="true"
              aria-controls="defmf"
            gThan
              Mutual fund
            lThan/ligThan
            lThanli
              id="tabetf"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defetf"
            gThan
              Exchange-traded fund
            lThan/ligThan
            lThanli
              id="tabcs"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defcs"
            gThan
              Common stock
            lThan/ligThan
            lThanli
              id="tabps"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defps"
            gThan
              Preferred stock
            lThan/ligThan
            lThanli
              id="tabb"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defb"
            gThan
              Bond
            lThan/ligThan
          lThan/ulgThan
          lThansectiongThan
            lThanp
              id="defmf"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabmf"
              class="overt"gThanA type of investment that pools shareholder money and invests it in a variety of securities. Each investor owns shares of the fund and can buy or sell these shares at any time. Mutual funds are typically more diversified, low-cost, and convenient than investing in individual securities, and they&rsquo;re professionally managed.lThan/pgThan
            lThanp
              id="defetf"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabetf"
              class="covert"gThan
              A type of investment with characteristics of both mutual funds and individual stocks. ETFs are professionally managed and typically diversified, like mutual funds, but they can be bought and sold at any point during the trading day using straightforward or sophisticated strategies.
            lThan/pgThan
            lThanp
              id="defcs"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabcs"
              class="covert"gThan
              An investment that represents part ownership in a corporation. Each share of stock is a proportional stake in the corporation&rsquo;s assets and profits.
            lThan/pgThan
            lThanp
              id="defps"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabps"
              class="covert"gThan
              Stock that takes precedence over common stock when dividends are paid or assets are liquidated. A preferred security doesn&rsquo;t usually carry voting rights.
            lThan/pgThan
            lThanp
              id="defb"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabb"
              class="covert"gThan
              A loan made to a corporation or government in exchange for regular interest payments. The bond issuer agrees to pay back the loan by a specific date. Bonds can be traded on the secondary market.
            lThan/pgThan
          lThan/sectiongThan
        lThan/sectiongThan
        lThanpgThanPerform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanIn the above example of a tab list, click the lThanqgThanMutual fundlThan/qgThan tab.lThan/ligThan
          lThanligThanPress the lThankbdgThanTABlThan/kbdgThan key. Note that the focus moves to the tab panel of that tab.lThan/ligThan
          lThanligThanPress the lThankbdgThanTABlThan/kbdgThan key again. Note that the focus moves out of the tab list to the next focusable element (a lThanqgThanTest yourselflThan/qgThan button).lThan/ligThan
          lThanligThanPress the lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination. Note that the focus moves back to the tab panel.lThan/ligThan
          lThanligThanPress the lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination again. Note that the focus moves back to the tab.lThan/ligThan
          lThanligThanPress the lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination again. Note that the focus moves out of the tab list to the checkbox before it.lThan/ligThan
          lThanligThanPress the lThankbdgThanTABlThan/kbdgThan key again. Note that the focus moves back to the lThanqgThanMutual fundlThan/qgThan tab.lThan/ligThan
          lThanligThanPress the lThankbdgThan&leftarrow;lThan/kbdgThan key. Note that the focus moves to the last tab. The selection does not automatically follow the focus, because the tab list currently employs the click method, not the focus method.lThan/ligThan
          lThanligThanPress the lThankbdgThanSPACElThan/kbdgThan key. This acts like a click, changing your selection to the focused tab lThan(qgThanBondlThan/qgThan).lThan/ligThan
          lThanligThanPress the lThankbdgThanSPACElThan/kbdgThan key again. Note that it causes scrolling, as it normally does, because the focused tab is now disabled.lThan/ligThan
          lThanligThanPress the lThankbdgThan&leftarrow;lThan/kbdgThan key and then the lThankbdgThanENTERlThan/kbdgThan key. This (like lThankbdgThanSPACElThan/kbdgThan) is equivalent to clicking the focused tab. Note that you have changed the focus to the previous tab, and then you have selected that tab.lThan/ligThan
          lThanligThanPress the lThankbdgThanENTERlThan/kbdgThan key again. Note that nothing happens. The lThanqgThanPreferred stocklThan/qgThan tab is disabled, so the lThankbdgThanENTERlThan/kbdgThan key performs its normal function, which is nothing.lThan/ligThan
          lThanligThanPress all four arrow keys, the lThankbdgThanHOMElThan/kbdgThan key, and the lThankbdgThanENDlThan/kbdgThan key, to verify that the tab list obeys navigation rules 2, 3, 4, and 5 above.lThan/ligThan
          lThanligThanClick a tab that isn&rsquo;t in focus. Note that it becomes focused and also selected.lThan/ligThan
          lThanligThanClick the tab panel, below the tab list. Note that it becomes focused.lThan/ligThan
          lThanligThanPress the lThankbdgThan&rightarrow;lThan/kbdgThan key. Note that nothing happens, because the focus is not on a tab.lThan/ligThan
          lThanligThanClear the lThanqgThanClick tab to selectlThan/qgThan checkbox. This changes the behavior of the tab list from the click method to the focus method.lThan/ligThan
          lThanligThanClick the lThanqgThanBondlThan/qgThan tab, then press the lThankbdgThan&rightarrow;lThan/kbdgThan key. Note that, with the focus method in force, you have changed the focus and also the selection.lThan/ligThan
          lThanligThanExperiment further with the tab list to observe that it now implements the focus method.lThan/ligThan
        lThan/olgThan
        lThanpgThanWhich method is better: click or focus? The lThana href="https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel"gThanAccessible Rich Internet Applications Working Group recommendslThan/agThan the focus method if the tab panels are all preloaded in the browser, but otherwise recommends the click method. lThana href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus"gThanIt says this helps accessibility.lThan/agThan But it doesn&rsquo;t mention a possible annoyance of the focus method: If the user holds down the left or right arrow key, there will be a rapid replacement of the tab panels with each other. Try it yourself:lThan/pgThan
        lThanolgThan
          lThanligThanClear the lThanqgThanRequire click to selectlThan/qgThan checkbox in the above example.lThan/ligThan
          lThanligThanClick any of the tabs.lThan/ligThan
          lThanligThanHold down the left or right arrow key for a few seconds.lThan/ligThan
        lThan/olgThan
        lThanpgThanImagine a long tab list and a user who is navigating with the arrow keys. The user might need to hold down an arrow key and witness multiple tab panel replacements before arriving at the desired tab. Depending on the tab panel content, this could even create a seizure risk. So, while the focus method requires less work from the user, the click method may be less disruptive, especially if there are many tabs.lThan/pgThan
      lThan/sectiongThan
      lThansection id="behave" class="section-quiz"gThanlThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanMaking tab lists worklThan/h2gThan
        lThan/headergThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanIntroductionlThan/h3gThan
          lThan/headergThan
          lThanpgThanThere is no HTML5 lThancodegThantablistlThan/codegThan, lThancodegThantablThan/codegThan, or lThancodegThantabpanellThan/codegThan element. You can create a tab list and make it accessible with mechanisms in HTML5, CSS, WAI-ARIA, and JavaScript, but this requires more coding than it would if tab lists were native to HTML5.lThan/pgThan
        lThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanHTML implementationlThan/h3gThan
          lThan/headergThan
          lThanpgThanThe above example shows one way to code a tab list. To see how this one is implemented with HTML5, perform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanInspect the lThanqgThanMutual fundlThan/qgThan tab with the developer tools. Note that it is an lThancodegThanlilThan/codegThan item in a lThancodegThanullThan/codegThan list. Note also that, immediately after the end of the lThancodegThanullThan/codegThan element, there is a lThancodegThansectionlThan/codegThan element containing the tab panels.lThan/ligThan
            lThanligThanFind the values of the lThancodegThanrolelThan/codegThan attributes of the tab list, tabs, and tab panels.lThan/ligThan
            lThanligThanFind the values of the lThancodegThanaria-selectedlThan/codegThan attributes of the tabs. Note that only one is lThancodegThantruelThan/codegThan and the others are lThancodegThanfalselThan/codegThan.lThan/ligThan
            lThanligThanFind the values of the lThancodegThantabindexlThan/codegThan attributes of the tabs and tab panels. Note that the selected tab has lThancodegThantabindex="0"lThan/codegThan and the other tabs have lThancodegThantabindex="-1"lThan/codegThan. This means you can put any tab into focus by clicking it (or with JavaScript), but you can put only the selected tab into focus with the lThankbdgThanTABlThan/kbdgThan key. Note that all of the tab panels have lThancodegThantabindex="0"lThan/codegThan. Whichever one happens to be displayed can be put into focus with the lThankbdgThanTABlThan/kbdgThan key.lThan/ligThan
            lThanligThanlThanmark id="hint-02" class="hint covert"gThanFind the values of the lThancodegThanaria-controlslThan/codegThan attributes of the tabs. Choose one tab and then look for the tab panel whose lThancodegThanidlThan/codegThan value is the same as the tab&rsquo;s lThancodegThanaria-controlslThan/codegThan value. That is how each tab is marked as selecting a particular tab panel.lThan/markgThanlThan/ligThan
            lThanligThanFind the values of the lThancodegThanaria-labelledbylThan/codegThan attributes of the tab panels. Choose one tab panel and then look for the element whose lThancodegThanidlThan/codegThan value is the same as the tab panel&rsquo;s lThancodegThanaria-labelledbylThan/codegThan value. That is how each tab panel is given a summary. In this case the summary is the text content of the corresponding tab, but it could have been the text content of a different element.lThan/ligThan
          lThan/olgThan
        lThan/sectiongThan
        lThansection id="html" class="section-quiz"gThanlThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanCSS implementationlThan/h3gThan
          lThan/headergThan
          lThanpgThanTo define the appearance (and disappearance) of the tabs and tab panels, you can use CSS. Perform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanFind the values of the lThancodegThanclasslThan/codegThan attributes of the tab list lThancodegThanullThan/codegThan element and the tab panel lThancodegThanplThan/codegThan elements. The tab list&rsquo;s lThancodegThanclasslThan/codegThan attribute determines whether it employs the click lThan(codegThantablist-hardlThan/codegThan) or focus lThan(codegThantablist-easylThan/codegThan) method. The tab panels&rsquo; lThancodegThanclasslThan/codegThan attribute determines whether they are visible lThan(codegThanovertlThan/codegThan) or hidden lThan(codegThancovertlThan/codegThan).lThan/ligThan
            lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, select the lThancodegThangen/style.csslThan/codegThan file and look for rulesets for lThancodegThanp.covertlThan/codegThan and lThancodegThanp.overtlThan/codegThan. Those selectors are shorthand for lThancodegThanp[class=covert]lThan/codegThan and lThancodegThanp[class=overt]lThan/codegThan. Note that they set the values of the lThancodegThandisplaylThan/codegThan style property to lThancodegThannonelThan/codegThan and lThancodegThanblocklThan/codegThan (the normal value for lThancodegThanplThan/codegThan elements). This mechanism determines which tab panel is visible.lThan/ligThan
            lThanligThanlThanmark id="hint-03" class="hint covert"gThanIn the lThanqgThanSourceslThan/qgThan panel, select the lThancodegThanmod/tablist/style.csslThan/codegThan file. This file contains rulesets defining how tab lists, tabs, and tab panels look.lThan/markgThanlThan/ligThan
            lThanligThanFind the declaration that sets the lThancodegThandisplaylThan/codegThan style property of a tab list. Note that its value is lThancodegThanflexlThan/codegThan. This makes the children of the element (the tabs) spread out horizontally instead of stacking one above the next.lThan/ligThan
            lThanligThanFind the declaration that sets the border radii of the corners of the tabs. This rounds the corners on top of the tabs.lThan/ligThan
            lThanligThanFind the lThancodegThanwriting-modelThan/codegThan declaration for tabs. Temporarily remove it from the stylesheet by clearing its checkbox in the lThanqgThanStyleslThan/qgThan pane. Note how the tabs change their orientation.lThan/ligThan
          lThan/olgThan
          lThanpgThanlThanmark id="hint-04" class="hint covert"gThanTo explore other CSS declarations, you can edit them in the lThanqgThanStyleslThan/qgThan pane and thereby temporarily change them. To edit them, you can check and clear checkboxes, and you can also edit their values.lThan/markgThanlThan/pgThan
        lThan/sectiongThan
        lThansection id="css" class="section-quiz"gThanlThan/sectiongThan
        lThansectiongThan
          lThanheadergThan
            lThanh3gThanJavaScript implementationlThan/h3gThan
          lThan/headergThan
          lThanpgThanTabs and tab panels obey particular rules for tab list navigation and selection, but are made from HTML elements (such as lThancodegThanlilThan/codegThan and lThancodegThanplThan/codegThan) that don&rsquo;t implement all those rules by default. With the appropriate values of the lThancodegThantablistlThan/codegThan element, they implement the rules for navigation with the lThankbdgThanTABlThan/kbdgThan key and lThankbdgThanSHIFTlThan/kbdgThan-lThankbdgThanTABlThan/kbdgThan combination and mouse clicks. But they don&rsquo;t implement the required responses to the arrow, lThankbdgThanHOMElThan/kbdgThan, lThankbdgThanENDlThan/kbdgThan, lThankbdgThanSPACElThan/kbdgThan, and lThankbdgThanENTERlThan/kbdgThan keys, nor do they implement the (click or focus) rules for selection. Therefore, when you construct a tab list that is to operate in the browser, you must write those navigation and selection rules in JavaScript.lThan/pgThan
          lThanpgThanThe JavaScript code listens for applicable keypresses and, when they occur, modifies values of element attributes, such as lThancodegThanaria-selectedlThan/codegThan, lThancodegThantabindexlThan/codegThan, and lThancodegThanclasslThan/codegThan. The code also stops the browser from giving its default responses to those actions when a tab list governs them.lThan/pgThan
          lThanpgThanOne possible approach to JavaScript coding for a tab list is the one that implements the above example. To examine it, perform these operations:lThan/pgThan
          lThanolgThan
            lThanligThanIn the lThanqgThanSourceslThan/qgThan panel, select the lThancodegThanmod/tablist/nav.jslThan/codegThan file. lThan/ligThan
            lThanligThanExamine the last two statements in it. They create listeners that act when particular events occur. One executes a function lThan(codegThantabListKeyHandlerlThan/codegThan) whenever a keyboard key is pressed. The other executes a function lThan(codegThancreateTabListListenerslThan/codegThan) when the page content has finished being loaded, and then turns itself off. That function, in turn, creates a listener for each tab list that it finds on the page. And that listener executes lThancodegThantabListClickHandlerlThan/codegThan whenever the user clicks anywhere inside the tab list.lThan/ligThan
            lThanligThanExamine the function lThancodegThanselectTablThan/codegThan. Note that it deselects the currently selected tab and then selects the new tab given to it as the second argument, which involves changing the values of their lThancodegThanaria-selectedlThan/codegThan and lThancodegThantabindexlThan/codegThan attributes.lThan/ligThan
            lThanligThanlThanmark id="hint-06" class="hint covert"gThanIn the lThancodegThantabListKeyUtillThan/codegThan function, examine the code on lines 22&ndash;36. Note that it defines lThancodegThannewTablThan/codegThan on the basis of which key was pressed.lThan/markgThanlThan/ligThan
          lThan/olgThan
          lThanpgThanThe lThancodegThanaria-controlslThan/codegThan attribute doesn&rsquo;t show and hide tab panels. It helps assistive technologies interpret your interface, and you can use it to choose tab panels to reveal and hide, but it is your JavaScript code (like the lThancodegThanselectTablThan/codegThan function) that actually does the revealing and hiding. In this case, it changes the class between lThancodegThanovertlThan/codegThan and lThancodegThancovertlThan/codegThan, and that in turn will change the value of the style property lThancodegThandisplaylThan/codegThan between lThancodegThanblocklThan/codegThan and lThancodegThannonelThan/codegThan, as specified in lThancodegThanmod/tablist/style.csslThan/codegThan.lThan/pgThan
        lThan/sectiongThan
        lThansection id="js" class="section-quiz"gThanlThan/sectiongThan
      lThan/sectiongThan
    lThan/maingThan
  lThan/bodygThan
lThan/htmlgThan

==gThan new/tablist/nav.js <==
// Functions
const selectTab = (tabList, tab) (arrow) {
  // Deselect the currently selected tab.
  const activeTab = tabList.querySelector('[aria-selected=true]');
  activeTab.setAttribute('aria-selected', 'false');
  activeTab.setAttribute('tabindex', '-1');
  document
  .getElementById(activeTab.getAttribute('aria-controls'))
  .classList
  .replace('overt', 'covert');
  // Select the specified tab.
  tab.setAttribute('aria-selected', 'true');
  tab.setAttribute('tabindex', '0');
  tab.focus();
  document
  .getElementById(tab.getAttribute('aria-controls'))
  .classList
  .replace('covert', 'overt');
};
const tabListKeyUtil = (isEasy, event, tabList, activeElement) (arrow) {
  const key = event.key;
  let newTab;
  if (key === 'ArrowRight') {
    newTab
      = activeElement.nextElementSibling || tabList.firstElementChild;
  }
  else if (key === 'ArrowLeft') {
    newTab
      = activeElement.previousElementSibling || tabList.lastElementChild;
  }
  else if (key === 'Home') {
    newTab = tabList.firstElementChild;
  }
  else if (key === 'End') {
    newTab = tabList.lastElementChild;
  }
  if (newTab) {
    event.preventDefault();
    if (isEasy) {
      selectTab(tabList, newTab);
    }
    else {
      newTab.focus();
    }
  }
  else if (
    (key === 'Enter' || key === ' ')
    && ! isEasy
    && activeElement.getAttribute('aria-selected') === 'false'
  ) {
    event.preventDefault();
    selectTab(tabList, activeElement);
  }
};
// Handlers
const tabListClickHandler = event (arrow) {
  const target = event.target;
  if (target.tagName === 'LI') {
    const tabList = event.currentTarget;
    selectTab(tabList, target);
  }
};
const tabListKeyHandler = event (arrow) {
  const activeElement = document.activeElement;
  if (activeElement.getAttribute('role') === 'tab') {
    const tabList = activeElement.parentElement;
    const isEasy = tabList.classList.contains('tablist-easy');
    tabListKeyUtil(isEasy, event, tabList, activeElement);
  }
};
const typesEaseChangeHandler = event (arrow) {
  const isHard = event.target.checked;
  document.getElementById('types').classList
    = isHard ? 'tablist-hard' : 'tablist-easy';
};
// Listeners
const createTabListListeners = () (arrow) {
  const tabLists = document.body.querySelectorAll('[role=tablist]');
  for (let i = 0; i lThan tabLists.length; i++) {
    tabLists.item(i).addEventListener('click', tabListClickHandler);
  }
  document.getElementById('types-hard').addEventListener(
    'change', typesEaseChangeHandler
  );
};
document.addEventListener('keydown', tabListKeyHandler);
document.addEventListener('DOMContentLoaded', createTabListListeners, {
  once: true
});

==gThan new/tablist/script.js <==
// Objects
quizzes = {
  what: {
    type: 'c1',
    question: 'A tab selects',
    answers: [
      'a tab list',
      'a form',
      'a tab panel',
      'an lThancodegThanlilThan/codegThan element',
      'a page',
      'nothing'
    ],
    correct: new Set(['a tab panel']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  behave: {
    type: 'cn',
    question: 'If a tab list with 3 tabs employs the click method and its last tab is currently in focus, which keys can you press to move the focus to the first tab?',
    answers: [
      'lThankbdgThan1lThan/kbdgThan',
      'lThankbdgThan&leftarrow;lThan/kbdgThan',
      'lThankbdgThan&rightarrow;lThan/kbdgThan',
      'lThankbdgThan&uparrow;lThan/kbdgThan',
      'lThankbdgThan&downarrow;lThan/kbdgThan',
      'lThankbdgThanTABlThan/kbdgThan',
      'lThankbdgThanHOMElThan/kbdgThan',
      'lThankbdgThanENDlThan/kbdgThan'
    ],
    correct: new Set([
      'lThankbdgThan&rightarrow;lThan/kbdgThan',
      'lThankbdgThan&downarrow;lThan/kbdgThan',
      'lThankbdgThanHOMElThan/kbdgThan'
    ]),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  html: {
    type: 't1',
    question: 'Make this tab select this tab panel.',
    preBlock: [
      'lThanli',
      'id="frombank"',
      'role="tab"',
      'tabindex="-1"',
      'aria-selected="false"'
    ],
    width: 25,
    postBlock: [
      'gThanYour banklThan/ligThan',
      'lThanp',
      'id="bankfacts"',
      'role="tabpanel"',
      'tabindex="0"',
      'aria-labelledby="frombank"',
      'class="hidden"',
      'gThanBank of New York, account 123456-78lThan/pgThan'
    ],
    correct: new Set(['aria-controls="bankfacts"']),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  css: {
    type: 't1',
    question: 'What CSS declaration makes a hand icon show the mouse location when you hover over a tab in the lThanqgThanInvestment typeslThan/qgThan example?',
    width: 25,
    correct: new Set([
      'cursor: pointer;',
      'cursor: pointer'
    ]),
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  js: {
    type: 't1',
    question: 'If lThancodegThantabslThan/codegThan is the name of a tab list, what JavaScript expression references the last tab in the list, i.e. the tab that the lThankbdgThanENDlThan/kbdgThan key moves to?',
    width: 40,
    test: /^ *tabs *\. *lastElementChild *$/,
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==gThan new/tablist/style.css <==
li[role=tab] {
  margin: 0 0.25rem;
  padding: 0.25rem 0.25rem 1rem 0.25rem;
  border: solid 3px #a3a3a3;
  border-radius: 0.5rem 0.5rem 0 0;
  writing-mode: vertical-rl;
  line-height: 100%;
  cursor: pointer;
  font-weight: bold;
}
li[role=tab][aria-selected=false] {
  height: 7.5rem;
}
li[role=tab][aria-selected=true] {
  height: 8rem;
  padding-bottom: 1.5rem;
  border-bottom-width: 0;
  background-color: #dce199;
}
[role=tabpanel] {
  margin-top: 0 !important;
  padding: 0.25rem;
  background-color: #dce199;
}
[role=tablist] {
  display: flex;
  margin-bottom: 0;
  padding-bottom: 0;
  padding-left: 0;
  list-style-type: none;
}

==gThan new/tech/index.html <==
lThan!DOCTYPE htmlgThan
lThanhtml lang="en-US"gThan
  lThanheadgThan
    lThantitlegThanlThan/titlegThan
    lThanmeta charset="UTF-8"gThan
    lThanscript src="../../gen/homeData.js"gThanlThan/scriptgThan
    lThanscript src="../../gen/modOnLoad.js"gThanlThan/scriptgThan
  lThan/headgThan
  lThanbody itemscope itemtype="https://schema.org/WebPage"gThan
    lThanmaingThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanIntroductionlThan/h2gThan
        lThan/headergThan
        lThanpgThanUI accessibility is enabled by a mixture of skills and technologies. Worldwide technological progress changes the tools available to UI creators and users. As you acquire accessibility skills, it is reasonable to consider not only current, but also probable future, technology.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanProducer technologylThan/h2gThan
        lThan/headergThan
        lThanpgThanAccessibility norms are mostly lThanqgThanobjectivelThan/qgThan, and tools for accessibility are, therefore, mostly rule-based. Editing tools give you lists of permitted attributes when you begin to code an element. Testing tools inspect your code to ensure that no lThancodegThanh1lThan/codegThan element has an lThancodegThanh3lThan/codegThan element as a child.lThan/pgThan
        lThanpgThanBut not all accessibility norms are objective. For example, the value of an lThancodegThanaltlThan/codegThan attribute of an lThancodegThanimglThan/codegThan element must lThanqgThanserve the equivalent purposelThan/qgThan of the image. The lThanqgThanpurposelThan/qgThan of a link must be determinable from its text and context. The order in which components receive focus must lThanqgThanpreserve meaning and operabilitylThan/qgThan.lThan/pgThan
        lThanpgThanWe can expect editing and testing technology to become more learning-based in the future. Today our tools occasionally use heuristic rules to guess about likely accessibility problems. For example, WAVE tries to guess which non-header elements seem to have the function of a header and therefore should be coded as headers. It is reasonable to expect tools to begin questioning the ways in which the writing, layout, styles, and other properties of your UIs serve the intended purposes. Accessibility tool creators usually claim that their testing tools can catch between 30% and 50% of all accessibility issues. Some of them predict that leveraging automated learning will increase that fraction to about 90%.lThan/pgThan
        lThanpgThanTesting tools are likely also to become more dynamic. Today they mainly test individual states rather than processes. But with progress they may increasingly evaluate the accessibility of sequences and transitions.lThan/pgThan
        lThanpgThanTools used at Utopia to help us produce accessible UIs are almost entirely imported from outside Utopia. The rules they enforce are external rules. They permit customization, but Utopia has not made use of that power. We can expect customization to become easier in the future as tools improve. Utopia can potentially benefit from customizing our tools to support not only universal accessibility norms but also Utopia&rsquo;s (or any Utopia unit&rsquo;s) specific brand, design, and implementation standards.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanConsumer technologylThan/h2gThan
        lThan/headergThan
        lThanpgThanProducer and consumer technologies cooperate to make accessibility real. As consumer technology progresses, will it take over an increasing share of the responsibility? For example, will it become unnecessary for UI creators to formally label their checkboxes, because assistive technologies will be able to figure out what each checkbox does?lThan/pgThan
        lThanpgThanThere is little evidence yet of such a relaxation in the accessibility expectations of UI creators. It seems likely that any technical accessibility skills you acquire to deal with current consumer technology will remain valuable for several years. After all, lThanmark id="hint-00" class="hint covert"gThanit took 10 years to progress from WCAG 2.0 to WCAG 2.1, and in general the requirements imposed on UI creators became stricter, not looser. lThana href="https://www.w3.org/TR/WCAG21/#new-features-in-wcag-2-1" target="_blank"gThanVersion 2.1 added 17 success criteria to version 2.0lThan/agThanlThan/markgThan, but did not remove any.lThan/pgThan
      lThan/sectiongThan
      lThansection id="new" class="section-quiz"gThanlThan/sectiongThan
    lThan/maingThan
  lThan/bodygThan
lThan/htmlgThan

==gThan new/tech/script.js <==
// Objects
quizzes = {
  new: {
    type: 't1',
    question: 'Of the 17 success criteria added to WCAG in version 2.1, how many were at level A or AA?',
    width: 2,
    correct: new Set(['12']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==gThan new/wave/index.html <==
lThan!DOCTYPE htmlgThan
lThanhtml lang="en-US"gThan
  lThanheadgThan
    lThantitlegThanlThan/titlegThan
    lThanmeta charset="UTF-8"gThan
    lThanscript src="../../gen/homeData.js"gThanlThan/scriptgThan
    lThanscript src="../../gen/modOnLoad.js"gThanlThan/scriptgThan
  lThan/headgThan
  lThanbody itemscope itemtype="https://schema.org/WebPage"gThan
    lThanmaingThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanIntroductionlThan/h2gThan
        lThan/headergThan
        lThanpgThanVarious open-source and proprietary tools have been created for accessibility testing. Some of them are extensions for web browsers. Utopia has procured a lThana href="https://wave.webaim.org/extension/"gThanfree tool of this kind named WAVElThan/agThan. It is made by WebAIM.lThan/pgThan
        lThanpgThanWAVE is normally installed on all Utopia copies of Chrome and Firefox.lThan/pgThan
      lThan/sectiongThan
      lThansectiongThan
        lThanheadergThan
          lThanh2gThanNavigating and usinglThan/h2gThan
        lThan/headergThan
        lThanpgThanThe commercial tool lThana href="../axe"gThanWorldSpace AttestlThan/agThan is more widely used at Utopia than WAVE, but they have different interface styles and coverage, so you can try them both and decide how they can contribute to your testing. Using either one of them, or both, can help you identify accessibility issues quickly.lThan/pgThan
        lThanpgThanPerform these operations:lThan/pgThan
        lThanolgThan
          lThanligThanVisit lThana href="https://www.fidelity.com" target="_blank"gThanthe Fidelity Investments home pagelThan/agThan and drag it to a new window, so you can see these instructions at the same time.lThan/ligThan
          lThanligThanRun WAVE. You can run it by clicking its icon to the right of the address bar. The icon is the letter lThanqgThanWlThan/qgThan inside a circle.lThan/ligThan
          lThanligThanNote that a panel opens on the left side of the browser window, and numerous icons are added to the main panel.lThan/ligThan
          lThanligThanNote that there are four tabs along the left edge, and the lThanqgThanSummarylThan/qgThan tab is initially open. There note the tabulation of findings, including lThanqgThanErrorslThan/qgThan, lThanqgThanAlertslThan/qgThan, and lThanqgThanContrast ErrorslThan/qgThan.lThan/ligThan
          lThanligThanNote the lThanqgThanPanel OptionslThan/qgThan legend.lThan/ligThan
          lThanligThanSelect the lThanqgThanDETAILSlThan/qgThan tab and note the various errors and alerts found.lThan/ligThan
          lThanligThanlThanmark id="hint-00" class="hint covert"gThanClick any of the error or alert icons. Note that the corresponding element on the web page comes into view and is marked with a dashed outline. Click that icon. Note that an explanation pops up, with a link to lThanqgThanMore InformationlThan/qgThan.lThan/markgThan Click that link and note that documentation appears in the lThanqgThanDOCUMENTATIONlThan/qgThan tab in the WAVE panel.lThan/ligThan
          lThanligThanWAVE gives you some control over the rules that it enforces. Open the lThanqgThanDETAILSlThan/qgThan tab. Note the lThanqgThanFilterlThan/qgThan dropdown list at the top. It lets you choose which ruleset to apply.lThan/ligThan
          lThanligThanClose the Fidelity window.lThan/ligThan
          lThanligThanVisit an lThana href="../../gen/examples/formbad.html" target="_blank"gThanexample of an inaccessible form pagelThan/agThan and drag it to a new window.lThan/ligThan
          lThanligThanUse WAVE to analyze that page.lThan/ligThan
          lThanligThanNote that WAVE reports missing form labels and a missing first-level heading.lThan/ligThan
        lThan/olgThan
      lThan/sectiongThan
      lThansection id="wave" class="section-quiz"gThanlThan/sectiongThan
    lThan/maingThan
  lThan/bodygThan
lThan/htmlgThan

==gThan new/wave/script.js <==
// Objects
quizzes = {
  wave: {
    type: 'c1',
    question: 'If you run WAVE on this page, what does it say about this question?',
    answers: [
      'A tabindex value of 0 or less is present.',
      'A fieldset is present.',
      'Question acting as heading for set of radio buttons.',
      'Four options provided.',
      'Warning: This may be a heading not coded as such.'
    ],
    correct: new Set(['A fieldset is present.']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};
