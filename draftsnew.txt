==> new/here/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>When we say that a user <q>navigates</q> a website, we aren&rsquo;t using a Utopia nautical metaphor. Much of the world talks this way, in many languages using travel words. This custom roots web browsing in ancient human experience.</p>
        <p>So, <q>Where am I?</q> is a reasonable question for a user to ask. On an accessible website, there should be no need to ask, because the user&rsquo;s location should always be evident.</p>
        <p>But what do we mean by the user&rsquo;s <q>location</q>? How can a UI can make locations clear?</p>
        <p>When users ask <q>Where am I?</q>, they may be asking about their locations in a website or on a web page.</p>
        <p>Utopia has multiple websites and orients users with a site menu at the top, allowing users to see which site they are in (e.g., <q>PERSONAL INVESTORS</q>) and switch to a different site. Most Utopia sites also provide within-site orientations. A navigation menu bar at the top contains topics and highlights the current topic. Breadcrumbs below the menu bar show the place of the current page in the outline of that topic. Those devices help users with site navigation.</p>
        <p>This module deals not with site navigation, but with page navigation.</p>
      </section>
      <section>
        <header>
          <h2>Unique states</h2>
        </header>
        <p>Unlike a shopping mall, on a web page the user doesn&rsquo;t have a single location. A single <q>You are here</q> marker isn&rsquo;t enough. Instead, there are at least three locations that the user can be at. Keeping the user well informed requires letting the user know all three.</p>
        <p>Specifically, <mark id="hint-00" class="hint covert">a highly accessible UI answers these questions:</mark></p>
        <ul>
          <li>Where is the thing am I hovering over?</li>
          <li>Where is my focus?</li>
          <li>Where is the thing I am activating?</li>
        </ul>
        <p>Each question has at most one answer, because the hover, focus, and activation states are unique: For each state, only one element on a page can be in it at any time.</p>
        <p>However, they can also coincide. An element can be hovered over, be in focus, and be activated at the same time. So, the question arises: Can a UI notify the user not only about single states, but also combinations of states?</p>
      </section>
      <section id="unique" class="section-quiz"></section>
      <section>
        <header>
          <h2>Changing states</h2>
        </header>
        <p>Who controls the states of the elements in a UI? Control is shared. Your code exercises some control, but so does the user.</p>
        <p>Clients and crew members perform rule-governed actions in Utopia UIs. Your code enforces the rules, in part by restricting the states that users can put elements into. Subject to those restrictions, users choose where to hover, what to focus on, and what to activate.</p>
        <p>Users typically employ keyboards, mice, trackpads, styluses, fingers, and speech to change the states of elements. Users with disabilities also employ various assistive input technologies, such as eye trackers. Many of those assistive technologies emulate keyboards, and some users can&rsquo;t successfully operate mice, trackpads, and other analog devices. A consensus has emerged that <mark id="hint-01" class="hint covert">the keyboard interface must be fully respected by UI creators. Whatever users may do, they must be permitted to do with a keyboard. WCAG Success Criterion <i>2.1.1</i> says this.</mark></p>
        <p>This criterion seems straightforward, but the reality is not simple, as you will see.</p>
      </section>
      <section id="change" class="section-quiz"></section>
      <section>
        <header>
          <h2>Hover</h2>
        </header>
        <p>If any element is in a <dfn>hover</dfn> state, it is clickable. If you operate the primary mouse or trackpad button, you click that element. Showing the user what element is in a hover state says <q>You will click here if you click now</q>.</p>
        <p>But doesn&rsquo;t the mouse <dfn>cursor</dfn> (i.e. the visible icon representing the mouse&rsquo;s position) give the user this information? If you click, don&rsquo;t you click wherever the mouse cursor is? Not always. UIs can contain remote clickability. The cursor can be at point A, but if you click with the mouse you can actually click an element at point B. An example of this common pattern is <a href="../form">labels of form inputs</a>. If you click when the cursor is on a label, you actually click the input (such as a checkbox). Moreover, on a large display the cursor can be hard to find.</p>
        <p>Hover states generally don&rsquo;t exist in mobile operating systems. A sliding finger isn&rsquo;t treated like a sliding mouse. Those systems normally use finger taps for clicking, so the user doesn&rsquo;t need to be told what element a mouse click will target.</p>
        <p>Hover states are also irrelevant for users who do not use mice, trackpads, or other hovering devices. This includes most users with low or no vision and users who can&rsquo;t move pointers precisely.</p>
        <p>Given these facts, the hover state has a two-sided relationship with accessibility:</p>
        <ul>
          <li>Making hover states clear to users helps them know, in advance, what a click action will do.</li>
          <li>However, accessible interfaces also don&rsquo;t ask users to take important actions by hovering, since some devices and some users cannot hover, or cannot hover precisely. For example, Utopia doesn&rsquo;t ask users to choose a fund to buy merely by hovering over it. Such an interface would make users vulnerable to error, or be unusable in some situations. Utopia does, however, let users modify the displayed content by hovering. Go to the <a href="https://investor.utopia.com/home/">personal-investor home page</a>, for example, and hover over the <q>Investing</q> menu. The UI not only darkens the background to show where you are hovering; it also opens that menu for your further action.</li>
        </ul>
        <p>A <dfn>hover indicator</dfn> tells the user which element is in a hover state. Browsers&rsquo; built-in hover indicators are often subtle. You can improve accessibility by defining an easily noticeable hover indicator for elements that are clickable, i.e. elements that will do something significant if clicked, and by making that indicator consistent, so users learn to recognize it.</p>
        <p>You can use CSS to define a hover indicator. <mark id="hint-02" class="hint covert">CSS has a <code>:hover</code> pseudo-class. You create a ruleset, starting with a selector. If you append <code>:hover</code> to a ruleset selector (e.g., <code>button:hover</code>), the style you define there will be applied when a specified element is in a hover state.</mark> You will see an example below.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>With your mouse, hover over the <q>Test yourself</q> button above. Note that it changes appearance.</li>
          <li>Click the button to open the quiz.</li>
          <li>Hover over some checkbox labels. Note the change in appearance of the labels and the checkboxes themselves.</li>
          <li>While hovering over a label, click with the mouse. Note that you had the same effect as if you had clicked the checkbox.</li>
          <li>Open the developer tools.</li>
          <li>In the <q>Sources</q> panel, examine the code in the <code>style.css</code> file.</li>
          <li>Find a ruleset that defines a hover indicator for <code>button</code> elements. Note that it changes a button&rsquo;s text color to black and its background color to #c2c2c2 (Utopia&rsquo;s standard 40% Cool Gray).</li>
          <li><mark id="hint-03" class="hint covert">Find another ruleset that defines a hover indicator for some other element types, including <code>input</code> and link (<code>a</code>) elements. It sets a background color for the element to <code>#d1d1d1</code> (Utopia 30% Cool Gray).</mark></li>
          <li>Inspect any <q>Test yourself</q> button with the developer tools.</li>
          <li>In the <q>Styles</q> pane, note the ruleset for the <code>button-quiz</code> class, defining a background color.</li>
          <li>Toggle the element state, forcing it to <code>:hover</code>. Note that the pane shows the <code>button:hover</code> ruleset&rsquo;s <code>background-color</code> declaration superseding the one in the <code>.button-quiz</code> ruleset. The new <code>color</code> declaration similarly supersedes the one in the <code>button</code> ruleset below.</li>
        </ol>
        <p>You can also use other style properties as hover indicators. Utopia&rsquo;s current hover indicators vary across&mdash;and within&mdash;its websites. Here is an example:</p>
        <ol>
          <li>Open the <a href="https://investor.utopia.com/corporate-portal/" target="_blank">Utopia corporate portal</a>.</li>
          <li>Hover over links in the right column at the top. Note that the hover indicator is a white background.</li>
          <li>Hover over links in the middle of the page. Note that the hover indicator is underlining of the text.</li>
          <li>Hover over links at the bottom of the page. Note that the hover indicator is missing (except for the cursor change).</li>
        </ol>
      </section>
      <section id="hover" class="section-quiz"></section>
      <section>
        <header>
          <h2>Focus</h2>
        </header>
        <section>
          <header>
            <h3>The basics</h3>
          </header>
          <p>If an element is in <dfn>focus</dfn>, it is in a state of heightened operability. You can do something with it that you could not otherwise do. What that is depends on the element type.</p>
          <p>When you press a keyboard key, the effect you have can depend on what element is in focus.</p>
          <p>So, in order for a user to know how to act and to predict the effect of a keypress, the user needs to know what element, if any, is in focus. To tell a user that an element is in focus, your UI marks the element with a <dfn>focus indicator</dfn>. Browsers do this automatically, but their focus indicators are typically difficult to see. The WCAG permits relying on the browser&rsquo;s built-in focus indicator, but by replacing it with a more visible one you can improve accessibility.</p>
          <p>You can do this with CSS. CSS has a <code>:focus</code> pseudo-class, which allows you to apply style declarations to elements that are in focus. You create a ruleset, starting with a selector. For a ruleset that will apply to <strong>any</strong> element in focus, you can use the selector <code>*:focus</code>.</p>
          <p>By default, browsers put elements into focus in response to user keypresses, clicks, and taps:</p>
          <ul>
            <li>Clicks and taps put the clicked or tapped element into focus (if it is focusable).</li>
            <li>The <kbd>TAB</kbd> key or <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination moves the focus to the next or previous focusable <dfn>simple element</dfn>, namely element that has no internal set of focusable sub-elements</li>
            <li>The arrow keys move the focus to the next or previous focusable sub-element in a <dfn>complex element</dfn>, namely one that has a set of focusable sub-elements. Groups of radio buttons and drop-down (<q>select</q>) lists are examples of complex elements. (A <code>fieldset</code> element is <strong>not</strong> treated as a complex element.)</li>
          </ul>
          <p>You can make your UI override the default behavior by giving <dfn><code>tabindex</code></dfn> attributes to elements. Only two of the possible values of <code>tabindex</code> are widely used and recommended: <code>0</code> and <code>-1</code>.</p>
          <ul>
            <li><mark id="hint-04" class="hint covert"><code>tabindex="0"</code> makes an element fully focusable.</mark></li>
            <li><code>tabindex="-1"</code> makes an element focusable <strong>except</strong> with the <kbd>TAB</kbd> key or <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination.</li>
            <li>No <code>tabindex</code> attribute at all gives the element its default focusability: Actionable elements such as form controls and links are focusable, and others are not.</li>
          </ul>
          <p>Your JavaScript code can put a focusable element into focus with the <code>focus()</code> method.</p>
          <p>Perform these operations:</p>
          <ol>
            <li>Open an <a href="../../gen/examples/form/simple/bad/form-bad.html" target="_blank">example of a partly accessible form</a>.</li>
            <li>Press the <kbd>TAB</kbd> key twice. Note the outlines identifying the elements in focus.</li>
            <li>Open an <a href="../../gen/examples/form/simple/good/form-good.html" target="_blank">example of a highly accessible form</a>.</li>
            <li>Press the <kbd>TAB</kbd> key twice. Note that the outlines identifying the elements in focus are more visible than those on the other page.</li>
            <li><mark id="hint-05" class="hint covert">On the stylesheet of <code>form-good.html</code>, find a ruleset for any element in focus. Note that it surrounds the element with a solid outline 3 pixels in thickness, in color <code>#005293</code> (Utopia&rsquo;s standard Royal Blue), drawn with 2 pixels of space between the outline and the element.</mark> There is no such ruleset for <code>form-bad.html</code>, so that page uses the browser&rsquo;s default focus indicator.</li>
          </ol>
          <p>Most Utopia UIs use the default browser focus indicator, but there are exceptions. For example, a <a href="https://investornews.utopia/a-look-back-at-the-life-of-utopias-founder/">news page on the life of John C. Bogle</a> uses six different focus indicators:</p>
          <ul>
            <li>default (Utopia logo)</li>
            <li>default plus darker background color (<q>FORMS</q>)</li>
            <li>default plus darker text (<q>News home</q>)</li>
            <li>underline (<q>COMPANY NEWS</q>)</li>
            <li>icon color change to red (<q>&hellip;</q> in speech bubble)</li>
            <li>text underline and icon color change (<q>View tribute</q>)</li>
          </ul>
          <p>Your UI will provide an accessibility benefit if you adopt a consistent and easy-to-see focus indicator that conforms to a common convention. The most conventional focus indicator on the web is an outline, and it is usually blue.</p>
          <p>An outline (made with the CSS <code>outline</code> property) makes a more user-friendly focus indicator than a border (made with the CSS <code>border</code> property) would. In CSS, a border is part of its element, so, if an element acquired and lost a border whenever it goes into or out of focus, the element could jerk. An outline is drawn outside its element, so when it appears and disappears it leaves the element stationary.</p>
        </section>
        <section id="focusbasic" class="section-quiz"></section>
        <section>
          <header>
            <h3>Focus and the keyboard</h3>
          </header>
          <p>As mentioned above, <mark id="hint-06" class="hint covert">focus can change what keypresses do. Below is a summary of that interaction. When the focus is on one of the listed elements, the listed keys have the effects described.</mark> For example, the <kbd>SPACE</kbd> key toggles a focused checkbox (checking or unchecking it). The <q>scroll</q> action is to scroll the viewport on the page.</p>
          <p>The focal elements are listed with ordinary English names. For example, a <dfn>link</dfn> is an <code>a</code> element, and a <dfn>range</dfn> is an <code>input</code> element with <code>type="range"</code>. Elements classified as <dfn>textual</dfn> are inputs with text values (see <a href="../form"><q>Accessible Forms</q></a>).</p>
          <table>
            <caption>Keypress dependence on focus: <kbd>SPACE</kbd> and <kbd>ENTER</kbd></caption>
            <colgroup>
              <col><col><col><col><col>
            </colgroup>
            <thead>
              <tr>
                <th>Focal element</th>
                <th><kbd>SPACE</kbd></th>
                <th><kbd>SHIFT</kbd>-<kbd>SPACE</kbd></th>
                <th><kbd>ENTER</kbd></th>
                <th><kbd>SHIFT</kbd>-<kbd>ENTER</kbd></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th>button</th>
                <td>activate</td>
                <td>activate</td>
                <td>activate</td>
                <td>activate</td>
              </tr>
              <tr>
                <th>link</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>activate</td>
                <td>activate (new window)</td>
              </tr>
              <tr>
                <th>radio button</th>
                <td>select</td>
                <td>select</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
              <tr>
                <th>checkbox</th>
                <td>toggle</td>
                <td>toggle</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
              <tr>
                <th>range</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
              <tr>
                <th>date</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>submit</td>
                <td>submit</td>
              </tr>
              <tr>
                <th>textual</th>
                <td>enter <kbd>SPACE</kbd> at insertion point</td>
                <td>enter <kbd>SPACE</kbd> at insertion point</td>
                <td>submit</td>
                <td>submit</td>
              </tr>
              <tr>
                <th>otherwise</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>inert</td>
                <td>inert</td>
              </tr>
            </tbody>
          </table>
          <table>
            <caption>Keypress dependence on focus: arrow keys</caption>
            <colgroup>
              <col><col><col><col><col>
            </colgroup>
            <thead>
              <tr>
                <th>Focal element</th>
                <th><kbd>&uparrow;</kbd></th>
                <th><kbd>&downarrow;</kbd></th>
                <th><kbd>&leftarrow;</kbd></th>
                <th><kbd>&rightarrow;</kbd></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th>button</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
              <tr>
                <th>link</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
              <tr>
                <th>radio button</th>
                <td>focus and select previous</td>
                <td>focus and select next</td>
                <td>focus and select previous</td>
                <td>focus and select next</td>
              </tr>
              <tr>
                <th>checkbox</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
              <tr>
                <th>range</th>
                <td>increment</td>
                <td>decrement</td>
                <td>decrement</td>
                <td>increment</td>
              </tr>
              <tr>
                <th>date</th>
                <td>increment selected part</td>
                <td>decrement selected part</td>
                <td>select previous part</td>
                <td>select next part</td>
              </tr>
              <tr>
                <th>textual</th>
                <td>move insertion point to start</td>
                <td>move insertion point to end</td>
                <td>move insertion point 1 left</td>
                <td>move insertion point 1 right</td>
              </tr>
              <tr>
                <th>otherwise</th>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
                <td>scroll</td>
              </tr>
            </tbody>
          </table>
          <p>You could capture keypresses and change these effects with JavaScript, but that would generally make your UI behave differently from most. Adhering to common conventions generally improves accessibility.</p>
        </section>
        <section id="focuskbd" class="section-quiz"></section>
        <section>
          <header>
            <h3>Implicit submission</h3>
          </header>
          <p><mark id="hint-07" class="hint covert">In the first table above the effect of the <kbd>ENTER</kbd> key and the <kbd>SHIFT</kbd>-<kbd>ENTER</kbd> combination is described as <q>submit</q> when a date or textual input is in focus. This means submitting the form that the input is part of. This <a href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission">submission behavior is conditional</a>. The form is submitted if and only if either of these conditions is true:</mark></p>
          <ul>
            <li>There is a submit button in the form.</li>
            <li>The textual input is the only one in the form.</li>
          </ul>
          <p>If your form is being submitted at all, then it is good for accessibility to offer a button for explicit submission. So let&rsquo;s assume your form contains such a button. Then, if it also has multiple textual inputs, the default behavior is for an <kbd>ENTER</kbd> keypress, while any of those inputs is in focus, to submit the form, even if some or all of the input fields are empty.</p>
          <p>Is implicit submission an accessible feature? <a href="https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">Yes, it is, argues TJ VanToll</a>, because this is the standard behavior and conformance to standards is a basic requirement for accessibility. But <a href="https://www.tjvantoll.com/2013/01/01/enter-should-submit-forms-stop-messing-with-that/#disqus_thread">some developers argue the opposite</a>. They say this behavior conflicts with worksheet behavior, where <kbd>ENTER</kbd> moves the focus to the next cell down, and causes users to submit forms by mistake.</p>
          <p>If mistakenly submitting a form could cause damage, you can consider disabling implicit submission with JavaScript. Otherwise, this behavior reminds you to provide a visible and recognizable focus indicator. Even users know knows how implicit submission works could be surprised by it if they can&rsquo;t see what element is in focus.</p>
        </section>
        <section id="implicit" class="section-quiz"></section>
        <section>
          <header>
            <h3>Custom focus</h3>
          </header>
          <p>Under some conditions, it can be useful to put into focus elements that by default are not focusable. On this page, for example, when you click <q>Test yourself</q>, a form appears, and the <code>form</code> element goes into focus. Why? For two reasons:</p>
          <ul>
            <li>This makes it easy for you to navigate within the form with your keyboard. With a single <kbd>TAB</kbd> keypress, you can begin interacting with the form&rsquo;s controls.</li>
            <li>It&rsquo;s good for users of assistive technologies. When the form appears on the page, the fact that it goes into focus ensures it comes to the user&rsquo;s attention.</li>
          </ul>
          <p><mark id="hint-08" class="hint covert">You can decide to put any element into focus or to let the user do so. For this purpose you can use the <code>tabindex</code> attribute described above, and the JavaScript <code>focus()</code> method.</mark></p>
          <p>To see examples of these mechanisms, perform these operations:</p>
          <ul>
            <li>Click any <q>Test yourself</q> button.</li>
            <li>Inspect any element in the form with the developer tools.</li>
            <li>Find the enclosing <code>form</code> element. Note that its <code>tabindex</code> attribute has the value <code>0</code>.</li>
            <li>In the <q>Sources</q> panel, select the <code>gen/modOnLoad.js</code> file.</li>
            <li>
              In that file, find the <code>showQuiz</code> function. As the comment says, it creates, shows, and focuses a specified quiz. Note that it:
              <ul>
                <li>creates a <code>form</code> element and names it <code>form</code></li>
                <li>populates this new element with the content it needs</li>
                <li>gives it a <code>tabindex</code> attribute and sets its value to <code>0</code></li>
                <li>puts it into focus by executing <code>form.focus()</code></li>
              </ul>
            </li>
          </ul>
        </section>
        <section id="custom" class="section-quiz"></section>
      </section>
      <section>
        <header>
          <h2>Activation</h2>
        </header>
        <p>When an element is in a state of <dfn>activation</dfn>, it is performing an action. Buttons and links can be activated. The <a href="https://w3c.github.io/uievents/#event-flow-activation"><q>activation triggers</q></a> can be mouse clicks, or also the <kbd>ENTER</kbd> or <kbd>SPACE</kbd> key with or without the <kbd>SHIFT</kbd> key.</p>
        <p>A user might not be aware that a button or link is being activated. Displaying an activation indicator when the user presses a mouse button or <kbd>SPACE</kbd> key down on a button or link can promote that awareness and give the user an opportunity to interrupt the activation by moving the mouse away or pressing the <kbd>TAB</kbd> key before lifting the mouse button or <kbd>SPACE</kbd> key.</p>
        <p>No success criterion in WCAG <strong>requires</strong> an activation indicator, but you can provide one by adding CSS rulesets to your UI, in which the selector selects elements in an active state. CSS has an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:active"><code>:active</code> pseudo-class</a> that can do the job. By applying distinctive styles to <code>a:active</code> and <code>button:active</code> elements, you can make a link or button change its appearance in the situations described above. The link or button adopts its activation style when you press the mouse button or <kbd>SPACE</kbd> key down, and it resumes its normal style and activates when you release the mouse button or <kbd>SPACE</kbd> key&mdash;as long as you haven&rsquo;t dragged the mouse or moved the focus away from the element.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>Open the developer tools.</li>
          <li>In the <q>Sources</q> panel, select the <code>mod/here/index.html</code> file (shown as <code>(index)</code>) to display this page&rsquo;s HTML code.</li>
          <li>Find the <code>link rel="stylesheet"</code> element inside the <code>head</code> element. Note the reference to a stylesheet.</li>
          <li>Select the referenced stylesheet.</li>
          <li>In that stylesheet, <mark id="hint-09" class="hint covert">find a ruleset for <code>a:active</code>. That selector applies the ruleset to links (<code>a</code> elements) that are in the active state. Note the declarations in the ruleset. They set the text color (<code>color</code>) to <code>white</code> and the background color to <code>#69923a</code> (Utopia 100% green).</mark></li>
          <li>Hold your mouse button down on a link on this page, and then drag the mouse away. Note that the ruleset is applied to the link as long as you hold the mouse button down. That is because that action holds the button in the active state.</li>
          <li>Hold your mouse button down on the <q>Test yourself</q> button at the end of this section. Note that the button&rsquo;s appearance changes and remains changed as long as you hold the mouse button down. That action, likewise, holds the button in the active state.</li>
          <li>Release the mouse button to open the quiz.</li>
          <li>In the <q>Sources</q> panel of the developer tools, select the <code>gen/modOnLoad.js</code> file.</li>
          <li>Find the <code>clickHandler</code> function and note how it is designed.</li>
        </ol>
      </section>
      <section id="activate" class="section-quiz"></section>
      <section>
        <header>
          <h2>State distinction</h2>
        </header>
        <p>It is possible to make the activation, focus, and hover indicators (or any two of them) identical rather than distinct. In some Utopia UIs, the focus and hover indicators are identical.</p>
        <p>But making them all different has an accessibility benefit. Suppose one element is in focus and another element is being hovered over. How will the user know which is which? If they look alike, the user might press the <kbd>ENTER</kbd> key and expect to follow a link, but actually perform a transaction by clicking a button. Or a user could click the <q>No</q> button instead of the <q>Yes</q> button. The mouse cursor might be over a label, far from the radio button or checkbox that it labels, making it non-obvious which one is in focus and which one is being hovered over.</p>
        <p>If you decide to make the indicators distinct, you also need to make at least the focus and hover indicators <strong>noncompetitive</strong>. It must be possible for an element that is in <strong>both</strong> the focus and the hover states to show this to the user. If you made the focus indicator a blue outline and the hover indicator a gray outline, for example, they would compete (even if they are spaced at different distances from their elements). <mark id="hint-10" class="hint covert">Only one outline can appear around an element at any time. In these modules, the focus indicator is an outline and the hover indicator is a set of colors. Those don&rsquo;t compete. They can appear simultaneously when an element is in both states.</mark></p>
        <p>Perform these operations:</p>
        <ol>
          <li>Click the <q>Test yourself</q> button in the <q>Implicit submission</q> section above.</li>
          <li>Click the first radio button.</li>
          <li>With your mouse, hover over the word <q>focus</q> in the last label. Note that the first radio button exhibits the focus indicator, but the last radio button and its label exhibit the hover indicator.</li>
          <li>Click with the mouse. Note that you clicked the last radio button, causing it to become focused, hovered over, and selected.</li>
          <li>Hover elsewhere and then back over the last radio button or its label. Note that its focus and hover indicators are both visible.</li>
          <li>Open an <a href="../../gen/examples/indicator" target="_blank">example of identical hover and focus indicators</a>.</li>
          <li>Press the <kbd>TAB</kbd> key once to put the <q>Yes</q> button into focus.</li>
          <li>Hover over the word <q>incorrectly</q> and leave your mouse there. Note that both buttons have identical indicators.</li>
          <li>Press the <kbd>ENTER</kbd> key. Note the outcome message.</li>
        </ol>
        <p>This last example page has a mixture of accessibility features and defects. The identity of the focus and hover indicators isn&rsquo;t the only problem, but it is one of the contributors to a risk of user error.</p>
      </section>
      <section id="distinct" class="section-quiz"></section>
      <section>
        <p>Windows high-contrast mode overrides background colors. Reconsider using them for hover indication.</p>
      </section>
    </main>
  </body>
</html>

==> new/layer/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
    <script src="nav.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>The typical display that a user sees is two-dimensional. It has a height and a width, but it has no depth. It is flat.</p>
        <p>However, UI creators often try to cause content to be rendered in a way that mimics three-dimensional space, such as a desk surface with a pile of papers on it. For this purpose designers use shadows, shading, and perspective to trick the user&rsquo;s visual intuition.</p>
        <p>What about users who are not using vision to perceive the display? They rely on assistive technologies to analyze the content, and assistive technologies ignore shadows, shading, and perspective. So the usual design patterns that trick visual users don&rsquo;t trick assistive technologies. They could leave assistive technologies, and their users, confused.</p>
        <p>For maximum accessibility, it is usually wise to avoid three-dimensional metaphors, not trying to show things <q>on top of</q>, <q>covering</q>, or <q>overlaying</q> other things. Instead, you might, for example, insert one thing in between other things already being displayed.</p>
        <p>Nevertheless, many Utopia UIs contain three-dimensionality, in the form of <strong>layers</strong>. So it is useful to know how layers can be made accessible.</p>
      </section>
      <section>
        <header>
          <h2>What is a layer?</h2>
        </header>
        <p><mark id="hint-00" class="hint covert">A <dfn>layer</dfn> is a container that occupies <strong>part</strong> but not all of the viewport and blocks interactions with <strong>all</strong> of the rest of the content in the viewport.</mark></p>
        <p><mark id="hint-01" class="hint covert">If a container occupied all of the viewport, it would be a page. What makes it a layer is that it gets added to the existing content, temporarily obscuring part of it and blocking interaction with all of it, except itself.</mark> Users see the layer and see the part of the viewport not occupied by the layer, but something tells them that that other part is not currently available for interaction.</p>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>What are layers for?</h2>
        </header>
        <p>A layer is usually an interruption. Interaction is taking place, and then something special happens. Doubt arises about what should happen next. So a detour is appropriate. Before the interaction continues, Utopia and the user clarify or settle something.</p>
        <p>The thing to be clarified or settled could be:</p>
        <ul>
          <li>Confirm that this is what you want to do.</li>
          <li>Confirm that these are the correct facts.</li>
          <li>Be aware of the following requirements.</li>
          <li>Note the following consequences of your answer.</li>
          <li>Certify that you have read and understand these terms and conditions.</li>
        </ul>
        <p>A layer addresses that need by covering part of the page with the detour process and then, when its chore is complete, disappearing, revealing the original page.</p>
        <p>Note the potential problem here. <mark id="hint-02" class="hint covert">The user may need to examine the page content to resolve the question asked by the layer, but the layer is <strong>covering some of the content</strong>!</mark> So, if you are not careful, your layer can prevent itself from achieving its purpose.</p>
      </section>
      <section id="why" class="section-quiz"></section>
      <section>
        <header>
          <h2>Built-in layers</h2>
        </header>
        <p>There are three layer types built into the <code>Window</code> Web API.</p>
        <section>
          <header>
            <h3>Alert</h3>
          </header>
          <p>The simplest built-in layer type is the <code>alert</code> method. Here is an example:</p>
          <section class="example">
            <header>
              <h3>Communication preference</h3>
            </header>
            <form>
              <fieldset>
                <legend>Please send my statements and confirmations</legend>
                <p><label>
                  <input type="radio" name="compref" value="elec" checked>
                  electronically
                </label></p>
                <p>
                  <label
                    title="Mail may make you ineligible for some fee discounts."
                  >
                    <input
                      type="radio"
                      name="compref"
                      value="mail"
                      data-focusalert="Mail may make you ineligible for some fee discounts."
                    >
                    by mail
                  </label>
                </p>
                <p class="center">
                  <button type="button">Submit</button>
                </p>
              </fieldset>
            </form>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Click <q>electronically</q> in the above example to put it into focus.</li>
            <li>Press the <kbd>&downarrow;</kbd> key. Note that an alert appears, covering part of the viewport.</li>
            <li>Try to click the <q>Submit</q> button. Note that interaction with it is blocked.</li>
            <li>Press the <kbd>ENTER</kbd> key, twice if necessary. Note that this dismisses the alert, completes your radio-button change, and lets you interact with the form.</li>
            <li>Inspect the <q>by mail</q> label with the developer tools. Note that it contains an <code>input</code> element with a <code>data-focusalert</code> attribute.</li>
            <li>In the <q>Sources</q> panel, select <code>mod/layer/nav.js</code>.</li>
            <li>Examine the <code>createFocusAlertListeners</code>. It creates listeners for elements (like this input) that have <code>data-focusalert</code> attributes.</li>
            <li>Examine the <code>alertHandler</code> function. When a listener executes it, it launches an <code>alert</code> layer.</li>
          </ol>
          <p>The created listeners listen for the <code>focusin</code> event. That event occurs when an element is about to go into focus. (You triggered that event when you navigated to the <code>by mail</code> radio button.) Upon such an event, a listener passes to <code>alertHandler</code> the value of the element&rsquo;s <code>data-focusalert</code> attribute and calls the function, which, in turn, displays an alert layer.</p>
          <p>The <code>window.alert()</code> method is part of the HTML5 standard, so in principle you don&rsquo;t need to do more to make it accessible, but assistive technologies do not always support it correctly. The NVDA screen reader, for example, announces the alert without ever telling the user about the <q>by mail</q> option that it is warning about. It also misinforms the user that the alert message is on row 1 of 2 rows of a table.</p>
          <p>Built-in alerts are governed by browsers. You can&rsquo;t decide where on the page they appear, what they look like, or what the <q>OK</q> button text says. You can&rsquo;t change how they look. So they are relatively easy to implement, but not very configurable.</p>
        </section>
        <section>
          <header>
            <h3>Confirm</h3>
          </header>
          <p><mark id="hint-03" class="hint covert">The <code>confirm</code> method is a little more complex. It has two buttons: <q>OK</q> and <q>Cancel</q>.</mark> Here is an example:</p>
          <section class="example">
            <header>
              <h3>Agent authorization</h3>
            </header>
            <form>
              <p>I authorize the above-named agent to perform all actions on my account that I may perform.</p>
              <p class="center">
                <button
                  type="button"
                  class="title-confirm"
                  title="You are giving your agent full power over your account!"
                  data-confirm="You are giving your agent full power over your account!"
                  data-dest="agent-ack"
                >Agree</button>
              </p>
            </form>
            <p id="agent-ack" class="ack"></p>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Click the <q>Agree</q> button in the above example.</li>
            <li>Select <q>OK</q>.</li>
            <li>Reload the page and repeat, this time selecting <q>Cancel</q>.</li>
            <li><mark id="hint-04" class="hint covert">In the <q>Sources</q> panel of the developer tools, examine the <code>confirmHandler</code> function of <code>nav.js</code>.</mark></li>
          </ol>
          <p>The <code>confirmHandler</code> function launches a confirmation layer and processes the choice made by the user between its two options.</p>
        </section>
        <section>
          <header>
            <h3>Prompt</h3>
          </header>
          <p>The <code>prompt</code> method is still more complex. It provides an input for text. Here is an example, which uses the <code>prompt</code> method for the <q>Yes</q> button and the <code>alert</code> method for the <q>No</q> button:</p>
          <section class="example">
            <header>
              <h3>Your retirement scenarios</h3>
            </header>
            <form>
              <fieldset>
                <legend>
                  Do you want to save this retirement scenario?
                </legend>
                <p class="center">
                  <button
                    id="scenario-yes"
                    type="button"
                    data-prompt="Enter an optional shortcut (1 to 10 letters a&ndash;z) for this scenario."
                    data-dirty="[^a-z]"
                    data-length="10"
                    data-dest="scenario-ack"
                    data-prefix="The shortcut for this scenario will be: "
                  >Yes</button>
                </p>
                <p class="center">
                  <button
                    type="button"
                    data-clickalert="This scenario was not saved."
                    data-dest="scenario-ack"
                  >No</button>
                </p>
              </fieldset>
            </form>
            <p id="scenario-ack" class="ack" tabindex="-1"></p>
          </section>
          <p>Perform these operations:</p>
          <ol>
            <li>Click the <q>Yes</q> button in the above example.</li>
            <li>Click the <q>Cancel</q> button on the prompt layer.</li>
            <li>Reload the page and repeat, except click the <q>OK</q> button.</li>
            <li>Reload the page and repeat, except enter some text in the input box before clicking the <q>OK</q> button. Note that the text is sanitized to comply with the specified format rule.</li>
            <li>Inspect the <q>Yes</q> button in the developer tools.</li>
            <li>In the <q>Sources</q> panel, examine the <code>promptHandler</code> function.</li>
          </ol>
          <p>The <q>Yes</q> button contains some <code>data-*</code> attributes used by the <code>promptHandler</code> function to construct the prompt message, sanitize the user&rsquo;s input, and construct and display a response.</p>
        </section>
      </section>
      <section id="builtin" class="section-quiz"></section>
      <section>
        <header>
          <h2>Custom layers</h2>
        </header>
        <p>Although using built-in layers is straightforward and they take care of basic accessibility, they have limited functionality and configurability. Usually, Utopia UIs, when they display layers, display custom layers.</p>
        <p>An accessible custom layer:</p>
        <ul>
          <li>appears when reasonably expected</li>
          <li>is made known to the user</li>
          <li>successfully blocks interaction with the rest of the viewport</li>
          <li>has accessible content</li>
          <li>allows the user to see information that it covers if relevant</li>
          <li>allows the user to dismiss it with an explicit control and also by pressing the <kbd>ESCAPE</kbd> key</li>
          <li>when dismissed puts the expected element into focus</li>
        </ul>
        <p>There are many ways to implement accessible custom layers. If you attend to the above-stated requirements and test to ensure that you have satisfied them, your custom layer will be accessible.</p>
        <p>The most common case in which UI creators at Utopia decide to use custom layers is transaction cancelation. When a user begins to define a transaction but explicitly requests that it be abandoned, Utopia UIs typically launch a layer to tell the user what the consequences will be and ask the user to confirm or rescind the cancelation.</p>
        <p>This common case entails accessibility risks:</p>
        <ul>
          <li>The layer covers the details of a transaction while the UI asks the user to finalize a decision about it. The user who doesn&rsquo;t remember all the details could be frustrated that they are hidden when needed.</li>
          <li>The question asked to the user is whether to undo an undoing. That is intrinsically complex and exposes the user to a risk of doing the opposite of what is intended.</li>
        </ul>
        <p>These obstacles to accessibility can be overcome. Specifically:</p>
        <ul>
          <li>You can let the user see the hidden details without dismissing the layer, such as by allowing the user to minimize it temporarily or to drag it around the viewport.</li>
          <li>You can ensure that the controls offered by the layer for making the final decision are fully explained, leaving no room for doubt about their effects. For example, instead of <q>Yes</q> and <q>No</q> buttons, you can offer <q>Yes, cancel</q>and <q>No, don&rsquo;t cancel</q> buttons.</li>
        </ul>
        <p>An example will illustrate the possibility of an accessible layer to confirm or rescind an important transaction decision. Perform these operations:</p>
        <ol>
          <li>Open an <a href="../../gen/examples/layer" target="_blank">example of an accessible order-submission interface</a>.</li>
          <li>Click the <q>Submit</q> button. Note that a confirmation dialog appears and goes into focus. That ensures that it comes to the attention of assistive technologies.</li>
          <li>Try to use the mouse to interact with the three buttons in the <q>Action</q> section. If you can do so, you have found a bug; please report it!</li>
          <li>Use the <kbd>TAB</kbd> key and the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination to navigate. Try to escape the dialog with them. If you can do so, you have found a bug; please report it!</li>
          <li>Examine the <q>Yes, submit now</q> button in the Accessibility Tree. Note that it has a role and name, and is in a group with a name that explains the button. This accessibility arises from the coding of the button in a <code>fieldset</code> element with a <code>legend</code> element.</li>
          <li>Click the <q>Hide</q> button.</li>
          <li>Verify with the collapsed dialog that <kbd>TAB</kbd> navigation still stays within the dialog.</li>
          <li>Click the <q>Show</q> button.</li>
          <li>Verify that you can activate the <q>Hide</q> and <q>Show</q> buttons with the <kbd>SPACE</kbd> key, too, once you have used <kbd>TAB</kbd> or <kbd>SHIFT</kbd>-<kbd>TAB</kbd> to put them into focus.</li>
          <li>Click the <q>Close</q> button. Note that the dialog and the surrounding shading disappear and the button that launched them goes into focus again.</li>
          <li>Launch the layer again and click the <q>No, do not &hellip; yet</q> button.</li>
          <li>Launch the layer again and click the <q>Yes &hellip; now</q> button.</li>
          <li>Reload the page and make the layer appear again. Then close it by pressing the <kbd>ESCAPE</kbd> key.</li>
          <li>Similarly, check the behavior of the custom layer when you click the <q>Cancel it</q> button instead of the <q>Submit it</q> button.</li>
        </ol>
        <p>This example is only about layer accessibility, so after a layer is closed it doesn&rsquo;t take you anywhere else.</p>
        <p>The above operations test the interface for the accessibility features listed above.</p>
        <p>The HTML, CSS, and JavaScript coding that makes this example work accessibly is similar to that underlying the built-in layer mechanisms discussed above. But without the built-in mechanisms you need to code the accessibility features that they automatically provide. The example also offers some additional features. So, the coding here needs to be more elaborate.</p>
        <p>One of the accessibility features you observed above is focus management. When a layer opens, it goes into focus, so the user becomes aware of it and can easily begin to interact with it. When a layer is closed, an appropriate element goes into focus. In the case of this example, if the user aborted the (submission or cancelation) action, the button that launched the layer goes into focus again. To see how this feature is implemented here, perform these operations:</p>
        <ol>
          <li>Inspect the <q>Submit it</q> button with the developer tools. Note that it has a <code>class</code> attribute with the value <code>custom-confirm</code> and an <code>aria-controls</code> attribute with the value <code>layer0</code>.</li>
          <li>Below that, find the code for the <code>Cancel it</code> button. Note that it is similar, except that the value of <code>aria-controls</code> is <code>layer1</code> instead of <code>layer0</code>.</li>
          <li><mark id="hint-05" class="hint covert">In the <q>Sources</q> panel, select <code>nav.js</code>. This file contains the JavaScript code for this example.</mark></li>
          <li>In <code>nav.js</code>, examine the function <code>layerCloseHandler</code>. Note that it defines a variable named <code>layerLauncher</code>, which refers to the button that launched the layer. This definition searches the <code>body</code> element of the document for the first occurrence of an element that has a <code>class</code> value of <code>custom-confirm</code> and an <code>aria-controls</code> value of whatever the <code>id</code> of the layer is. At the end, if the user activated one of the two buttons that abort the action, the function closes the layer by changing its <code>overt</code> class to <code>covert</code> and gives the focus to the <code>layerLauncher</code> element.</li>
        </ol>
        <p>The <q>Submit it</q> and <q>Cancel it</q> buttons have <code>aria-controls</code> attributes that perform two functions:</p>
        <ul>
          <li>They choose which layer to launch.</li>
          <li>They tell the application which button to put back into focus when the layer is closed.</li>
        </ul>
        <p>Returning the focus to its pre-layer element is the typical practice for accessibility. It is not an absolute rule, however. The user&rsquo;s action on the layer might make the previous focal element obsolete. This example application uses the <code>aria-controls</code> attribute to return the focus when the user aborts the action. If, however, the user confirms the action, the buttons become obsolete. So then the application finds an element that has been given an <code>id</code> of <code>ack-home</code>, empties that element out (deleting the three-button form), inserts an acknowledgement there, and puts it into focus. This ensures that any assistive technology is made aware of the acknowledgement.</p>
      </section>
      <section id="custom" class="section-quiz"></section>
    </main>
  </body>
</html>

==> new/priority/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Why we prioritize</h2>
        </header>
        <p>Making UIs more accessible produces benefits, but can entail costs, too. So Utopia UI creators consider both costs and benefits when deciding which accessibility features to implement, and when.</p>
      </section>
      <section>
        <header>
          <h2>How we prioritize</h2>
        </header>
        <p>Typical accessibility priorities at Utopia include:</p>
        <ul>
        </ul>
        <p>Various participants make decisions on priorities.</p>
      </section>
      <section id="how" class="section-quiz"></section>
      <section>
        <header>
          <h2>Timing</h2>
        </header>
        <p>Experts agree that <mark id="hint-01" class="hint covert">we can produce accessibility most efficiently and effectively if we start doing it at the beginning.</mark></p>
        <ul>
          <li>
            Carie Fisher says: <q cite="https://www.deque.com/blog/5-digital-accessibility-myths-busted/">Think about accessibility early and often in the design and development process to save time, effort, and money on the overall project</q>.
            <cite><a href="https://www.deque.com/blog/5-digital-accessibility-myths-busted/"><q>5 Digital Accessibility Myths Busted</q></a>, 2018</cite>.
          </li>
          <li>
            Sagar Barbhaya says <q cite="shift-left-csun-Sagar-Barbhaya.pdf">56% of all software defects emerge during the requirement phase, 27% in the design phase, 7% during the development phase</q>.
            <cite><a href="shift-left-csun-Sagar-Barbhaya.pdf"><q>Shift-Left Accessibility</q>, 2018</a></cite>.
          </li>
          <li>
            Stephen Watts says <q cite="https://www.bmc.com/blogs/what-is-shift-left-shift-left-testing-explained/">defects identified and resolved during the requirement &amp; design phase are about 100 times less expensive to fix than those discovered after the release of a product.</q>.
            <cite><a href="shift-left-csun-Sagar-Barbhaya.pdf"><q>What is &lsquo;Shift Left&rsquo;? Shift Left Testing Explained</q>, 2017</a></cite>.
          </li>
        </ul>
        <p>Consequently, priorities for accessibility at Utopia are shifting left. Increasingly, the emphasis is on making new UIs highly accessible as soon as work on their design begins.</p>
      </section>
      <section id="when" class="section-quiz"></section>
    </main>
  </body>
</html>

==> new/tablist/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
    <script src="nav.js"></script>
    <link rel="stylesheet" href="style.css">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>UIs often give users opportunities to choose among blocks of content. Examples:</p>
        <ul>
          <li>Which fund to see details about</li>
          <li>What period of time to see price changes over</li>
          <li>What kind of account to fill out a form to open</li>
          <li>What topic to get educated about</li>
        </ul>
        <p>Utopia UIs give such choices to users by means of various <dfn>content selection mechanism</dfn>s. These are mechanisms that offer controls to users for selecting what content to consume.</p>
        <p>One content selection mechanism is the <dfn>tab list</dfn> (sometimes also called <dfn>tab set</dfn>). It is similar, but not identical, to navigation links, accordions, radio buttons, checkboxes, dropdown lists, menus, buttons, action bars, and toggles.</p>
        <p>The tab list mechanism can be made accessible, but not as easily as some of the other mechanisms just mentioned. Some of them are built into HTML5, but the tab list mechanism isn&rsquo;t. When a UI creator decides to use tab lists for user selection of content, that implies some complexity in the coding to ensure accessibility.</p>
      </section>
      <section>
        <header>
          <h2>What is a tab list?</h2>
        </header>
        <p>A tab list is a list. Normally its items aren&rsquo;t numbered, and you create it with the HTML5 <code>ul</code> element. If you had reason to use the <code>ol</code> or <code>dl</code> element instead, however, you could. In fact, it could even be a collection of elements not organized into any HTML5 list type, but let&rsquo;s assume it is a <code>ul</code> list. Coding a list as a list is generally a contribution to accessibility.</p>
        <p>Each item in a tab list (i.e. each <dfn>tab</dfn>) is a device for selecting content. This sense of <q>tab</q> is distinct from the sense referring to the <kbd>TAB</kbd> key on a keyboard or a tab stop in a document layout.</p>
        <p><mark id="hint-00" class="hint covert">Each tab selects a particular item of content, and that item is called a <dfn>tab panel</dfn>.</mark></p>
        <p>The tabs are typically <code>li</code> elements, as in any other such list. (They could be <code>dt</code> or <code>dd</code> elements if in a <code>dl</code> list.)</p>
        <p>Users use tabs to select content. So, tabs resemble controls in a form, even though they are not in a form.</p>
        <p>Tab lists can appear anywhere. Most commonly, they are at or near the top of a page. They can be arranged vertically or horizontally. Horizontal arrangement is more common.</p>
      </section>
      <section id="what" class="section-quiz"></section>
      <section>
        <header>
          <h2>Tab list behavior</h2>
        </header>
        <p>An ordinary list doesn&rsquo;t behave; it just sits on the page waiting to be read.</p>
        <p>But a tab list does behave. It has a container, and each tab fills that container with the tab&rsquo;s tab panel, replacing any tab panel that was already there. So the tab list controls the content of that container.</p>
        <p>The user selects the content for the container by selecting one of the tabs.</p>
        <p>When you implement a tab list, you have two alternative user selection methods to choose between:</p>
        <ul>
          <li>Click</li>
          <li>Focus</li>
        </ul>
        <p>If you choose the click method (also called <dfn>manual activation</dfn>), the user selects content by clicking one of the tabs. If you choose the focus method (also called <dfn>automatic activation</dfn>), the user selects content by putting one of the tabs into focus. For somebody using a keyboard to navigate, the click method requires two steps: put a tab into focus and then use the <kbd>SPACE</kbd> or <kbd>ENTER</kbd> key to select it. (Compare radio buttons, which get automatically selected when focused, versus checkboxes, which require the extra step of selection with the <kbd>SPACE</kbd> key.)<p>
        <p><mark id="hint-01" class="hint covert">A tab list has particular rules for navigation:</mark></p>
        <ol>
          <li>The <kbd>TAB</kbd> key navigates between the selected tab and its tab panel, and also into and out of the tab list.</li>
          <li>All four arrow keys move the focus among the tabs if they are arranged vertically, but only the left and right arrow keys do so if the tabs are arranged horizontally.</li>
          <li>Arrow-key navigation cycles among the tabs: Trying to move the focus past either end moves it to the other end.</li>
          <li>The <kbd>HOME</kbd> key navigates to the first tab.</li>
          <li>The <kbd>END</kbd> key navigates to the last tab.</li>
          <li>Clicking any tab ensures it is both focused and selected.</li>
          <li>If a tab is focused but not selected, the <kbd>SPACE</kbd> or <kbd>ENTER</kbd> key selects it.</li>
          <li>Clicking the currently displayed tab panel focuses it.</li>
        </ol>
        <p>An accessible tab list also tells the user which tab&rsquo;s tab panel is currently selected. It does so by making that tab look different from the other tabs. In addition, selecting the same tab again would have no effect, so it improves accessibility to disable the currently selected tab.</p>
        <section class="example">
          <header>
            <h3><label for="types">Investment types</label></h3>
          </header>
          <form>
            <label>
              <input id="types-hard" type="checkbox" checked>
              Require click to select
            </label>
          </form>
          <ul id="types" role="tablist" class="tablist-hard">
            <li
              id="tabmf"
              role="tab"
              tabindex="0"
              aria-selected="true"
              aria-controls="defmf"
            >
              Mutual fund
            </li>
            <li
              id="tabetf"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defetf"
            >
              Exchange-traded fund
            </li>
            <li
              id="tabcs"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defcs"
            >
              Common stock
            </li>
            <li
              id="tabps"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defps"
            >
              Preferred stock
            </li>
            <li
              id="tabb"
              role="tab"
              tabindex="-1"
              aria-selected="false"
              aria-controls="defb"
            >
              Bond
            </li>
          </ul>
          <section>
            <p
              id="defmf"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabmf"
              class="overt">A type of investment that pools shareholder money and invests it in a variety of securities. Each investor owns shares of the fund and can buy or sell these shares at any time. Mutual funds are typically more diversified, low-cost, and convenient than investing in individual securities, and they&rsquo;re professionally managed.</p>
            <p
              id="defetf"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabetf"
              class="covert">
              A type of investment with characteristics of both mutual funds and individual stocks. ETFs are professionally managed and typically diversified, like mutual funds, but they can be bought and sold at any point during the trading day using straightforward or sophisticated strategies.
            </p>
            <p
              id="defcs"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabcs"
              class="covert">
              An investment that represents part ownership in a corporation. Each share of stock is a proportional stake in the corporation&rsquo;s assets and profits.
            </p>
            <p
              id="defps"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabps"
              class="covert">
              Stock that takes precedence over common stock when dividends are paid or assets are liquidated. A preferred security doesn&rsquo;t usually carry voting rights.
            </p>
            <p
              id="defb"
              role="tabpanel"
              tabindex="0"
              aria-labelledby="tabb"
              class="covert">
              A loan made to a corporation or government in exchange for regular interest payments. The bond issuer agrees to pay back the loan by a specific date. Bonds can be traded on the secondary market.
            </p>
          </section>
        </section>
        <p>Perform these operations:</p>
        <ol>
          <li>In the above example of a tab list, click the <q>Mutual fund</q> tab.</li>
          <li>Press the <kbd>TAB</kbd> key. Note that the focus moves to the tab panel of that tab.</li>
          <li>Press the <kbd>TAB</kbd> key again. Note that the focus moves out of the tab list to the next focusable element (a <q>Test yourself</q> button).</li>
          <li>Press the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination. Note that the focus moves back to the tab panel.</li>
          <li>Press the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination again. Note that the focus moves back to the tab.</li>
          <li>Press the <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination again. Note that the focus moves out of the tab list to the checkbox before it.</li>
          <li>Press the <kbd>TAB</kbd> key again. Note that the focus moves back to the <q>Mutual fund</q> tab.</li>
          <li>Press the <kbd>&leftarrow;</kbd> key. Note that the focus moves to the last tab. The selection does not automatically follow the focus, because the tab list currently employs the click method, not the focus method.</li>
          <li>Press the <kbd>SPACE</kbd> key. This acts like a click, changing your selection to the focused tab (<q>Bond</q>).</li>
          <li>Press the <kbd>SPACE</kbd> key again. Note that it causes scrolling, as it normally does, because the focused tab is now disabled.</li>
          <li>Press the <kbd>&leftarrow;</kbd> key and then the <kbd>ENTER</kbd> key. This (like <kbd>SPACE</kbd>) is equivalent to clicking the focused tab. Note that you have changed the focus to the previous tab, and then you have selected that tab.</li>
          <li>Press the <kbd>ENTER</kbd> key again. Note that nothing happens. The <q>Preferred stock</q> tab is disabled, so the <kbd>ENTER</kbd> key performs its normal function, which is nothing.</li>
          <li>Press all four arrow keys, the <kbd>HOME</kbd> key, and the <kbd>END</kbd> key, to verify that the tab list obeys navigation rules 2, 3, 4, and 5 above.</li>
          <li>Click a tab that isn&rsquo;t in focus. Note that it becomes focused and also selected.</li>
          <li>Click the tab panel, below the tab list. Note that it becomes focused.</li>
          <li>Press the <kbd>&rightarrow;</kbd> key. Note that nothing happens, because the focus is not on a tab.</li>
          <li>Clear the <q>Click tab to select</q> checkbox. This changes the behavior of the tab list from the click method to the focus method.</li>
          <li>Click the <q>Bond</q> tab, then press the <kbd>&rightarrow;</kbd> key. Note that, with the focus method in force, you have changed the focus and also the selection.</li>
          <li>Experiment further with the tab list to observe that it now implements the focus method.</li>
        </ol>
        <p>Which method is better: click or focus? The <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel">Accessible Rich Internet Applications Working Group recommends</a> the focus method if the tab panels are all preloaded in the browser, but otherwise recommends the click method. <a href="https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus">It says this helps accessibility.</a> But it doesn&rsquo;t mention a possible annoyance of the focus method: If the user holds down the left or right arrow key, there will be a rapid replacement of the tab panels with each other. Try it yourself:</p>
        <ol>
          <li>Clear the <q>Require click to select</q> checkbox in the above example.</li>
          <li>Click any of the tabs.</li>
          <li>Hold down the left or right arrow key for a few seconds.</li>
        </ol>
        <p>Imagine a long tab list and a user who is navigating with the arrow keys. The user might need to hold down an arrow key and witness multiple tab panel replacements before arriving at the desired tab. Depending on the tab panel content, this could even create a seizure risk. So, while the focus method requires less work from the user, the click method may be less disruptive, especially if there are many tabs.</p>
      </section>
      <section id="behave" class="section-quiz"></section>
      <section>
        <header>
          <h2>Making tab lists work</h2>
        </header>
        <section>
          <header>
            <h3>Introduction</h3>
          </header>
          <p>There is no HTML5 <code>tablist</code>, <code>tab</code>, or <code>tabpanel</code> element. You can create a tab list and make it accessible with mechanisms in HTML5, CSS, WAI-ARIA, and JavaScript, but this requires more coding than it would if tab lists were native to HTML5.</p>
        </section>
        <section>
          <header>
            <h3>HTML implementation</h3>
          </header>
          <p>The above example shows one way to code a tab list. To see how this one is implemented with HTML5, perform these operations:</p>
          <ol>
            <li>Inspect the <q>Mutual fund</q> tab with the developer tools. Note that it is an <code>li</code> item in a <code>ul</code> list. Note also that, immediately after the end of the <code>ul</code> element, there is a <code>section</code> element containing the tab panels.</li>
            <li>Find the values of the <code>role</code> attributes of the tab list, tabs, and tab panels.</li>
            <li>Find the values of the <code>aria-selected</code> attributes of the tabs. Note that only one is <code>true</code> and the others are <code>false</code>.</li>
            <li>Find the values of the <code>tabindex</code> attributes of the tabs and tab panels. Note that the selected tab has <code>tabindex="0"</code> and the other tabs have <code>tabindex="-1"</code>. This means you can put any tab into focus by clicking it (or with JavaScript), but you can put only the selected tab into focus with the <kbd>TAB</kbd> key. Note that all of the tab panels have <code>tabindex="0"</code>. Whichever one happens to be displayed can be put into focus with the <kbd>TAB</kbd> key.</li>
            <li><mark id="hint-02" class="hint covert">Find the values of the <code>aria-controls</code> attributes of the tabs. Choose one tab and then look for the tab panel whose <code>id</code> value is the same as the tab&rsquo;s <code>aria-controls</code> value. That is how each tab is marked as selecting a particular tab panel.</mark></li>
            <li>Find the values of the <code>aria-labelledby</code> attributes of the tab panels. Choose one tab panel and then look for the element whose <code>id</code> value is the same as the tab panel&rsquo;s <code>aria-labelledby</code> value. That is how each tab panel is given a summary. In this case the summary is the text content of the corresponding tab, but it could have been the text content of a different element.</li>
          </ol>
        </section>
        <section id="html" class="section-quiz"></section>
        <section>
          <header>
            <h3>CSS implementation</h3>
          </header>
          <p>To define the appearance (and disappearance) of the tabs and tab panels, you can use CSS. Perform these operations:</p>
          <ol>
            <li>Find the values of the <code>class</code> attributes of the tab list <code>ul</code> element and the tab panel <code>p</code> elements. The tab list&rsquo;s <code>class</code> attribute determines whether it employs the click (<code>tablist-hard</code>) or focus (<code>tablist-easy</code>) method. The tab panels&rsquo; <code>class</code> attribute determines whether they are visible (<code>overt</code>) or hidden (<code>covert</code>).</li>
            <li>In the <q>Sources</q> panel, select the <code>gen/style.css</code> file and look for rulesets for <code>p.covert</code> and <code>p.overt</code>. Those selectors are shorthand for <code>p[class=covert]</code> and <code>p[class=overt]</code>. Note that they set the values of the <code>display</code> style property to <code>none</code> and <code>block</code> (the normal value for <code>p</code> elements). This mechanism determines which tab panel is visible.</li>
            <li><mark id="hint-03" class="hint covert">In the <q>Sources</q> panel, select the <code>mod/tablist/style.css</code> file. This file contains rulesets defining how tab lists, tabs, and tab panels look.</mark></li>
            <li>Find the declaration that sets the <code>display</code> style property of a tab list. Note that its value is <code>flex</code>. This makes the children of the element (the tabs) spread out horizontally instead of stacking one above the next.</li>
            <li>Find the declaration that sets the border radii of the corners of the tabs. This rounds the corners on top of the tabs.</li>
            <li>Find the <code>writing-mode</code> declaration for tabs. Temporarily remove it from the stylesheet by clearing its checkbox in the <q>Styles</q> pane. Note how the tabs change their orientation.</li>
          </ol>
          <p><mark id="hint-04" class="hint covert">To explore other CSS declarations, you can edit them in the <q>Styles</q> pane and thereby temporarily change them. To edit them, you can check and clear checkboxes, and you can also edit their values.</mark></p>
        </section>
        <section id="css" class="section-quiz"></section>
        <section>
          <header>
            <h3>JavaScript implementation</h3>
          </header>
          <p>Tabs and tab panels obey particular rules for tab list navigation and selection, but are made from HTML elements (such as <code>li</code> and <code>p</code>) that don&rsquo;t implement all those rules by default. With the appropriate values of the <code>tablist</code> element, they implement the rules for navigation with the <kbd>TAB</kbd> key and <kbd>SHIFT</kbd>-<kbd>TAB</kbd> combination and mouse clicks. But they don&rsquo;t implement the required responses to the arrow, <kbd>HOME</kbd>, <kbd>END</kbd>, <kbd>SPACE</kbd>, and <kbd>ENTER</kbd> keys, nor do they implement the (click or focus) rules for selection. Therefore, when you construct a tab list that is to operate in the browser, you must write those navigation and selection rules in JavaScript.</p>
          <p>The JavaScript code listens for applicable keypresses and, when they occur, modifies values of element attributes, such as <code>aria-selected</code>, <code>tabindex</code>, and <code>class</code>. The code also stops the browser from giving its default responses to those actions when a tab list governs them.</p>
          <p>One possible approach to JavaScript coding for a tab list is the one that implements the above example. To examine it, perform these operations:</p>
          <ol>
            <li>In the <q>Sources</q> panel, select the <code>mod/tablist/nav.js</code> file. </li>
            <li>Examine the last two statements in it. They create listeners that act when particular events occur. One executes a function (<code>tabListKeyHandler</code>) whenever a keyboard key is pressed. The other executes a function (<code>createTabListListeners</code>) when the page content has finished being loaded, and then turns itself off. That function, in turn, creates a listener for each tab list that it finds on the page. And that listener executes <code>tabListClickHandler</code> whenever the user clicks anywhere inside the tab list.</li>
            <li>Examine the function <code>selectTab</code>. Note that it deselects the currently selected tab and then selects the new tab given to it as the second argument, which involves changing the values of their <code>aria-selected</code> and <code>tabindex</code> attributes.</li>
            <li><mark id="hint-06" class="hint covert">In the <code>tabListKeyUtil</code> function, examine the code on lines 22&ndash;36. Note that it defines <code>newTab</code> on the basis of which key was pressed.</mark></li>
          </ol>
          <p>The <code>aria-controls</code> attribute doesn&rsquo;t show and hide tab panels. It helps assistive technologies interpret your interface, and you can use it to choose tab panels to reveal and hide, but it is your JavaScript code (like the <code>selectTab</code> function) that actually does the revealing and hiding. In this case, it changes the class between <code>overt</code> and <code>covert</code>, and that in turn will change the value of the style property <code>display</code> between <code>block</code> and <code>none</code>, as specified in <code>mod/tablist/style.css</code>.</p>
        </section>
        <section id="js" class="section-quiz"></section>
      </section>
    </main>
  </body>
</html>

==> new/tech/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>UI accessibility is enabled by a mixture of skills and technologies. Worldwide technological progress changes the tools available to UI creators and users. As you acquire accessibility skills, it is reasonable to consider not only current, but also probable future, technology.</p>
      </section>
      <section>
        <header>
          <h2>Producer technology</h2>
        </header>
        <p>Accessibility norms are mostly <q>objective</q>, and tools for accessibility are, therefore, mostly rule-based. Editing tools give you lists of permitted attributes when you begin to code an element. Testing tools inspect your code to ensure that no <code>h1</code> element has an <code>h3</code> element as a child.</p>
        <p>But not all accessibility norms are objective. For example, the value of an <code>alt</code> attribute of an <code>img</code> element must <q>serve the equivalent purpose</q> of the image. The <q>purpose</q> of a link must be determinable from its text and context. The order in which components receive focus must <q>preserve meaning and operability</q>.</p>
        <p>We can expect editing and testing technology to become more learning-based in the future. Today our tools occasionally use heuristic rules to guess about likely accessibility problems. For example, WAVE tries to guess which non-header elements seem to have the function of a header and therefore should be coded as headers. It is reasonable to expect tools to begin questioning the ways in which the writing, layout, styles, and other properties of your UIs serve the intended purposes. Accessibility tool creators usually claim that their testing tools can catch between 30% and 50% of all accessibility issues. Some of them predict that leveraging automated learning will increase that fraction to about 90%.</p>
        <p>Testing tools are likely also to become more dynamic. Today they mainly test individual states rather than processes. But with progress they may increasingly evaluate the accessibility of sequences and transitions.</p>
        <p>Tools used at Utopia to help us produce accessible UIs are almost entirely imported from outside Utopia. The rules they enforce are external rules. They permit customization, but Utopia has not made use of that power. We can expect customization to become easier in the future as tools improve. Utopia can potentially benefit from customizing our tools to support not only universal accessibility norms but also Utopia&rsquo;s (or any Utopia unit&rsquo;s) specific brand, design, and implementation standards.</p>
      </section>
      <section>
        <header>
          <h2>Consumer technology</h2>
        </header>
        <p>Producer and consumer technologies cooperate to make accessibility real. As consumer technology progresses, will it take over an increasing share of the responsibility? For example, will it become unnecessary for UI creators to formally label their checkboxes, because assistive technologies will be able to figure out what each checkbox does?</p>
        <p>There is little evidence yet of such a relaxation in the accessibility expectations of UI creators. It seems likely that any technical accessibility skills you acquire to deal with current consumer technology will remain valuable for several years. After all, <mark id="hint-00" class="hint covert">it took 10 years to progress from WCAG 2.0 to WCAG 2.1, and in general the requirements imposed on UI creators became stricter, not looser. <a href="https://www.w3.org/TR/WCAG21/#new-features-in-wcag-2-1" target="_blank">Version 2.1 added 17 success criteria to version 2.0</a></mark>, but did not remove any.</p>
      </section>
      <section id="new" class="section-quiz"></section>
    </main>
  </body>
</html>

==> new/wave/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title></title>
    <meta charset="UTF-8">
    <script src="../../gen/homeData.js"></script>
    <script src="../../gen/modOnLoad.js"></script>
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Various open-source and proprietary tools have been created for accessibility testing. Some of them are extensions for web browsers. Utopia has procured a <a href="https://wave.webaim.org/extension/">free tool of this kind named WAVE</a>. It is made by WebAIM.</p>
        <p>WAVE is normally installed on all Utopia copies of Chrome and Firefox.</p>
      </section>
      <section>
        <header>
          <h2>Navigating and using</h2>
        </header>
        <p>The commercial tool <a href="../axe">WorldSpace Attest</a> is more widely used at Utopia than WAVE, but they have different interface styles and coverage, so you can try them both and decide how they can contribute to your testing. Using either one of them, or both, can help you identify accessibility issues quickly.</p>
        <p>Perform these operations:</p>
        <ol>
          <li>Visit <a href="https://www.fidelity.com" target="_blank">the Fidelity Investments home page</a> and drag it to a new window, so you can see these instructions at the same time.</li>
          <li>Run WAVE. You can run it by clicking its icon to the right of the address bar. The icon is the letter <q>W</q> inside a circle.</li>
          <li>Note that a panel opens on the left side of the browser window, and numerous icons are added to the main panel.</li>
          <li>Note that there are four tabs along the left edge, and the <q>Summary</q> tab is initially open. There note the tabulation of findings, including <q>Errors</q>, <q>Alerts</q>, and <q>Contrast Errors</q>.</li>
          <li>Note the <q>Panel Options</q> legend.</li>
          <li>Select the <q>DETAILS</q> tab and note the various errors and alerts found.</li>
          <li><mark id="hint-00" class="hint covert">Click any of the error or alert icons. Note that the corresponding element on the web page comes into view and is marked with a dashed outline. Click that icon. Note that an explanation pops up, with a link to <q>More Information</q>.</mark> Click that link and note that documentation appears in the <q>DOCUMENTATION</q> tab in the WAVE panel.</li>
          <li>WAVE gives you some control over the rules that it enforces. Open the <q>DETAILS</q> tab. Note the <q>Filter</q> dropdown list at the top. It lets you choose which ruleset to apply.</li>
          <li>Close the Fidelity window.</li>
          <li>Visit an <a href="../../gen/examples/formbad.html" target="_blank">example of an inaccessible form page</a> and drag it to a new window.</li>
          <li>Use WAVE to analyze that page.</li>
          <li>Note that WAVE reports missing form labels and a missing first-level heading.</li>
        </ol>
      </section>
      <section id="wave" class="section-quiz"></section>
    </main>
  </body>
</html>

==> new/tablist/style.css <==
li[role=tab] {
  margin: 0 0.25rem;
  padding: 0.25rem 0.25rem 1rem 0.25rem;
  border: solid 3px #a3a3a3;
  border-radius: 0.5rem 0.5rem 0 0;
  writing-mode: vertical-rl;
  line-height: 100%;
  cursor: pointer;
  font-weight: bold;
}
li[role=tab][aria-selected=false] {
  height: 7.5rem;
}
li[role=tab][aria-selected=true] {
  height: 8rem;
  padding-bottom: 1.5rem;
  border-bottom-width: 0;
  background-color: #dce199;
}
[role=tabpanel] {
  margin-top: 0 !important;
  padding: 0.25rem;
  background-color: #dce199;
}
[role=tablist] {
  display: flex;
  margin-bottom: 0;
  padding-bottom: 0;
  padding-left: 0;
  list-style-type: none;
}

==> new/here/script.js <==
// Objects
quizzes = {
  unique: {
    type: 'cn',
    question: 'Which locations does a highly accessible UI inform users about?',
    answers: [
      'location of focus',
      'location of page',
      'location of title',
      'location of hover',
      'location of back button',
      'location of activation',
      'location of next page'
    ],
    correct: new Set([
      'location of focus',
      'location of hover',
      'location of activation',
    ]),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  change: {
    type: 't1',
    question: 'All functionality must be available with use of a keyboard, according to WCAG Success Criterion',
    width: 30,
    correct: new Set(['2.1.1']),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  hover: {
    type: 't1',
    question: 'Make this ruleset apply only to links and buttons when they are hovered over.',
    width: 30,
    postLine: ' {',
    postBlock: [
      'outline: solid 3px mediumgray;',
      'outline-offset: 1px;',
      '}'
    ],
    tests: [
      /^ *a:hover *, *button:hover *$/,
      /^ *button:hover *, *a:hover *$/
    ],
    hints: [
      'hint-02',
      'hint-03'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  focusbasic: {
    type: 't1',
    question: 'Make this ruleset place focus indicators 3 pixels away from their elements.',
    width: 20,
    preBlock: [
      '*:focus {',
      'outline: solid 3px blue;'
    ],
    postBlock: ['}'],
    test: /^ *outline-offset *: *3px *; *$/,
    hints: ['hint-05'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  focuskbd: {
    type: 'cn',
    question: 'If a date input is in focus and its month field is selected, which keys would change the month from March to February?',
    answers: [
      '<kbd>&uparrow;</kbd>',
      '<kbd>&downarrow;</kbd>',
      '<kbd>&leftarrow;</kbd>',
      '<kbd>&rightarrow;</kbd>',
      '<kbd>SPACE</kbd>',
      '<kbd>SHIFT</kbd>-<kbd>SPACE</kbd>',
      '<kbd>ENTER</kbd>',
      '<kbd>SHIFT</kbd>-<kbd>ENTER</kbd>',
      '<kbd>TAB</kbd>',
      '<kbd>SHIFT</kbd>-<kbd>TAB</kbd>'
    ],
    correct: new Set(['<kbd>&downarrow;</kbd>']),
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  implicit: {
    type: 'c1',
    question: 'If a form contains an <q>Email</q> <code>email</code>-type input and a <q>Telephone</q> <code>tel</code>-type input, when will pressing <kbd>ENTER</kbd> submit the form?',
    answers: [
      'never',
      'only when the email input is in focus',
      'only when the telephone input is in focus',
      'when either of those inputs is in focus',
      'when either of those inputs is in focus if there is a submit button',
      'when either of those inputs is in focus if there is no submit button',
      'when both inputs have non-blank values, regardless of focus'
    ],
    correct: new Set([
      'when either of those inputs is in focus if there is a submit button'
    ]),
    hints: ['hint-07'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  custom: {
    type: 't1',
    question: 'Make it possible for a user to put this image into focus with the <kbd>TAB</kbd> key.',
    width: 40,
    preBlock: [
      '<img',
      'src="../static/images/bogle.jpg"',
      'alt="John C. Bogle"'
    ],
    postBlock: ['>'],
    test: /^ *tabindex *= *(["']?)0\1 *$/,
    hints: [
      'hint-04',
      'hint-08'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  activate: {
    type: 't1',
    question: 'What text color does the CSS ruleset of this page give to the text of buttons being activated?',
    width: 25,
    correct: new Set([
      'black',
      '#000',
      '#000000'
    ]),
    hints: ['hint-09'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  distinct: {
    type: 'cn',
    question: 'Which single declarations will make a button hover indicator noncompetitive with, and distinct from, a button focus indicator, if the focus indicator&rsquo;s only declaration is <code>outline: solid 3px blue</code>?',
    answers: [
      '<code>outline: solid 3px blue</code>',
      '<code>outline: solid 3px red</code>',
      '<code>outline: solid 6px blue</code>',
      '<code>background-color: darkblue</code>',
      '<code>background-color: yellow</code>',
      '<code>color: blue</code>',
      '<code>color: purple</code>'
    ],
    correct: new Set([
      '<code>background-color: darkblue</code>',
      '<code>background-color: yellow</code>',
      '<code>color: blue</code>',
      '<code>color: purple</code>'
    ]),
    hints: ['hint-10'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> new/layer/nav.js <==
// Variables
messages.confirmed = 'Confirmed';
messages.canceled = 'Canceled';
// Functions
const clean = (rawText, dirtyPattern, lengthLimit) => {
  const cleanText = rawText.replace(RegExp(dirtyPattern, 'g'), '');
  if (lengthLimit) {
    return cleanText.slice(0, lengthLimit);
  }
  else {
    return cleanText;
  }
};
// Handlers
const alertHandler = (event, trigger) => {
  const targetData = event.target.dataset;
  const text = targetData[trigger];
  if (text) {
    window.alert(text);
    const dest = targetData.dest;
    if (dest) {
      document.getElementById(dest).textContent = '';
    }
  }
};
const confirmHandler = event => {
  const target = event.target;
  const text = target.dataset.confirm;
  if (text) {
    const confirmation = window.confirm(text);
    const dest = document.getElementById(target.dataset.dest);
    if (dest) {
      dest.textContent = messages[confirmation ? 'confirmed' : 'canceled'];
      dest.tabIndex = '0';
      dest.focus();
    }
  }
};
const promptHandler = event => {
  const targetData = event.target.dataset;
  const text = targetData.prompt;
  if (text) {
    const rawInput = window.prompt(text);
    if (rawInput) {
      const dest = document.getElementById(targetData.dest);
      if (dest) {
        let cleanInput = rawInput;
        if (targetData.dirty) {
          cleanInput = clean(rawInput, targetData.dirty, targetData.length);
        }
        if (cleanInput) {
          if (targetData.prefix) {
            cleanInput = `${targetData.prefix}${cleanInput}`;
          }
          dest.textContent = cleanInput;
          dest.focus();
        }
      }
    }
  }
};
// Listeners
const createClickAlertListeners = () => {
  const alertables = document.body.querySelectorAll('[data-clickalert]');
  for (let i = 0; i < alertables.length; i++) {
    alertables.item(i).addEventListener('click', () => {
      alertHandler(event, 'clickalert');
    });
  }
};
const createFocusAlertListeners = () => {
  const alertables = document.body.querySelectorAll('[data-focusalert]');
  for (let i = 0; i < alertables.length; i++) {
    alertables.item(i).addEventListener(
      'focusin', () => {
        alertHandler(event, 'focusalert');
      }, {
        once: true
      }
    );
  }
};
const createConfirmListeners = () => {
  const confirmables = document.body.querySelectorAll('[data-confirm]');
  for (let i = 0; i < confirmables.length; i++) {
    confirmables.item(i).addEventListener('click', confirmHandler);
  }
};
const createPromptListeners = () => {
  const promptables = document.body.querySelectorAll('[data-prompt]');
  for (let i = 0; i < promptables.length; i++) {
    promptables.item(i).addEventListener(
      'click', promptHandler
    );
  }
};
document.addEventListener(
  'DOMContentLoaded', createClickAlertListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createFocusAlertListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createConfirmListeners, {
    once: true
  }
);
document.addEventListener(
  'DOMContentLoaded', createPromptListeners, {
    once: true
  }
);

==> new/layer/script.js <==
// Objects
quizzes = {
  what: {
    type: 'cn',
    question: 'A layer',
    answers: [
      'covers the entire viewport',
      'covers part of the viewport',
      'allows the user to work on all parts of the page',
      'allows the user to work on only the visible parts of the page',
      'allows the user to work only on the layer itself',
      'is a temporary part of a page',
      'is a permanent part of a page'
    ],
    correct: new Set([
      'covers part of the viewport',
      'allows the user to work only on the layer itself',
      'is a temporary part of a page'
    ]),
    hints: [
      'hint-00',
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  why: {
    type: 'cn',
    question: 'Layers with these titles are likely to have accessibility problems:',
    answers: [
      '<q>Do you agree with the following terms?</q>',
      '<q>Please rate your investment experience on this scale:</q>',
      '<q>Proceed with the purchase at the price you specified?</q>',
      '<q>Have you received a prospectus for each security named on the form?</q>',
      '<q>Is the address you entered your residence?</q>',
      '<q>Please indicate the communications you wish to receive electronically:</q>'
    ],
    correct: new Set([
      '<q>Proceed with the purchase at the price you specified?</q>',
      '<q>Have you received a prospectus for each security named on the form?</q>',
      '<q>Is the address you entered your residence?</q>'
    ]),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  builtin: {
    type: 't1',
    question: 'If <code>warn</code> is the name of a text string that you want displayed on a layer asking the user whether to proceed or stop, correct this method call so it launches that layer.',
    width: 40,
    init: 'document.alert(message=warn);',
    test: /^ *window *\. *confirm *\( *warn *\) *;? */,
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  custom: {
    type: 't1',
    question: 'Which <code>event</code> method does the <code>keyHandler</code> function of the custom-confirmation-layer example call in order to determine whether the <kbd>SHIFT</kbd> key is engaged while the <kbd>TAB</kbd> key is pressed?',
    width: 30,
    correct: new Set([
      'getModifierState',
      'getModifierState()',
      "getModifierState('Shift')"
    ]),
    hints: ['hint-05'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> new/priority/script.js <==
// Objects
quizzes = {
  how: {
    type: 'c1',
    question: 'How does Utopia typically prioritize accessibility between existing and new interfaces?',
    answers: [
      'Address all issues in existing interfaces first',
      'Work on both kinds, but more thoroughly for existing interfaces',
      'Work on both kinds, but more thoroughly for new interfaces',
      'Leave existing interfaces inaccessible and work only on new ones'
    ],
    correct: new Set([
      'Work on both kinds, but more thoroughly for new interfaces'
    ]),
    hints: [
      'hint-00'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  priority: {
    type: 'c1',
    question: 'Experts advise that UIs should be made accessible',
    answers: [
      'only after complaints are received',
      'in production but not during testing',
      'when being converted from designs to code, but not before',
      'starting when they are first being planned'
    ],
    correct: new Set(['starting when they are first being planned']),
    hints: [
      'hint-01'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> new/tablist/nav.js <==
// Functions
const selectTab = (tabList, tab) => {
  // Deselect the currently selected tab.
  const activeTab = tabList.querySelector('[aria-selected=true]');
  activeTab.setAttribute('aria-selected', 'false');
  activeTab.setAttribute('tabindex', '-1');
  document
  .getElementById(activeTab.getAttribute('aria-controls'))
  .classList
  .replace('overt', 'covert');
  // Select the specified tab.
  tab.setAttribute('aria-selected', 'true');
  tab.setAttribute('tabindex', '0');
  tab.focus();
  document
  .getElementById(tab.getAttribute('aria-controls'))
  .classList
  .replace('covert', 'overt');
};
const tabListKeyUtil = (isEasy, event, tabList, activeElement) => {
  const key = event.key;
  let newTab;
  if (key === 'ArrowRight') {
    newTab
      = activeElement.nextElementSibling || tabList.firstElementChild;
  }
  else if (key === 'ArrowLeft') {
    newTab
      = activeElement.previousElementSibling || tabList.lastElementChild;
  }
  else if (key === 'Home') {
    newTab = tabList.firstElementChild;
  }
  else if (key === 'End') {
    newTab = tabList.lastElementChild;
  }
  if (newTab) {
    event.preventDefault();
    if (isEasy) {
      selectTab(tabList, newTab);
    }
    else {
      newTab.focus();
    }
  }
  else if (
    (key === 'Enter' || key === ' ')
    && ! isEasy
    && activeElement.getAttribute('aria-selected') === 'false'
  ) {
    event.preventDefault();
    selectTab(tabList, activeElement);
  }
};
// Handlers
const tabListClickHandler = event => {
  const target = event.target;
  if (target.tagName === 'LI') {
    const tabList = event.currentTarget;
    selectTab(tabList, target);
  }
};
const tabListKeyHandler = event => {
  const activeElement = document.activeElement;
  if (activeElement.getAttribute('role') === 'tab') {
    const tabList = activeElement.parentElement;
    const isEasy = tabList.classList.contains('tablist-easy');
    tabListKeyUtil(isEasy, event, tabList, activeElement);
  }
};
const typesEaseChangeHandler = event => {
  const isHard = event.target.checked;
  document.getElementById('types').classList
    = isHard ? 'tablist-hard' : 'tablist-easy';
};
// Listeners
const createTabListListeners = () => {
  const tabLists = document.body.querySelectorAll('[role=tablist]');
  for (let i = 0; i < tabLists.length; i++) {
    tabLists.item(i).addEventListener('click', tabListClickHandler);
  }
  document.getElementById('types-hard').addEventListener(
    'change', typesEaseChangeHandler
  );
};
document.addEventListener('keydown', tabListKeyHandler);
document.addEventListener('DOMContentLoaded', createTabListListeners, {
  once: true
});

==> new/tablist/script.js <==
// Objects
quizzes = {
  what: {
    type: 'c1',
    question: 'A tab selects',
    answers: [
      'a tab list',
      'a form',
      'a tab panel',
      'an <code>li</code> element',
      'a page',
      'nothing'
    ],
    correct: new Set(['a tab panel']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  behave: {
    type: 'cn',
    question: 'If a tab list with 3 tabs employs the click method and its last tab is currently in focus, which keys can you press to move the focus to the first tab?',
    answers: [
      '<kbd>1</kbd>',
      '<kbd>&leftarrow;</kbd>',
      '<kbd>&rightarrow;</kbd>',
      '<kbd>&uparrow;</kbd>',
      '<kbd>&downarrow;</kbd>',
      '<kbd>TAB</kbd>',
      '<kbd>HOME</kbd>',
      '<kbd>END</kbd>'
    ],
    correct: new Set([
      '<kbd>&rightarrow;</kbd>',
      '<kbd>&downarrow;</kbd>',
      '<kbd>HOME</kbd>'
    ]),
    hints: ['hint-01'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  html: {
    type: 't1',
    question: 'Make this tab select this tab panel.',
    preBlock: [
      '<li',
      'id="frombank"',
      'role="tab"',
      'tabindex="-1"',
      'aria-selected="false"'
    ],
    width: 25,
    postBlock: [
      '>Your bank</li>',
      '<p',
      'id="bankfacts"',
      'role="tabpanel"',
      'tabindex="0"',
      'aria-labelledby="frombank"',
      'class="hidden"',
      '>Bank of New York, account 123456-78</p>'
    ],
    correct: new Set(['aria-controls="bankfacts"']),
    hints: ['hint-02'],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  css: {
    type: 't1',
    question: 'What CSS declaration makes a hand icon show the mouse location when you hover over a tab in the <q>Investment types</q> example?',
    width: 25,
    correct: new Set([
      'cursor: pointer;',
      'cursor: pointer'
    ]),
    hints: [
      'hint-03',
      'hint-04'
    ],
    yesMessage: messages.yes,
    noMessage: messages.no
  },
  js: {
    type: 't1',
    question: 'If <code>tabs</code> is the name of a tab list, what JavaScript expression references the last tab in the list, i.e. the tab that the <kbd>END</kbd> key moves to?',
    width: 40,
    test: /^ *tabs *\. *lastElementChild *$/,
    hints: ['hint-06'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> new/tech/script.js <==
// Objects
quizzes = {
  new: {
    type: 't1',
    question: 'Of the 17 success criteria added to WCAG in version 2.1, how many were at level A or AA?',
    width: 2,
    correct: new Set(['12']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};

==> new/wave/script.js <==
// Objects
quizzes = {
  wave: {
    type: 'c1',
    question: 'If you run WAVE on this page, what does it say about this question?',
    answers: [
      'A tabindex value of 0 or less is present.',
      'A fieldset is present.',
      'Question acting as heading for set of radio buttons.',
      'Four options provided.',
      'Warning: This may be a heading not coded as such.'
    ],
    correct: new Set(['A fieldset is present.']),
    hints: ['hint-00'],
    yesMessage: messages.yes,
    noMessage: messages.no
  }
};
