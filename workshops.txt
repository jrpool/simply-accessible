==> workshops/ex/dialogs/examples/bad/buggy/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main" aria-controls="dialog0" aria-expanded="false">
          <fieldset>
            <legend>Form of ownership of this account</legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                id="name"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button id="submit">Submit</button></p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            aria-modal="true"
            class="dialog middle covert"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-expanded="false"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-expanded="false"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Confirmation</legend>
                <p id="dialog0-label-body">You have named <strong><span id="joint-owner"></span></strong> as the joint owner. You have specified <q><strong><span id="ownership"></span></strong></q> as the form of ownership. Thank you for investing at Utopia.</p>
                <div class="flex around">
                  <p>
                    <button
                      id="submityes"
                      type="button"
                      aria-labelledby="dialog0-label-body"
                    >
                      Yes, I confirm this decision
                    </button>
                  </p>
                  <p>
                    <button
                      id="submitno"
                      type="button"
                      class="abort"
                      aria-labelledby="dialog0-label-body"
                    >
                      No, I wish to wait
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/dialogs/examples/bad/dismiss/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>Form of ownership of this account</legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                id="name"
                aria-controls="submit"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <button
              id="submit"
              type="button"
              aria-controls="dialog0"
            >Submit</button>
          </p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            aria-modal="true"
            class="dialog middle covert"
            aria-expanded="false"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Caution: Submit?</legend>
                <p id="dialog0-label-body">You have named <strong><span id="joint-owner"></span></strong> as the joint owner. You have specified <q><strong><span id="ownership"></span></strong></q> as the form of ownership. Do you confirm this decision?</p>
                <div class="flex around">
                  <p>
                    <button
                      id="submityes"
                      type="button"
                      aria-labelledby="dialog0-label-body"
                    >
                      Yes, I confirm this decision
                    </button>
                  </p>
                  <p>
                    <button
                      id="submitno"
                      type="button"
                      class="abort"
                      aria-labelledby="dialog0-label-body"
                    >
                      No, I wish to wait
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/dialogs/examples/bad/leak/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>Form of ownership of this account</legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                id="name"
                aria-controls="submit"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <button
              id="submit"
              type="button"
              aria-controls="dialog0"
            >Submit</button>
          </p>
        </form>
        <p id="ack" role="status"></p>
        <div
          id="dialog0"
          role="alertdialog"
          aria-modal="true"
          class="dialog middle covert"
          aria-expanded="false"
        >
          <form>
            <p class="center">
              <button
                id="hide"
                class="overt-inline"
                type="button"
                aria-controls="dialog0"
                aria-describedby="dialog0-label-title dialog0-label-body"
              >
                Hide
              </button>
              <button
                id="show"
                class="covert"
                type="button"
                aria-controls="dialog0"
              >
                Show
              </button>
            </p>
            <fieldset class="hidable overt">
              <legend id="dialog0-label-title">Caution: Submit?</legend>
              <p id="dialog0-label-body">You have named <strong><span id="joint-owner"></span></strong> as the joint owner. You have specified <q><strong><span id="ownership"></span></strong></q> as the form of ownership. Do you confirm this decision?</p>
              <div class="flex around">
                <p>
                  <button id="submityes" type="button">
                    Yes, submit now
                  </button>
                </p>
                <p>
                  <button id="submitno" type="button" class="abort">
                    No, do not submit yet
                  </button>
                </p>
              </div>
            </fieldset>
          </form>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/dialogs/examples/bad/vague/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>Form of ownership of this account</legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                id="name"
                aria-controls="submit"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <button
              id="submit"
              type="button"
              aria-controls="dialog0"
            >Submit</button>
          </p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            aria-modal="true"
            class="dialog middle covert"
            aria-expanded="false"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Caution: Submit?</legend>
                <p id="dialog0-label-body">You have asked to submit this designation. Submission will determine who owns this account and what rights each owner has over it. Please confirm whether this is your intent.</p>
                <div class="flex around">
                  <p>
                    <button id="submityes" type="button">
                      Yes, submit now
                    </button>
                  </p>
                  <p>
                    <button id="submitno" type="button" class="abort">
                      No, I wish to wait
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/dialogs/examples/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main" aria-controls="dialog0" aria-expanded="false">
          <fieldset>
            <legend>Form of ownership of this account</legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                id="name"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button id="submit">Submit</button></p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            aria-modal="true"
            class="dialog middle covert"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-expanded="false"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-expanded="false"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Caution: Submit?</legend>
                <p id="dialog0-label-body">You have named <strong><span id="joint-owner"></span></strong> as the joint owner. You have specified <q><strong><span id="ownership"></span></strong></q> as the form of ownership. Do you confirm this decision?</p>
                <div class="flex around">
                  <p>
                    <button
                      id="submityes"
                      type="button"
                      aria-labelledby="dialog0-label-body"
                    >
                      Yes, I confirm this decision
                    </button>
                  </p>
                  <p>
                    <button
                      id="submitno"
                      type="button"
                      class="abort"
                      aria-labelledby="dialog0-label-body"
                    >
                      No, I wish to wait
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/dialogs/examples/native/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>Form of ownership of this account</legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                id="name"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button id="submit">Submit</button></p>
        </form>
        <p id="ack" role="status"></p>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/dialogs/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="Accessible dialog workshop">
    <meta name="keywords" content="HTML,dialog,layer,accessibility">
    <link rel="stylesheet" href="../../style.css">
    <title>Dialog Workshop</title>
  </head>
  <body>
    <header>
      <h1>Dialog Workshop</h1>
    </header>
    <section>
      <header>
        <figure>
          <img
            src="../../gen/assets/a11y-kbd.jpg"
            alt="keyboards matter for accessibility"
            width="75%"
          >
        </figure>
        <h2>Introduction</h2>
      </header>
      <p><strong>Dialogs</strong> (also called <q>layers</q>) are a pervasive feature of Utopia user interfaces. Utopia websites manage complex transactions that often require temporary auxiliary interactions. They include disclosures, details, warnings, requests for information, and requests for confirmation or cancelation. Designers of Utopia UIs often decide to use dialogs as vehicles for such auxiliary interactions.</p>
      <p>A dialog is often a tool to <strong>accomplish</strong> accessibility, but, at the same time, a dialog can <strong>interfere with</strong> accessibility. In this workshop you will learn how to deal with this paradox and make auxiliary interactions accessible.</p>
    </section>
    <section>
      <header>
        <h2>A simple good/bad example</h2>
      </header>
      <p><a href="goodbad/good.html" target="_blank">Good example</a>.</p>
      <p><a href="goodbad/bad.html" target="_blank">Bad example</a>.</p>
      <p>These two tables look the same, but they are different. First, compare how one screen reader handles these examples:</p>
      <ul>
        <li><a href="goodbad/good-nvda.mp4" target="_blank">good with NVDA in Chrome on Windows</a></li>
        <li><a href="goodbad/bad-nvda.mp4" target="_blank">bad with NVDA in Chrome on Windows</a></li>
      </ul>
      <p>The reason for the differences is that the tables are coded differently. Inspect the code of each example.</p>
      <p>A properly coded simple table is handled better by screen readers. However, not all screen readers properly handle even simple tables. Can you identify errors in these recordings?:</p>
      <ul>
        <li><a href="goodbad/good-vosafosx.mp4" target="_blank">good with VoiceOver in Safari on OS X</a></li>
        <li><a href="goodbad/good-vosafios.mp4" target="_blank">good with VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Column groups</h2>
      </header>
      <p><a href="colgroup/index.html" target="_blank">Formally accessible example</a>.</p>
      <p>Inspect the code of this table. Note that the &ldquo;Type&rdquo; header is marked as a row header. The reason is that, by default, it would be a column header, but in this case it applies to the top rows, not the left column.</p>
      <p>Column groups are handled properly by some screen readers, but not by all. Can you identify errors in these recordings?:</p>
      <ul>
        <li><a href="colgroup/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="colgroup/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Row groups</h2>
      </header>
      <p><a href="rowgroup/index.html" target="_blank">Formally accessible example</a>.</p>
      <p>Row groups are handled properly by some screen readers, but not by all. Listen for errors in these recordings. Some errors are serious.</p>
      <ul>
        <li><a href="rowgroup/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="rowgroup/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="rowgroup/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Stacked row groups</h2>
      </header>
      <p>Utopia tables often contain row groups. Usually they are stacked. A header of a row group, such as &ldquo;IRA&rdquo; in the previous example, is placed <strong>above</strong> the rows in the group, instead of on their left.</p>
      <p>Here are two examples of tables with stacked row groups:</p>
      <ul>
        <li><a href="stack/stackid.html" target="_blank">Example of table with <code>headers</code> attributes</a>.</li>
        <li><a href="stack/stackscope.html" target="_blank">Example of table with <code>scope</code> attributes</a>.</li>
      </ul>
      <p>In these examples, the styles show that &ldquo;IRA&rdquo; is a header for the next two rows, not the next three rows. But assistive technologies generally disregard styles. To them, these tables &ldquo;look&rdquo; like <a href="stack/stacknostyle.html" target="_blank">this</a>.</p>
      <p>Therefore, formal accessibility requires you to specify which rows each row-group header belongs to.</p>
      <p>There are two methods for specifying what row-group headers are headers of:<code>headers</code> attributes and <code>scope</code> attributes. Inspect the code of the two examples above to see how these methods work.</p>
      <p>The <code>headers</code> method is straightforward: You specify, for each cell, which other cells are its headers.</p>
      <p>The <code>scope</code> method is somewhat more complex. You attach a <code>scope="rowgroup"</code> attribute to a row-group header. Then, in order to specify the boundaries of its row group, you enclose the rows of that group, including the row-group header&rsquo;s row, in a <code>tbody</code> element. That makes that header a header of every cell below it and every cell to its right, throughout the rows in that <code>tbody</code> element.</p>
      <p>As the tables become more complex, the behavior of screen readers becomes more erroneous. Stacked row groups are <strong>not</strong> handled properly by most or all of the most common screen readers. This is true for <strong>both</strong> methods. Try to identify the errors in these recordings:</p>
      <h3>Tables using the <code>headers</code> method</h3>
      <ul>
        <li><a href="stack/headers/nvdachromewin.mp4" target="_blank">NVDA in Chrome on Windows</a></li>
        <li><a href="stack/headers/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="stack/headers/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="stack/headers/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <h3>Tables using the <code>scope</code> method</h3>
      <ul>
        <li><a href="stack/scope/nvdachromewin.mp4" target="_blank">NVDA in Chrome on Windows</a></li>
        <li><a href="stack/scope/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="stack/scope/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="stack/scope/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Substacked row groups</h2>
      </header>
      <p>Utopia tables can be much more complex that what you have seen so far. For example, they often stack rows in groups <strong>and subgroups</strong>. One class of tables doing this is <a href="https://investor.utopia.com/mutual-funds/list#/mutual-funds/asset-class/month-end-returns" target="_blank">tables of funds</a>.</p>
      <p>An investor using a screen reader (JAWS in Chrome on Windows) to navigate inside this table could <a href="substack/jawschromewin-funds.mp4" target="_blank">hear cell contents without any headings</a> at all, and therefore find it nearly impossible to understand the information in those cells.</p>
      <p>Can tables with stacked subgroups be made accessible? There are two answers:</p>
      <ul>
        <li>They can be made <strong>formally</strong> accessible. This requires using the <code>headers</code> method. The <code>scope</code> method cannot be used, because it would require <code>tbody</code> elements inside <code>tbody</code> elements, and the HTML5 specification prohibits that.</li>
        <li>It is questionable whether they can be made <strong>practically</strong> accessible. You have seen that screen readers sometimes fail to support the <code>headers</code> method properly.</li>
      </ul>
      <p>Consider this <a href="substack/index.html" target="_blank">simplified example of a formally accessible table with stacked subgroups</a>. Inspect its code to see that <code>headers</code> attributes are used to identify the group and subgroup headers of the cells on the &ldquo;Class A&rdquo; and &ldquo;Class B&rdquo; rows.</p>
      <p>Here are a couple of recordings of screen readers navigating this table. Identify the serious errors in them.</p>
      <ul>
        <li><a href="substack/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="substack/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Solutions for practical accessibility</h2>
      </header>
      <p>If you are implementing tables in a project that aims for formal accessibility, you can succeed, using the methods illustrated above.</p>
      <p>However, if your project is more ambitious and aims for practical accessibility, what can you do?</p>
      <p>You can craft solutions by recognizing two basic facts:</p>
      <ul>
        <li>User technologies (operating systems, browsers, screen readers, etc.) give excellent support to some web standards and poor or no support to others. Tables are especially difficult for assistive technologies to support, because browsers don&rsquo;t communicate the important facts about tables to them. Support for simple tables is not perfect, but is better than support for complex tables.</li>
        <li>Users vary in how they prefer or need to consume financial data. Tables are intuitive for some users but overwhelming and confusing for others. Some users hate graphs and want tables. Other users hate tables and want graphs. And some users can&rsquo;t make use of either graphs or tables and want something else.</li>
      </ul>
      <p>From these facts comes a solution strategy: Make tables formally accessible, but accept the reality that their practical accessibility will be limited at present. If and when user technologies improve their support for web standards, your formally accessible tables may become practically more accessible, too. Meanwhile, you have some options.</p>
      <h3>Non-tabular alternatives</h3>
      <p>In addition to tables, you can offer other structures for the presentation of the same data. HTML5 offers two structures that can produce natural analogs to tables:</p>
      <ul>
        <li>description lists</li>
        <li>headings</li>
      </ul>
      <p>Description lists are a structure for presenting attributes and values. Each row of a table can become one description list. Headings can introduce them. Description lists fit easily onto a narrow screen. A <a href="alt/dl.html" target="_blank">description-list version of the previous table</a> exemplifies this. Inspect the code to see how this structure is applied.</p>
      <p>Description lists have been in the HTML standard since 1993, so creators of screen readers have had plenty of time to support that structure. Amazingly, however, not all do. Note the errors in these recordings:</p>
      <ul>
        <li><a href="alt/vosafosx-dl.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="alt/vosafios-dl.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <p>So, why even mention description lists here? Because they are a reasonable table alternative, so you should know how poorly supported they are before you decide whether to use them.</p>
      <p>Instead of (or in addition to) description lists, you can achieve practical accessibility with plain-text paragraphs describing the attributes and values, embedded in the same heading structure. A <a href="alt/p.html" target="_blank">revised example</a> removes the <code>dl</code>, <code>dt</code>, and <code>dd</code> elements, replacing them with <code>p</code> elements. Now screen readers have no trouble parsing and announcing the content:</p>
      <ul>
        <li><a href="alt/vosafosx-p.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="alt/vosafios-p.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <p>Developers are sometimes tempted to make such alternative formats available only to users of assistive technologies. But they are useful for others, too. They can benefit any user of a small display such as a mobile telephone. They can also benefit <a href="https://www.maltron.com/store/p24/Maltron_Head%2FMouth_Stick_Keyboard_-_US_English.html" target="_blank">users who cannot use a mouse</a>, and users who have trouble understanding tables. Accessibility experts recommend generally making alternatives available to everybody.</p>
      <h3>Table simplification</h3>
      <p>You have seen that simple tables come closer to practical accessibility than complex tables do. That inspires an additional measure that a project can consider: breaking complex tables up, or flattening complex tables, into simple tables. For example, in the above table, common stocks could be a table of their own. Alternatively, security types could be flattened into a single group, with members such as &ldquo;Class A Common Stock&rdquo;.</p>
    </section>
    <section>
      <header>
        <h2>Testing tables for accessibility</h2>
      </header>
      <p>Testing is an essential part of development, so how do you test tables for accessibility?</p>
      <h3>Test packages</h3>
      <p>One option is to use packages of accessibility tests. They check for conformity to various accessibility standards. Some of those are related to tables. Two such packages are Axe, which implements the <a href="https://github.com/dequelabs/axe-core" target="_blank">axe-core rules</a>, and the <a href="https://wave.webaim.org/" target="_blank">WAVE Web Accessibility Evaluation Tool</a>. Axe is available for various testing frameworks, including Jest and Cypress. Both are available also as Utopia-approved extensions to Chrome, and as Firefox extensions.</p>
      <p>Try both of these packages in Chrome on the bad example of a simple table. You will find that they both report <strong>no</strong> accessibility defects! Why not?</p>
      <ul>
        <li>Accessibility test packages don&rsquo;t test for everything. There is no guarantee they will find all the defects.</li>
        <li>They don&rsquo;t complain about the missing <code>caption</code> element in the bad table. The title of the table, which could have been there, is instead in an <code>h2</code> element above the table. That worsens accessibility. For example, a user asking a screen reader for a list of the tables on the page would not get the table titles. Still, the HTML5 standard makes <code>caption</code> elements optional, not required, and the rules applied by these packages do the same.</li>
        <li>They don&rsquo;t complain about the header cells being coded as <code>td</code> cells instead of <code>th</code>. They also don&rsquo;t complain about the fact that the table contains no <code>th</code> cells at all. To report a miscoded header cell, a package would need to figure out which cells really contain headers. It would guess, based on location, alignment, font style, or other facts, and it could guess wrong. <a href="https://github.com/dequelabs/axe-core#about-axe---our-manifesto">Axe claims it will report <q>zero false positives</q></a>, namely it will never guess wrong, so it therefore doesn&rsquo;t guess.</li>
      </ul>
      <h3>Custom tests</h3>
      <p>So, packages play it safe and leave some important defects unreported. Therefore, testing your tables thoroughly for accessibility requires you to write your own accessibility tests. You can do this along with the other tests you write. You can take advantage of your project&rsquo;s practices and standards to make your tests more specific than any package could.</p>
      <p>For the simple good and bad examples above, you would want tests that the good example passes and the bad example fails.</p>
      <p>One of the Utopia testing frameworks that you can use for this purpose is Jest. It is the one used for unit testing in the CTO&rsquo;s Angular exemplar application.</p>
      <p>If you fork and clone this repository and then execute <code>npm install</code> in your local copy, you will then be able to execute <code>npm run test</code>. That will run some Jest tests designed for the good and bad example tables.</p>
      <p>The test file is <code>ex/tables/goodbad/spec.js</code>. That file looks like this:</p>
      <pre><code>
        const {JSDOM} = require('jsdom');
        const fs = require('fs');
        const path = require('path');
        
        const htmls = [
          fs.readFileSync(path.resolve(__dirname, 'good.html'), 'utf8'),
          fs.readFileSync(path.resolve(__dirname, 'bad.html'), 'utf8')
        ];
        const bodyLabels = ['good first table', 'bad first table'];
        let dom;
        let body;
        let table0;
        let table0Children;
        let table0ChildCount;
        
        [0, 1].forEach(index => {
          describe(bodyLabels[index], () => {
            beforeEach(() => {
              dom = new JSDOM(htmls[index]);
              body = dom.window.document.body;
              table0 = body.querySelector('table');
              table0Children = table0.children;
              table0ChildCount = table0.childElementCount;
            });
            it('should have a caption', () => {
              expect(table0ChildCount && table0Children[0].tagName).toBe('CAPTION');
            });
            it('caption text should be correct', () => {
              const table0Caption = table0 && table0.querySelector('caption');
              expect(
                table0Caption && table0Caption.textContent.trim()
              ).toBe('Retirement Account Types');
            });
            it('should have a thead next after the caption', () => {
              expect(table0ChildCount > 1 && table0.children[1].tagName).toBe('THEAD');
            });
            it('should have only header cells in any header rows', () => {
              expect(table0 && table0.querySelector('thead > td')).toBeFalsy();
            });
            it('should have only header cells on the left', () => {
              expect(
                table0 && table0.querySelector('tbody > tr > td:first-child')
              ).toBeFalsy();
            });
          });
        });
      </code></pre>
      <p>There are five tests (calls to the <code>it()</code> function. They test for the table having:</p>
      <ul>
        <li>its title in a <code>caption</code> element</li>
        <li>its title being correct</li>
        <li>its column headers in a <code>thead</code> element</li>
        <li>all the column headers being coded as headers</li>
        <li>all the other left-most cells being coded as row headers</li>
      </ul>
      <p>If you run the tests, the output will show:</p>
      <pre><code>
        good first table
          v should have a caption (147 ms)
          v caption text should be correct (40 ms)
          v should have a thead next after the caption (27 ms)
          v should have only header cells in any header rows (34 ms)
          v should have only header cells on the left (29 ms)
        bad first table
          × should have a caption (32 ms)
          × caption text should be correct (25 ms)
          × should have a thead next after the caption (28 ms)
          v should have only header cells in any header rows (19 ms)
          × should have only header cells on the left (22 ms)
      </code></pre>
      <p>The good example passes all the tests. The bad example passes the fourth test <q>vacuously</q>, because it doesn&rsquo;t have any <code>thead</code> element and therefore has no <code>td</code> elements inside a <code>thead</code> element. Otherwise, though, the bad example fails all the tests.</p>
      <p>These are tests for <strong>formal</strong> accessibility. Testing for <strong>practical</strong> accessibility is more complex. Some testing for practical accessibility can be automated; a test can simulate a user and report defective interactions. But such testing is still primitive. Most practical-accessibility testing is labor-intensive, non-automated work. For example, the tester turns on a screen reader and navigates with a keyboard to and within your table, listening to what the screen reader announces.</p>
      <p>Because of the time and expense of testing for practical accessibility, it is efficient for you to test your tables thoroughly for formal accessibility as part of your normal testing discipline. After they pass your automated tests, then they are ready for non-automated tests of practical accessibility.</p>
    </section>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/button/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <span id="submitButton" role="button" tabindex="0">
              Submit
            </span>
          </p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/efficiency/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1>Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/link/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><span
            role="link"
            onclick="location = 'https://investor.utopia.com/home'"
            tabindex="0"
          >Home</span></li>
          <li><span
            role="link"
            onclick="location = 'https://personal.utopia.com/us/MyHome'"
            tabindex="0"
          >My&nbsp;Accounts</span></li>
          <li><span
            role="link"
            onclick="location = 'https://investor.utopia.com/investing'"
            tabindex="0"
          >Investing</span></li>
          <li><span
            role="link"
            onclick="location = 'https://investor.utopia.com/financial-advisor/financial-advice'"
            tabindex="0"
          >Advice</span></li>
          <li><span
            role="link"
            onclick="location = 'https://investor.utopia.com/investing/news-perspectives'"
            tabindex="0"
          >News</span></li>
          <li><span
            role="link"
            onclick="location = 'https://investor.utopia.com/investing/why-utopia'"
            tabindex="0"
          >Benefits</span></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/predictability/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button tabindex="1">Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/radio/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/reachability/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start" tabindex="-1">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><span role="link"
            onclick="location = 'https://investor.utopia.com/home'"
          >Home</span></li>
          <li><span role="link"
            onclick="location = 'https://personal.utopia.com/us/MyHome'"
          >My&nbsp;Accounts</span></li>
          <li><span role="link"
            onclick="location = 'https://investor.utopia.com/investing'"
          >Investing</span></li>
          <li><span role="link"
            onclick="location = 'https://investor.utopia.com/financial-advisor/financial-advice'"
          >Advice</span></li>
          <li><span role="link"
            onclick="location = 'https://investor.utopia.com/investing/news-perspectives'"
          >News</span></li>
          <li><span role="link"
            onclick="location = 'https://investor.utopia.com/investing/why-utopia'"
          >Benefits</span></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
              tabindex="-1"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
              tabindex="-1"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
              tabindex="-1"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                  tabindex="-1"
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                  tabindex="-1"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                  tabindex="-1"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
                tabindex="-1"
              >
            </label>
          </p>
          <p class="center"><button tabindex="-1">Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/reachability-old/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start" tabindex="-1">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
            tabindex="-1"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
            tabindex="-1"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
            tabindex="-1"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
            tabindex="-1"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
            tabindex="-1"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
            tabindex="-1"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
              tabindex="-1"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
              tabindex="-1"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
              tabindex="-1"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                  tabindex="-1"
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                  tabindex="-1"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                  tabindex="-1"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
                tabindex="-1"
              >
            </label>
          </p>
          <p class="center"><button tabindex="-1">Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/bad/visibility/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/basic/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Keyboard navigation workshop">
    <meta name="keywords" content="Utopia,software development,accessibility,a11y,user interface,keyboard,navigation">
    <meta name="creator" content="IT Corporate Marketing and Communication Systems and Accessibility Office, The Utopia Group">
    <meta name="publisher" content="Accessibility Office, The Utopia Group">
    <link rel="stylesheet" href="../../style.css">
    <title>Keyboard Navigation Workshop</title>
  </head>
  <body>
    <header>
      <h1>Keyboard Navigation Workshop</h1>
    </header>
    <section>
      <header>
        <h2>Introduction</h2>
      </header>
      <figure>
        <img
          src="../../gen/assets/a11y-kbd.jpg"
          alt="keyboards matter for accessibility"
          width="75%"
        >
      </figure>
      <p><strong>Keyboard navigability</strong> is a basic requirement for accessible UIs:</p>
      <ul>
        <li><a href="https://www.w3.org/TR/WCAG21/#keyboard-accessible">Guideline 2.1 of Web Content Accessibility Guidelines, version 2.1</a>, says <q>Make all functionality available from a keyboard</q>.</li>
        <li>Success Criterion 2.1.1 more specifically requires: <q>All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user&rsquo;s movement and not just the endpoints.</q></li>
      </ul>
      <p>Why? Because some users and <a href="https://www.maltron.com/store/p24/Maltron_Head%2FMouth_Stick_Keyboard_-_US_English.html">some assistive user tools</a> use the browser&rsquo;s keyboard API as their only navigation input mode, even on touch devices.</p>
      <p>In this workshop we&rsquo;ll practice making UIs keyboard-navigable. For each topic, you start with a UI that fails. Your job is to figure out why it fails, correct it, and test your corrected version.</p>
    </section>
    <section>
      <header>
        <h2>Reachability</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page with links and controls that can all be reached with a real or emulated keyboard.</p>
      <p><a href="basic/bad/reachability" target="_blank">Bad example</a>: page with links and controls that <strong>cannot</strong> be reached with a real or emulated keyboard.</p>
    </section>
    <section>
      <header>
        <h2>Visibility</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page with easily visible focus.</p>
      <p><a href="basic/bad/visibility" target="_blank">Bad example</a>: page with invisible focus.</p>
    </section>
    <section>
      <header>
        <h2>Predictability</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page with predictable navigation order.</p>
      <p><a href="basic/bad/predictability" target="_blank">Bad example</a>: page with erratic navigation order.</p>
    </section>
    <section>
      <header>
        <h2>Efficiency</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page requiring only two keypresses to reach main content.</p>
      <p><a href="basic/bad/efficiency" target="_blank">Bad example</a>: page requiring seven keypresses to reach main content.</p>
    </section>
    <section>
      <header>
        <h2>Radio-button navigability</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page allowing standard arrow-key navigation among radio buttons.</p>
      <p><a href="basic/bad/radio" target="_blank">Bad example</a>: page not allowing keyboard navigation among radio buttons.</p>
    </section>
    <section>
      <header>
        <h2>Link activatability</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page allowing ENTER key to follow a link.</p>
      <p><a href="basic/bad/link" target="_blank">Bad example</a>: page not allowing keyboard action to follow a link.</p>
    </section>
    <section>
      <header>
        <h2>Button activatability</h2>
      </header>
      <p><a href="basic/good" target="_blank">Good example</a>: page allowing SPACE or ENTER key to activate a button.</p>
      <p><a href="basic/bad/button" target="_blank">Bad example</a>: page not allowing keyboard action to activate a button.</p>
    </section>
    <section>
      <header>
        <h2>Tab-list navigability</h2>
      </header>
      <p><a href="more/tablist/good" target="_blank">Good example</a>: page allowing standard arrow-key navigation among tabs.</p>
      <p><a href="more/tablist/bad" target="_blank">Bad example</a>: page not allowing keyboard navigation among tabs.</p>
    </section>
    <section>
      <header>
        <h2>Dialog dismissibility</h2>
      </header>
      <p><a href="more/dialog/good" target="_blank">Good example</a>: page allowing SPACE or ENTER key to dismiss dialog.</p>
      <p><a href="more/dialog/bad/dismiss" target="_blank">Bad example</a>: page not allowing keyboard action to dismiss dialog (i.e. page with a keyboard trap).</p>
    </section>
    <section>
      <header>
        <h2>Dialog leakage</h2>
      </header>
      <p><a href="more/dialog/good" target="_blank">Good example</a>: page confining  navigation to dialog.</p>
      <p><a href="more/dialog/bad/leak" target="_blank">Bad example</a>: page allowing keyboard navigation beyond dialog.</p>
    </section>
    <section>
      <header>
        <h2>Other controls</h2>
      </header>
      <p>Examples</p>
      <ul>
        <li>Checkboxes</li>
        <li>Select lists</li>
        <li>Date inputs</li>
        <li>Range inputs</li>
        <li>Number inputs</li>
        <li>Text areas</li>
      </ul>
      <p>Principles</p>
      <ul>
        <li>Use HTML5 elements when they exist.</li>
        <li>Use ARIA attributes when HTML5 elements don&rsquo;t exist.</li>
        <li>Don&rsquo;t interfere with native keyboard navigation.</li>
        <li>If HTML5 elements exist but are not used, replicate their behavior.</li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Test automation</h2>
      </header>
      <p>Packaged automated tests.</p>
      <p>Custom automated tests.</p>
    </section>
  </body>
</html>

==> workshops/ex/keyboardnav/more/dialog/bad/dismiss/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                aria-controls="submit"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <button
              id="submit"
              type="button"
              aria-controls="dialog0"
            >Submit</button>
          </p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            class="dialog middle covert"
            aria-expanded="false"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Caution: Submit?</legend>
                <p id="dialog0-label-body">You have asked to submit this designation. Submission will determine who owns this account and what rights each owner has over it. Please confirm whether this is your intent.</p>
                <div class="flex around">
                  <p>
                    <button id="submityes" type="button" tabindex="-1">
                      Yes, submit now
                    </button>
                  </p>
                  <p>
                    <button
                      id="submitno"
                      type="button"
                      class="abort"
                      tabindex="-1"
                    >
                      No, do not submit yet
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/more/dialog/bad/leak/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                aria-controls="submit"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <button
              id="submit"
              type="button"
              aria-controls="dialog0"
            >Submit</button>
          </p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            class="dialog middle covert"
            aria-expanded="false"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Caution: Submit?</legend>
                <p id="dialog0-label-body">You have asked to submit this designation. Submission will determine who owns this account and what rights each owner has over it. Please confirm whether this is your intent.</p>
                <div class="flex around">
                  <p>
                    <button id="submityes" type="button">
                      Yes, submit now
                    </button>
                  </p>
                  <p>
                    <button id="submitno" type="button" class="abort">
                      No, do not submit yet
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/more/dialog/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section>
        <h2>Definitions</h2>
        <p>Here are definitions of the forms of ownership. The definitions are on a <strong>non-Utopia site</strong>. Each definition will open in a <strong>new tab or window</strong>.</p>
        <ul>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_in_common"
              target="_blank"
            ><dfn>tenancy in common</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/tenancy_by_the_entirety"
              target="_blank"
            ><dfn>tenancy by the entirety</dfn></a>
          </li>
          <li>
            <a
              href="https://www.law.cornell.edu/wex/right_of_survivorship"
              target="_blank"
            ><dfn>joint tenancy with rights of survivorship</dfn></a>
          </li>
        </ul>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form id="form-main">
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                aria-controls="submit"
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center">
            <button
              id="submit"
              type="button"
              aria-controls="dialog0"
            >Submit</button>
          </p>
        </form>
        <p id="ack" role="status"></p>
        <div id="shader0" class="clear">
          <div
            id="dialog0"
            role="alertdialog"
            class="dialog middle covert"
            aria-expanded="false"
          >
            <form>
              <p class="center">
                <button
                  id="hide"
                  class="overt-inline"
                  type="button"
                  aria-controls="dialog0"
                  aria-describedby="dialog0-label-title dialog0-label-body"
                >
                  Hide
                </button>
                <button
                  id="show"
                  class="covert"
                  type="button"
                  aria-controls="dialog0"
                >
                  Show
                </button>
              </p>
              <fieldset class="hidable overt">
                <legend id="dialog0-label-title">Caution: Submit?</legend>
                <p id="dialog0-label-body">You have asked to submit this designation. Submission will determine who owns this account and what rights each owner has over it. Please confirm whether this is your intent.</p>
                <div class="flex around">
                  <p>
                    <button id="submityes" type="button">
                      Yes, submit now
                    </button>
                  </p>
                  <p>
                    <button id="submitno" type="button" class="abort">
                      No, do not submit yet
                    </button>
                  </p>
                </div>
              </fieldset>
            </form>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/more/tablist/bad/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section class="tablist">
        <header>
          <h2><label for="ownerships">Definitions of forms of ownership</label></h2>
        </header>
        <ul id="ownerships" role="tablist">
          <li
            id="tabtc"
            role="tab"
            tabindex="0"
            aria-selected="true"
            aria-controls="deftc"
          >
            Tenancy in common
          </li>
          <li
            id="tabte"
            role="tab"
            tabindex="-1"
            aria-selected="false"
            aria-controls="defte"
          >
            Tenancy by the entirety
          </li>
          <li
            id="tabjtrs"
            role="tab"
            tabindex="-1"
            aria-selected="false"
            aria-controls="defjtrs"
          >
            Joint tenancy with rights of survivorship
          </li>
        </ul>
        <section>
          <p
            id="deftc"
            role="tabpanel"
            tabindex="0"
            aria-labelledby="tabtc"
            class="overt">In a tenancy in common, the shares in the property may be of unequal size, and can be freely transferred to other owners both during the owner&rsquo;s lifetime and via a will.</p>
          <p
            id="defte"
            role="tabpanel"
            tabindex="0"
            aria-labelledby="tabte"
            class="covert">
            Tenancy by the entirety is available only to married couples. Spouses each own an undivided interest in the property. Each has a right of survivorship.  Tenants cannot transfer their interest in the property without the consent of the other spouse.
          </p>
          <p
            id="defjtrs"
            role="tabpanel"
            tabindex="0"
            aria-labelledby="tabjtrs"
            class="covert">
            In a joint tenancy with rights of survivorship, each owner has an undivided interest in the property. The right of survivorship means that when one owner dies the other owners absorb the deceased owner&rsquo;s interest.
          </p>
        </section>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/keyboardnav/more/tablist/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Joint Ownership Designation</title>
    <link rel="stylesheet" href="style.css">
    <script src="nav.js"></script>
  </head>
  <body>
    <header>
      <nav class="skip">
        <a href="#main-start">Skip to page content</a>
      </nav>
      <nav class="banner">
        <ul>
          <li><a
            href="https://investor.utopia.com/home"
          >Home</a></li>
          <li><a
            href="https://personal.utopia.com/us/MyHome"
          >My&nbsp;Accounts</a></li>
          <li><a
            href="https://investor.utopia.com/investing"
          >Investing</a></li>
          <li><a
            href="https://investor.utopia.com/financial-advisor/financial-advice"
          >Advice</a></li>
          <li><a
            href="https://investor.utopia.com/investing/news-perspectives"
          >News</a></li>
          <li><a
            href="https://investor.utopia.com/investing/why-utopia"
          >Benefits</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <header>
        <h1 id="main-start" tabindex="-1">Joint Ownership Designation</h1>
      </header>
      <section>
        <h2>Introduction</h2>
        <p>You have designated this account as a joint account. You and one other person will jointly own it. Please provide the details below.</p>
      </section>
      <section class="tablist">
        <header>
          <h2><label for="ownerships">Definitions of forms of ownership</label></h2>
        </header>
        <ul id="ownerships" role="tablist">
          <li
            id="tabtc"
            role="tab"
            tabindex="0"
            aria-selected="true"
            aria-controls="deftc"
          >
            Tenancy in common
          </li>
          <li
            id="tabte"
            role="tab"
            tabindex="-1"
            aria-selected="false"
            aria-controls="defte"
          >
            Tenancy by the entirety
          </li>
          <li
            id="tabjtrs"
            role="tab"
            tabindex="-1"
            aria-selected="false"
            aria-controls="defjtrs"
          >
            Joint tenancy with rights of survivorship
          </li>
        </ul>
        <section>
          <p
            id="deftc"
            role="tabpanel"
            tabindex="0"
            aria-labelledby="tabtc"
            class="overt">In a tenancy in common, the shares in the property may be of unequal size, and can be freely transferred to other owners both during the owner&rsquo;s lifetime and via a will.</p>
          <p
            id="defte"
            role="tabpanel"
            tabindex="0"
            aria-labelledby="tabte"
            class="covert">
            Tenancy by the entirety is available only to married couples. Spouses each own an undivided interest in the property. Each has a right of survivorship.  Tenants cannot transfer their interest in the property without the consent of the other spouse.
          </p>
          <p
            id="defjtrs"
            role="tabpanel"
            tabindex="0"
            aria-labelledby="tabjtrs"
            class="covert">
            In a joint tenancy with rights of survivorship, each owner has an undivided interest in the property. The right of survivorship means that when one owner dies the other owners absorb the deceased owner&rsquo;s interest.
          </p>
        </section>
      </section>
      <section>
        <h2>Form</h2>
        <p>Please complete and submit this form.</p>
        <form>
          <fieldset>
            <legend>
              Form of ownership of this account
            </legend>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-in-common"
                  checked
                >
                <span>Tenancy in common</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-by-entirety"
                >
                <span>Tenancy by the entirety</span>
              </label>
            </p>
            <p>
              <label>
                <input
                  type="radio"
                  name="ownership-form"
                  value="tenancy-rights-survivorship"
                >
                <span>Joint tenancy with rights of survivorship</span>
              </label>
            </p>
          </fieldset>
          <p>
            <label>
              <span>Name of joint owner (required: 3 to 50 characters)</span>
              <input
                type="text"
                size="40"
                minlength="3"
                maxlength="50"
                required
              >
            </label>
          </p>
          <p class="center"><button>Submit</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/spas/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="https://jpdev.pro">
    <meta name="creator" content="Jonathan Pool">
    <meta name="publisher" content="Business Platforms and Services; Accessibility Office">
    <meta name="description" content="accessible SPA">
    <meta name="keywords" content="single-page application,SPA">
    <title>Sell a security</title>
    <link type="text/css" rel="stylesheet" href="style.css">
    <script src="script.js"></script>
  </head>

  <body>
    <main>
      <header>
        <h1>Sell a security</h1>
      </header>
      <section id="what" class="top overt">
        <header>
          <h2>What to sell</h2>
        </header>
        <section class="question">
          <fieldset>
            <legend>Choose a security to sell some or all of:</legend>
            <div class="grid2col"></div>
          </fieldset>
        </section>
        <section class="answer covert">
          <p>Security to be sold:</p>
          <p class="spec"></p>
        </section>
      </section>
      <section id="howmuch" class="top covert">
        <header>
          <h2>How much to sell</h2>
        </header>
        <section id="allorsome" class="sub covert">
          <section class="question">
            <fieldset>
              <legend>Do you want to sell all of your holding in this security?</legend>
              <ul>
                <li><button type="button" id="allorsome-all">Yes</button></li>
                <li><button type="button" id="allorsome-some">No</button></li>
              </ul>
            </fieldset>
          </section>
          <section class="answer covert">
            <p>All or part of holding to be sold:</p>
            <p class="spec"></p>
          </section>
        </section>
        <section id="amounttype" class="sub covert">
          <section class="question">
            <fieldset>
              <legend>How to express the amount to be sold?</legend>
              <ul>
                <li><button type="button" id="amounttype-shares">Shares</button></li>
                <li><button type="button" id="amounttype-salevalue">Sale value</button></li>
                <li><button type="button" id="amounttype-facevalue">Face value</button></li>
                <li><button type="button" id="amounttype-pct">Percentage of holding</button></li>
              </ul>
            </fieldset>
          </section>
          <section class="answer covert">
            <p>Amount to be sold expressed as:</p>
            <p class="spec"></p>
          </section>
        </section>
        <section id="amountvalue" class="sub covert">
          <section class="question">
            <label>
              <span class="prelabel">Amount to be sold</span>
              <input type="number" id="amountvalue-input">
              <span class="postlabel"></span>
            </label>
          </section>
          <section class="answer covert">
            <p>Amount to be sold:</p>
            <p class="spec"></p>
          </section>
        </section>
      </section>
      <section id="price" class="top covert">
        <header>
          <h2>Price to sell at</h2>
        </header>
        <section id="price" class="sub covert">
          <section class="question">
            <fieldset>
              <legend>What type of price do you want to sell at?</legend>
              <p><dfn>Market</dfn>: the market price when you sell</p>
              <p><dfn>Limit</dfn>: a specified above-market price or better</p>
              <p><dfn>Stop</dfn>: the market price when it decreases to a specified price</p>
              <p><dfn>Stop limit</dfn>: a specified below-market price or better when the market price decreases to a specified price</p>
              <ul>
                <li><button type="button" id="price-market">Market</button></li>
                <li><button type="button" id="price-limit">Limit</button></li>
                <li><button type="button" id="price-stop">Stop</button></li>
                <li><button type="button" id="price-stoplimit">Stop limit</button></li>
              </ul>
            </fieldset>
          </section>
          <section class="answer covert">
            <p>Price type:</p>
            <p class="spec"></p>
          </section>
        </section>
        <section id="stop" class="sub covert">
          <section class="question">
            <label>
              <span class="prelabel">Stop price (market price allowing the sale)</span>
              <input type="number" id="stop-input">
              <span class="postlabel"></span>
            </label>
          </section>
          <section class="answer covert">
            <p>Stop price:</p>
            <p class="spec"></p>
          </section>
        </section>
        <section id="limit" class="sub covert">
          <section class="question">
            <label>
              <span class="prelabel">Limit price (sell only for this price or better)</span>
              <input type="number" id="limit-input">
              <span class="postlabel"></span>
            </label>
          </section>
          <section class="answer covert">
            <p>Limit price:</p>
            <p class="spec"></p>
          </section>
        </section>
        <section id="expire" class="sub covert">
          <section class="question">
            <fieldset>
              <legend>Expiration type</legend>
              <p><dfn>Day</dfn>: good until end of the day</p>
              <p><dfn>GTC</dfn>: good for 60 days or until canceled earlier</p>
              <ul>
                <li><button type="button" id="expire-day">Day</button></li>
                <li><button type="button" id="expire-gtc">GTC</button></li>
              </ul>
            </fieldset>
          </section>
          <section class="answer covert">
            <p>Expiration type:</p>
            <p class="spec"></p>
          </section>
        </section>
      </section>
      <section id="review" class="top covert">
        <header>
          <h2>Confirm</h2>
        </header>
        <p><button type="button" id="review">I confirm this order</button></p>
      </section>
      </main>
  </body>

</html>
==> workshops/ex/spas/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="Accessible single-page-application workshop">
    <meta name="keywords" content="HTML,application,spa,accessibility">
    <link rel="stylesheet" href="../../style.css">
    <title>Single-Page-Application Workshop</title>
  </head>
  <body>
    <header>
      <h1>Single-Page-Application Workshop</h1>
    </header>
    <section>
      <header>
        <figure>
          <img
            src="../../gen/assets/a11y-kbd.jpg"
            alt="keyboards matter for accessibility"
            width="75%"
          >
        </figure>
        <h2>Introduction</h2>
      </header>
      <p><strong>Single-page applications</strong> (SPAs) are an increasingly common web application architecture at Utopia and elsewhere. They provide near-instantaneous response to user actions, while also decreasing communication costs compared with traditional server-client web applications. When using an SPA, the user experiences incremental updates in the view and then deals with each increment of updated content.</p>
      <p>Utopia has made a commitment to make its user interfaces (UIs) <dfn>accessible</dfn>. In other words, they must conform to the world-wide industry standards for UI inclusivity. These standards allow persons in adverse situations and persons with sensory, motor, or cognitive challenges to use UIs successfully, either directly or by means of special hardware or software (<dfn>assistive technologies</dfn>). Accessible client-facing UIs also improve the experiences of investors with a wide range of sophistications&mdash;from novice to expert.</p>
      <p>In this workshop, you will learn and practice techniques for making SPAs accessible.</p>
    </section>
    <section>
      <header>
        <h2>The situation</h2>
      </header>
      <p>Consider an interaction between Utopia and a client investor, in which the investor asks Utopia to perform a trade for the investor.</p>
      <p>This is an appropriate situation for an SPA. That&rsquo;s because, in this situation, there is a sequence of questions the investor must answer. Each answer affects what the next question should be. If you try to put the entire set of questions into a single form, to be submitted all at once, the form will be complex and much of its content will turn out to be irrelevant. This will make the form confusing to many investors, especially when they have difficulty with spatial navigation and memory. The risk of user error will increase. With an SPA, you can give the user simple views, each of which asks a single question, and never show the user irrelevant content. If the user does give an invalid answer, you can explain the error immediately, with no doubt about which answer was erroneous.</p>
      <p>Thus, managing this situation with an SPA can make your UI more accessible than it would have been with a monolithic architecture, while keeping the UI speedy, since server-client communications are minimized.</p>
    </section>
    <section>
      <header>
        <h2>Modeling the situation</h2>
      </header>
      <p>The design of a trade SPA will be based on a model of a trade. There can be various models. The model underlying this workshop splits a trade into four distinct possible components:</p>
      <ol>
        <li>Bringing money into the account</li>
        <li>Sending money out of the account</li>
        <li>Selling a security</li>
        <li>Buying a security</li>
      </ol>
      <p>Each component can be managed by a distinct SPA. Instead of asking <q>Where is the money coming from?</q> and <q>Where is the money going?</q> in the same application, we can suppose that all money coming in goes to the investor&rsquo;s settlement fund, all money going out comes from the settlement fund, all proceeds from security sales go into the settlement fund, and all money for purchases comes from the settlement fund. That permits each of the four transactions to be modeled, and managed, independently from the others.</p>
    </section>
    <section>
      <header>
        <h2>A sale SPA</h2>
      </header>
      <p>For this workshop we can take as an example the SPA for the third component, selling a security. It needs to ask the investor:</p>
      <ul>
        <li>what security to sell</li>
        <li>whether to sell all of it</li>
        <li>if not to sell all of it, how much to sell</li>
        <li>if applicable, whether to sell at the market or with a limit</li>
        <li>if applicable, what the limit price is</li>
        <li>if applicable, when the limit order expires</li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Testing SPAs for accessibility</h2>
      </header>
      <p>Testing is an essential part of development, so how do you test tables for accessibility?</p>
      <h3>Test packages</h3>
      <p>One option is to use packages of accessibility tests. They check for conformity to various accessibility standards. Some of those are related to tables. Two such packages are Axe, which implements the <a href="https://github.com/dequelabs/axe-core" target="_blank">axe-core rules</a>, and the <a href="https://wave.webaim.org/" target="_blank">WAVE Web Accessibility Evaluation Tool</a>. Axe is available for various testing frameworks, including Jest and Cypress. Both are available also as Utopia-approved extensions to Chrome, and as Firefox extensions.</p>
      <p>Try both of these packages in Chrome on the bad example of a simple table. You will find that they both report <strong>no</strong> accessibility defects! Why not?</p>
      <ul>
        <li>Accessibility test packages don&rsquo;t test for everything. There is no guarantee they will find all the defects.</li>
        <li>They don&rsquo;t complain about the missing <code>caption</code> element in the bad table. The title of the table, which could have been there, is instead in an <code>h2</code> element above the table. That worsens accessibility. For example, a user asking a screen reader for a list of the tables on the page would not get the table titles. Still, the HTML5 standard makes <code>caption</code> elements optional, not required, and the rules applied by these packages do the same.</li>
        <li>They don&rsquo;t complain about the header cells being coded as <code>td</code> cells instead of <code>th</code>. They also don&rsquo;t complain about the fact that the table contains no <code>th</code> cells at all. To report a miscoded header cell, a package would need to figure out which cells really contain headers. It would guess, based on location, alignment, font style, or other facts, and it could guess wrong. <a href="https://github.com/dequelabs/axe-core#about-axe---our-manifesto">Axe claims it will report <q>zero false positives</q></a>, namely it will never guess wrong, so it therefore doesn&rsquo;t guess.</li>
      </ul>
      <h3>Custom tests</h3>
      <p>So, packages play it safe and leave some important defects unreported. Therefore, testing your tables thoroughly for accessibility requires you to write your own accessibility tests. You can do this along with the other tests you write. You can take advantage of your project&rsquo;s practices and standards to make your tests more specific than any package could.</p>
      <p>For the simple good and bad examples above, you would want tests that the good example passes and the bad example fails.</p>
      <p>One of the Utopia testing frameworks that you can use for this purpose is Jest. It is the one used for unit testing in the CTO&rsquo;s Angular exemplar application.</p>
      <p>If you fork and clone this repository and then execute <code>npm install</code> in your local copy, you will then be able to execute <code>npm run test</code>. That will run some Jest tests designed for the good and bad example tables.</p>
      <p>The test file is <code>ex/tables/goodbad/spec.js</code>. That file looks like this:</p>
      <pre><code>
        const {JSDOM} = require('jsdom');
        const fs = require('fs');
        const path = require('path');
        
        const htmls = [
          fs.readFileSync(path.resolve(__dirname, 'good.html'), 'utf8'),
          fs.readFileSync(path.resolve(__dirname, 'bad.html'), 'utf8')
        ];
        const bodyLabels = ['good first table', 'bad first table'];
        let dom;
        let body;
        let table0;
        let table0Children;
        let table0ChildCount;
        
        [0, 1].forEach(index => {
          describe(bodyLabels[index], () => {
            beforeEach(() => {
              dom = new JSDOM(htmls[index]);
              body = dom.window.document.body;
              table0 = body.querySelector('table');
              table0Children = table0.children;
              table0ChildCount = table0.childElementCount;
            });
            it('should have a caption', () => {
              expect(table0ChildCount && table0Children[0].tagName).toBe('CAPTION');
            });
            it('caption text should be correct', () => {
              const table0Caption = table0 && table0.querySelector('caption');
              expect(
                table0Caption && table0Caption.textContent.trim()
              ).toBe('Retirement Account Types');
            });
            it('should have a thead next after the caption', () => {
              expect(table0ChildCount > 1 && table0.children[1].tagName).toBe('THEAD');
            });
            it('should have only header cells in any header rows', () => {
              expect(table0 && table0.querySelector('thead > td')).toBeFalsy();
            });
            it('should have only header cells on the left', () => {
              expect(
                table0 && table0.querySelector('tbody > tr > td:first-child')
              ).toBeFalsy();
            });
          });
        });
      </code></pre>
      <p>There are five tests (calls to the <code>it()</code> function. They test for the table having:</p>
      <ul>
        <li>its title in a <code>caption</code> element</li>
        <li>its title being correct</li>
        <li>its column headers in a <code>thead</code> element</li>
        <li>all the column headers being coded as headers</li>
        <li>all the other left-most cells being coded as row headers</li>
      </ul>
      <p>If you run the tests, the output will show:</p>
      <pre><code>
        good first table
          v should have a caption (147 ms)
          v caption text should be correct (40 ms)
          v should have a thead next after the caption (27 ms)
          v should have only header cells in any header rows (34 ms)
          v should have only header cells on the left (29 ms)
        bad first table
          × should have a caption (32 ms)
          × caption text should be correct (25 ms)
          × should have a thead next after the caption (28 ms)
          v should have only header cells in any header rows (19 ms)
          × should have only header cells on the left (22 ms)
      </code></pre>
      <p>The good example passes all the tests. The bad example passes the fourth test <q>vacuously</q>, because it doesn&rsquo;t have any <code>thead</code> element and therefore has no <code>td</code> elements inside a <code>thead</code> element. Otherwise, though, the bad example fails all the tests.</p>
      <p>These are tests for <strong>formal</strong> accessibility. Testing for <strong>practical</strong> accessibility is more complex. Some testing for practical accessibility can be automated; a test can simulate a user and report defective interactions. But such testing is still primitive. Most practical-accessibility testing is labor-intensive, non-automated work. For example, the tester turns on a screen reader and navigates with a keyboard to and within your table, listening to what the screen reader announces.</p>
      <p>Because of the time and expense of testing for practical accessibility, it is efficient for you to test your tables thoroughly for formal accessibility as part of your normal testing discipline. After they pass your automated tests, then they are ready for non-automated tests of practical accessibility.</p>
    </section>
  </body>
</html>

==> workshops/ex/spas/piertopier/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Pier to Pier | Utopia</title>
    <link rel="stylesheet" href="style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Pier to Pier</h1>
        <p class="subtitle">Cross-campus ride matching</p>
      </header>
      <section id="home" class="view overt">
        <p><button class="planRequest" type="button">Plan a trip</button></p>
        <p><button class="tripsRequest" type="button">Your trips</button></p>
      </section>
      <section id="plan" class="view covert">
        <header>
          <h2>Plan a trip</h2>
        </header>
        <form id="planForm">
          <div class="flex">
            <p>
              <label>
                From:
                <select class="pierList" id="planFrom" size="10" required>
                </select>
              </label>
            </p>
            <p>
              <label>
                To:
                <select class="pierList" id="planTo" size="10" required>
                </select>
              </label>
            </p>
            <p>
              <label>
                Date:
                <input id="planDate" type="date" required>
              </label>
            </p>
            <p>
              <label>
                Departure time:
                <input id="planTime" type="time" required>
              </label>
            </p>
            <fieldset id="planRole" class="radioGroup">
              <legend>You:</legend>
              <p>
                <label>
                  <input name="planRole" type="radio" value="drive" required>
                  will be driving
                </label>
                <br>
                <label>
                  <input name="planRole" type="radio" value="ride">
                  want a ride
                </label>
              </p>
            </fieldset>
            <p>
              <label>
                Your UID:
                <input
                        id="planUID"
                        type="text"
                        size="4"
                        maxlength="4"
                        value="u"
                        pattern="^[uU][A-Za-z0-9]{3}$"
                >
              </label>
            </p>
          </div>
          <p><button id="planSubmit" type="submit">Submit</button></p>
        </form>
      </section>
      <section id="planAck" class="view covert">
        <header>
          <h2>You have planned a trip</h2>
        </header>
        <p><button class="planRequest" type="button">Plan another trip</button></p>
        <p><button class="tripsRequest" type="button">Your trips</button></p>
      </section>
      <section id="trips" class="view covert">
        <header>
          <h2>Your trips</h2>
        </header>
        <form>
          <p>
            <label>
              Your UID:
              <input
                      id="tripsUID"
                      name="uid"
                      type="text"
                      size="4"
                      maxlength="4"
                      value="u"
                      pattern="^[uU][A-Za-z0-9]{3}$"
              >
            </label>
          </p>
          <p><button id="tripsUIDSubmit" type="submit">Submit</button></p>
          <p><button class="planRequest" type="button">Plan a trip</button></p>
        </form>
        <section id="tripLists">
        </section>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/spas/piertopier/old/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Pier to Pier | Utopia</title>
    <link rel="stylesheet" href="style.css">
    <script src="trips.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Pier to Pier</h1>
        <p class="subtitle">Cross-campus ride matching</p>
      </header>
      <section class="routelinks">
        <p><a href="plan.html">Plan a trip</a></p>
        <p><a href="trips.html">Your trips</a></p>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/spas/piertopier/plan.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Plan a trip | Pier to Pier | Utopia</title>
    <link rel="stylesheet" href="style.css">
    <script src="piers.js"></script>
    <script src="plan.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Plan a Pier-to-Pier trip</h1>
      </header>
      <form id="planForm">
        <p>
          <label>
            From:
            <select class="pier-list" name="from" size="10" required>
            </select>
          </label>
        </p>
        <p>
          <label>
            To:
            <select class="pier-list" name="to" size="10" required>
            </select>
          </label>
        </p>
        <p>
          <label>
            Date:
            <input id="date" name="date" type="date" required>
          </label>
        </p>
        <p>
          <label>
            Departure time:
            <input id="time" name="time" type="time" required>
          </label>
        </p>
        <fieldset>
          <legend>You:</legend>
          <p>
            <label>
              <input name="role" type="radio" value="drive" required>
              will be driving
            </label>
            <br>
            <label>
              <input name="role" type="radio" value="ride">
              want a ride
            </label>
          </p>
        </fieldset>
        <p>
          <label>
            Your UID:
            <input
              id="uid"
              name="uid"
              type="text"
              size="4"
              maxlength="4"
              value="u"
              pattern="^[uU][A-Za-z0-9]{3}$"
            >
          </label>
        </p>
        <p>
          <button type="submit">Submit</button>
        </p>
      </form>
      <section class="routelinks">
        <p><a href="trips.html">Your trips</a></p>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/spas/piertopier/trips.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Your trips | Pier to Pier | Utopia</title>
    <link rel="stylesheet" href="style.css">
    <script src="piers.js"></script>
    <script src="trips.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Your Pier-to-Pier trips</h1>
      </header>
      <section id="trips">
      </section>
      <section class="routelinks">
        <p><a href="plan.html">Plan a trip</a></p>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/tables/alt/dl.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML heading stack with description lists">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML heading stack with description lists</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML heading stack with description lists</h1>
      </header>
      <h2>Securities of Corporation XYZ</h2>
      <h3>Stock</h3>
      <h4>Common</h4>
      <h5>Class A</h5>
      <dl>
        <dt>Price</dt>
        <dd>$34.69</dd>
        <dt>Votes</dt>
        <dd>10</dd>
      </dl>
      <h5>Class B</h5>
      <dl>
        <dt>Price</dt>
        <dd>$20.33</dd>
        <dt>Votes</dt>
        <dd>1</dd>
      </dl>
      <h4>Preferred</h4>
      <dl>
        <dt>Price</dt>
        <dd>$15.48</dd>
        <dt>Votes</dt>
        <dd>0</dd>
      </dl>
      <h3>Bonds</h3>
      <h4>4.5% due 2031-06-30</h4>
      <dl>
        <dt>Price</dt>
        <dd>$106.40</dd>
        <dt>Votes</dt>
        <dd>0</dd>
      </dl>
    </main>
  </body>

</html>

==> workshops/ex/tables/alt/p.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML heading stack with plain-text listing">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML heading stack with plain-text listing</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML heading stack with plain-text listing</h1>
      </header>
      <section class="textlist">
        <h2>Securities of Corporation XYZ</h2>
        <h3>Stock</h3>
        <h4>Common</h4>
        <h5>Class A</h5>
        <p>Price: $34.69</p>
        <p>Votes: 10</p>
        <h5>Class B</h5>
        <p>Price: $20.33</p>
        <p>Votes: 1</p>
        <h4>Preferred</h4>
        <p>Price: $15.48</p>
        <p>Votes: 0</p>
        <h3>Bonds</h3>
        <h4>4.5% due 2031-06-30</h4>
        <p>Price: $106.40</p>
        <p>Votes: 0</p>
      </section>
    </main>
  </body>

</html>

==> workshops/ex/tables/colgroup/index.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML table with column group">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML table with grouped columns</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML table with grouped columns</h1>
      </header>
      <table>
        <caption>Retirement Account Types</caption>
        <thead>
          <tr>
            <th rowspan="2" scope="row">Type</th>
            <th colspan="2">IRA</th>
            <th rowspan="2">Taxable</th>
          </tr>
          <tr>
            <th>Traditional</th>
            <th>Roth</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th>Contributions deductible</th>
            <td>Possibly</td>
            <td>No</td>
            <td>No</td>
          </tr>
          <tr>
            <th>Withdrawal tax rate</th>
            <td>Ordinary income</td>
            <td>None</td>
            <td>Variable on earnings</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>

==> workshops/ex/tables/goodbad/bad.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="https://jpdev.pro">
    <meta name="creator" content="Jonathan Pool">
    <meta name="publisher" content="Business Platforms and Services; Accessibility Office">
    <meta name="description" content="simple HTML table">
    <meta name="keywords" content="HTML,table">
    <title>(Bad) Simple HTML table</title>
    <link type="text/css" rel="stylesheet" href="../style.css">
    <link type="text/css" rel="stylesheet" href="stylebad.css">
  </head>

  <body>
    <main>
      <header>
        <h1>(Bad) Simple HTML table</h1>
      </header>
      <section>
        <h2>Retirement Account Types</h2>
        <table>
          <tbody>
            <tr class="head">
              <td>Type</td>
              <td>Contributions deductible</td>
              <td>Withdrawal tax rate</td>
            </tr>
            <tr>
              <td>Traditional IRA</td>
              <td>Possibly</td>
              <td>Ordinary income</td>
            </tr>
            <tr>
              <td>Roth IRA</td>
              <td>No</td>
              <td>None</td>
            </tr>
            <tr>
              <td>Taxable</td>
              <td>No</td>
              <td>Variable on earnings</td>
            </tr>
          </tbody>
        </table>
        </section>
    </main>
  </body>

</html>
==> workshops/ex/tables/goodbad/good.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="https://jpdev.pro">
    <meta name="creator" content="Jonathan Pool">
    <meta name="publisher" content="Business Platforms and Services; Accessibility Office">
    <meta name="description" content="simple HTML table">
    <meta name="keywords" content="HTML,table">
    <title>(Good) Simple HTML table</title>
    <link type="text/css" rel="stylesheet" href="../style.css">
  </head>

  <body>
    <main>
      <header>
        <h1>(Good) Simple HTML table</h1>
      </header>
      <table>
        <caption>Retirement Account Types</caption>
        <thead>
          <tr>
            <th>Type</th>
            <th>Contributions deductible</th>
            <th>Withdrawal tax rate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th>Traditional IRA</th>
            <td>Possibly</td>
            <td>Ordinary income</td>
          </tr>
          <tr>
            <th>Roth IRA</th>
            <td>No</td>
            <td>None</td>
          </tr>
          <tr>
            <th>Taxable</th>
            <td>No</td>
            <td>Variable on earnings</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>
==> workshops/ex/tables/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="Accessible table workshop">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../../style.css">
    <title>Table Workshop</title>
  </head>
  <body>
    <header>
      <h1>Table Workshop</h1>
    </header>
    <section>
      <header>
        <figure>
          <img
            src="../../gen/assets/a11y-kbd.jpg"
            alt="keyboards matter for accessibility"
            width="75%"
          >
        </figure>
        <h2>Introduction</h2>
      </header>
      <p><strong>Tables</strong> are a pervasive feature of Utopia user interfaces. Utopia websites provide extensive financial data to clients, sometimes with graphs and sometimes with tables. For clients who can&rsquo;t see or have trouble understanding graphs, tables are the usual alternative. So Utopia wants to implement tables to serve diverse users, including users who need to listen to tables, rather than look at them.</p>
      <p>Utopia tables sometimes contain hundreds of rows, more columns than can fit on a common display, and groups and subgroups of rows and columns. Users increasingly access Utopia websites from mobile devices with narrow displays. So making tables accessible is not a trivial task.</p>
      <p>There are solutions to this problem. In this workshop we&rsquo;ll practice making tables both <dfn>formally accessible</dfn> (they are coded per industry standards) and <dfn>practically accessible</dfn> (users can work successfully with them). Those are often the same thing, but not for tables. You are about to see why.</p>
    </section>
    <section>
      <header>
        <h2>A simple good/bad example</h2>
      </header>
      <p><a href="goodbad/good.html" target="_blank">Good example</a>.</p>
      <p><a href="goodbad/bad.html" target="_blank">Bad example</a>.</p>
      <p>These two tables look the same, but they are different. First, compare how one screen reader handles these examples:</p>
      <ul>
        <li><a href="goodbad/good-nvda.mp4" target="_blank">good with NVDA in Chrome on Windows</a></li>
        <li><a href="goodbad/bad-nvda.mp4" target="_blank">bad with NVDA in Chrome on Windows</a></li>
      </ul>
      <p>The reason for the differences is that the tables are coded differently. Inspect the code of each example.</p>
      <p>A properly coded simple table is handled better by screen readers. However, not all screen readers properly handle even simple tables. Can you identify errors in these recordings?:</p>
      <ul>
        <li><a href="goodbad/good-vosafosx.mp4" target="_blank">good with VoiceOver in Safari on OS X</a></li>
        <li><a href="goodbad/good-vosafios.mp4" target="_blank">good with VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Column groups</h2>
      </header>
      <p><a href="colgroup/index.html" target="_blank">Formally accessible example</a>.</p>
      <p>Inspect the code of this table. Note that the &ldquo;Type&rdquo; header is marked as a row header. The reason is that, by default, it would be a column header, but in this case it applies to the top rows, not the left column.</p>
      <p>Column groups are handled properly by some screen readers, but not by all. Can you identify errors in these recordings?:</p>
      <ul>
        <li><a href="colgroup/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="colgroup/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Row groups</h2>
      </header>
      <p><a href="rowgroup/index.html" target="_blank">Formally accessible example</a>.</p>
      <p>Row groups are handled properly by some screen readers, but not by all. Listen for errors in these recordings. Some errors are serious.</p>
      <ul>
        <li><a href="rowgroup/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="rowgroup/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="rowgroup/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Stacked row groups</h2>
      </header>
      <p>Utopia tables often contain row groups. Usually they are stacked. A header of a row group, such as &ldquo;IRA&rdquo; in the previous example, is placed <strong>above</strong> the rows in the group, instead of on their left.</p>
      <p>Here are two examples of tables with stacked row groups:</p>
      <ul>
        <li><a href="stack/stackid.html" target="_blank">Example of table with <code>headers</code> attributes</a>.</li>
        <li><a href="stack/stackscope.html" target="_blank">Example of table with <code>scope</code> attributes</a>.</li>
      </ul>
      <p>In these examples, the styles show that &ldquo;IRA&rdquo; is a header for the next two rows, not the next three rows. But assistive technologies generally disregard styles. To them, these tables &ldquo;look&rdquo; like <a href="stack/stacknostyle.html" target="_blank">this</a>.</p>
      <p>Therefore, formal accessibility requires you to specify which rows each row-group header belongs to.</p>
      <p>There are two methods for specifying what row-group headers are headers of:<code>headers</code> attributes and <code>scope</code> attributes. Inspect the code of the two examples above to see how these methods work.</p>
      <p>The <code>headers</code> method is straightforward: You specify, for each cell, which other cells are its headers.</p>
      <p>The <code>scope</code> method is somewhat more complex. You attach a <code>scope="rowgroup"</code> attribute to a row-group header. Then, in order to specify the boundaries of its row group, you enclose the rows of that group, including the row-group header&rsquo;s row, in a <code>tbody</code> element. That makes that header a header of every cell below it and every cell to its right, throughout the rows in that <code>tbody</code> element.</p>
      <p>As the tables become more complex, the behavior of screen readers becomes more erroneous. Stacked row groups are <strong>not</strong> handled properly by most or all of the most common screen readers. This is true for <strong>both</strong> methods. Try to identify the errors in these recordings:</p>
      <h3>Tables using the <code>headers</code> method</h3>
      <ul>
        <li><a href="stack/headers/nvdachromewin.mp4" target="_blank">NVDA in Chrome on Windows</a></li>
        <li><a href="stack/headers/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="stack/headers/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="stack/headers/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <h3>Tables using the <code>scope</code> method</h3>
      <ul>
        <li><a href="stack/scope/nvdachromewin.mp4" target="_blank">NVDA in Chrome on Windows</a></li>
        <li><a href="stack/scope/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="stack/scope/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="stack/scope/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Substacked row groups</h2>
      </header>
      <p>Utopia tables can be much more complex that what you have seen so far. For example, they often stack rows in groups <strong>and subgroups</strong>. One class of tables doing this is <a href="https://investor.utopia.com/mutual-funds/list#/mutual-funds/asset-class/month-end-returns" target="_blank">tables of funds</a>.</p>
      <p>An investor using a screen reader (JAWS in Chrome on Windows) to navigate inside this table could <a href="substack/jawschromewin-funds.mp4" target="_blank">hear cell contents without any headings</a> at all, and therefore find it nearly impossible to understand the information in those cells.</p>
      <p>Can tables with stacked subgroups be made accessible? There are two answers:</p>
      <ul>
        <li>They can be made <strong>formally</strong> accessible. This requires using the <code>headers</code> method. The <code>scope</code> method cannot be used, because it would require <code>tbody</code> elements inside <code>tbody</code> elements, and the HTML5 specification prohibits that.</li>
        <li>It is questionable whether they can be made <strong>practically</strong> accessible. You have seen that screen readers sometimes fail to support the <code>headers</code> method properly.</li>
      </ul>
      <p>Consider this <a href="substack/index.html" target="_blank">simplified example of a formally accessible table with stacked subgroups</a>. Inspect its code to see that <code>headers</code> attributes are used to identify the group and subgroup headers of the cells on the &ldquo;Class A&rdquo; and &ldquo;Class B&rdquo; rows.</p>
      <p>Here are a couple of recordings of screen readers navigating this table. Identify the serious errors in them.</p>
      <ul>
        <li><a href="substack/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="substack/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Solutions for practical accessibility</h2>
      </header>
      <p>If you are implementing tables in a project that aims for formal accessibility, you can succeed, using the methods illustrated above.</p>
      <p>However, if your project is more ambitious and aims for practical accessibility, what can you do?</p>
      <p>You can craft solutions by recognizing two basic facts:</p>
      <ul>
        <li>User technologies (operating systems, browsers, screen readers, etc.) give excellent support to some web standards and poor or no support to others. Tables are especially difficult for assistive technologies to support, because browsers don&rsquo;t communicate the important facts about tables to them. Support for simple tables is not perfect, but is better than support for complex tables.</li>
        <li>Users vary in how they prefer or need to consume financial data. Tables are intuitive for some users but overwhelming and confusing for others. Some users hate graphs and want tables. Other users hate tables and want graphs. And some users can&rsquo;t make use of either graphs or tables and want something else.</li>
      </ul>
      <p>From these facts comes a solution strategy:</p>
      <ul>
        <li>Make tables formally accessible.</li>
        <li>Make complex tables simpler.</li>
        <li>Give users non-tabular options.</li>
      </ul>
      <p>We must accept the reality that the practical accessibility of tables is limited. By making your tables formally accessible, you take a stand for web standards and increase the incentive to makers of user technologies to support those standards. When that support improves, your formally accessible tables will become practically more accessible, too. Meanwhile, making tables simpler and offering non-tabular options can improve user experiences immediately.</p>
      <h3>Table simplification</h3>
      <p>You have seen that simple tables come closer to practical accessibility than complex tables do. That inspires an additional measure that a project can consider: breaking complex tables up, or flattening complex tables, into simple tables. For example, in the above table, common stocks could be a table of their own. Alternatively, security types could be flattened into a single group, with members such as &ldquo;Class A Common Stock&rdquo;.</p>
      <h3>Non-tabular alternatives</h3>
      <p>But even simple tables can be handled wrongly by assistive technologies. So, what options can you offer, <strong>in addition</strong> to tables? HTML5 includes two structures that can produce natural analogs to tables:</p>
      <ul>
        <li>description lists</li>
        <li>headings</li>
      </ul>
      <h4>Description lists</h4>
      <p>Description lists are a structure for presenting attributes and values. Each row of a table can become one description list. Headings can introduce them. Description lists fit easily onto a narrow screen. A <a href="alt/dl.html" target="_blank">description-list version of the previous table</a> exemplifies this. Inspect the code to see how this structure is applied.</p>
      <p>Description lists have been in the HTML standard since 1993, so creators of screen readers have had plenty of time to support that structure. Amazingly, however, not all do. Note the errors in these recordings:</p>
      <ul>
        <li><a href="alt/vosafosx-dl.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="alt/vosafios-dl.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <p>So, why even mention description lists here? Because they are a reasonable table alternative, so you should know how poorly supported they are before you decide whether to use them.</p>
      <h4>Headings and paragraphs</h4>
      <p>Instead of (or in addition to) description lists, you can achieve practical accessibility with plain-text paragraphs describing the attributes and values, embedded in the same heading structure. A <a href="alt/p.html" target="_blank">revised example</a> removes the <code>dl</code>, <code>dt</code>, and <code>dd</code> elements, replacing them with <code>p</code> elements. Now screen readers have no trouble parsing and announcing the content:</p>
      <ul>
        <li><a href="alt/vosafosx-p.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="alt/vosafios-p.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <p>Developers are sometimes tempted to make such alternative formats available only to users of assistive technologies. But they are useful for others, too. They can benefit any user of a small display such as a mobile telephone. They can also benefit <a href="https://www.maltron.com/store/p24/Maltron_Head%2FMouth_Stick_Keyboard_-_US_English.html" target="_blank">users who cannot use a mouse</a>, and users who have trouble understanding tables. Accessibility experts recommend generally making alternatives available to everybody.</p>
    </section>
    <section>
      <header>
        <h2>Testing tables for accessibility</h2>
      </header>
      <p>Testing is an essential part of development, so how do you test tables for accessibility?</p>
      <h3>Test packages</h3>
      <p>One option is to use packages of accessibility tests. They check for conformity to various accessibility standards. Some of those are related to tables. Two such packages are Axe, which implements the <a href="https://github.com/dequelabs/axe-core" target="_blank">axe-core rules</a>, and the <a href="https://wave.webaim.org/" target="_blank">WAVE Web Accessibility Evaluation Tool</a>. Axe is available for various testing frameworks, including Jest and Cypress. Both are available also as Utopia-approved extensions to Chrome, and as Firefox extensions.</p>
      <p>Try both of these packages in Chrome on the bad example of a simple table. You will find that Axe reports <strong>no</strong> accessibility issues, and WAVE reports only one <q>alert</q> but no <q>errors</q>. Why?</p>
      <ul>
        <li>Accessibility test packages don&rsquo;t test for everything. There is no guarantee they will find all the defects.</li>
        <li>They don&rsquo;t complain about the missing <code>caption</code> element in the bad table. The title of the table, which could have been there, is instead in an <code>h2</code> element above the table. That worsens accessibility. For example, a user asking a screen reader for a list of the tables on the page would not get the table titles. Still, the HTML5 standard makes <code>caption</code> elements optional, not required, and the rules applied by these packages do the same.</li>
        <li>They don&rsquo;t complain about the header cells being coded as <code>td</code> cells instead of <code>th</code>. To report a miscoded header cell, a package would need to figure out which cells really contain headers. It would guess, based on location, alignment, font style, or other facts, and it could guess wrong. <a href="https://github.com/dequelabs/axe-core#about-axe---our-manifesto">Axe claims it will report <q>zero false positives</q></a>, namely it will never guess wrong, so it therefore doesn&rsquo;t guess.</li>
        <li>There are no <code>th</code> cells in the table. That is a basis for suspicion, and WAVE does display an alert. But WAVE guesses that it isn&rsquo;t really a table. That guess is incorrect; the real defect is that the table has miscoded header cells.</li>
      </ul>
      <p>So, packages play it safe, leave some important defects unreported, and, when they guess, don&rsquo;t always guess right.</p>
      <h3>Custom tests</h3>
      <p>Testing your tables thoroughly for accessibility requires you to write your own accessibility tests, rather than relying only on test packages. You can do this along with the other tests you write. You can take advantage of your project&rsquo;s practices and standards to make your tests more specific than any package could.</p>
      <p>For the simple good and bad examples above, you would want tests that the good example passes and the bad example fails.</p>
      <p>One of the Utopia testing frameworks that you can use for this purpose is Jest. It is the one used for unit testing in the CTO&rsquo;s Angular exemplar application.</p>
      <p>If you fork and clone this repository and then execute <code>npm install</code> in your local copy, you will then be able to execute <code>npm run test</code>. That will run some Jest tests designed for the good and bad example tables.</p>
      <p>The test file is <code>ex/tables/goodbad/spec.js</code>. That file looks like this:</p>
      <pre><code>
        const {JSDOM} = require('jsdom');
        const fs = require('fs');
        const path = require('path');
        
        const htmls = [
          fs.readFileSync(path.resolve(__dirname, 'good.html'), 'utf8'),
          fs.readFileSync(path.resolve(__dirname, 'bad.html'), 'utf8')
        ];
        const bodyLabels = ['good first table', 'bad first table'];
        let dom;
        let body;
        let table0;
        let table0Children;
        let table0ChildCount;
        
        [0, 1].forEach(index => {
          describe(bodyLabels[index], () => {
            beforeEach(() => {
              dom = new JSDOM(htmls[index]);
              body = dom.window.document.body;
              table0 = body.querySelector('table');
              table0Children = table0.children;
              table0ChildCount = table0.childElementCount;
            });
            it('should have a caption', () => {
              expect(table0ChildCount && table0Children[0].tagName).toBe('CAPTION');
            });
            it('caption text should be correct', () => {
              const table0Caption = table0 && table0.querySelector('caption');
              expect(
                table0Caption && table0Caption.textContent.trim()
              ).toBe('Retirement Account Types');
            });
            it('should have a thead next after the caption', () => {
              expect(table0ChildCount > 1 && table0.children[1].tagName).toBe('THEAD');
            });
            it('should have only header cells in any header rows', () => {
              expect(table0 && table0.querySelector('thead > td')).toBeFalsy();
            });
            it('should have only header cells on the left', () => {
              expect(
                table0 && table0.querySelector('tbody > tr > td:first-child')
              ).toBeFalsy();
            });
          });
        });
      </code></pre>
      <p>There are five tests (calls to the <code>it()</code> function). They test for the table having:</p>
      <ul>
        <li>its title in a <code>caption</code> element</li>
        <li>its title being correct</li>
        <li>its column headers in a <code>thead</code> element</li>
        <li>all the column headers being coded as headers</li>
        <li>all the other left-most cells being coded as row headers</li>
      </ul>
      <p>If you run the tests, the output will show:</p>
      <pre><code>
        good first table
          v should have a caption (147 ms)
          v caption text should be correct (40 ms)
          v should have a thead next after the caption (27 ms)
          v should have only header cells in any header rows (34 ms)
          v should have only header cells on the left (29 ms)
        bad first table
          × should have a caption (32 ms)
          × caption text should be correct (25 ms)
          × should have a thead next after the caption (28 ms)
          v should have only header cells in any header rows (19 ms)
          × should have only header cells on the left (22 ms)
      </code></pre>
      <p>The good example passes all the tests. The bad example passes the fourth test <q>vacuously</q>, because it doesn&rsquo;t have any <code>thead</code> element and therefore has no <code>td</code> elements inside a <code>thead</code> element. Otherwise, though, the bad example fails all the tests.</p>
      <p>These are tests for <strong>formal</strong> accessibility. Testing for <strong>practical</strong> accessibility is more complex. Some testing for practical accessibility can be automated; a test can simulate a user and report defective interactions. But such testing is still primitive. Most practical-accessibility testing is labor-intensive, non-automated work. For example, the tester turns on a screen reader and navigates with a keyboard to and within your table, listening to what the screen reader announces.</p>
      <p>Because of the time and expense of testing for practical accessibility, it is efficient to test your tables thoroughly for formal accessibility as part of your normal testing discipline. After they pass your automated tests, then they are ready for non-automated tests of practical accessibility.</p>
    </section>
  </body>
</html>

==> workshops/ex/tables/obsolete/bad/complex.html <==
<!DOCTYPE html>
<html
  lang="en-US">
<head>
  <meta
    charset="UTF-8">
  <title>(Bad) Bond Fund Comparison</title>
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1">
  <meta
    name="author"
    content="Jonathan Pool">
  <meta
    name="description"
    content="Accessible table example: part of a set of training modules on creating accessible user interfaces at Utopia">
  <meta
    name="keywords"
    content="Utopia,software development,accessibility,a11y,user interface">
  <meta
    name="creator"
    content="Internal Shared Services and Accessibility Office, The Utopia Group">
  <meta
    name="publisher"
    content="Accessibility Office, The Utopia Group">
  <link
    rel="stylesheet"
    href="../style.css">
    <link
    rel="stylesheet"
    href="style-complex.css">
    <link
    rel="stylesheet"
    href="../style-complex.css">
  <link
    rel="author"
    href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
</head>
<body
  itemscope
  itemtype="https://schema.org/WebPage">
  <header>
    <h1>(Bad) Bond Fund Comparison</h1>
  </header>
  <main>
    <table class="complex">
      <caption>Utopia Active Bond Funds</caption>
      <thead>
        <tr>
          <th rowspan="2">Name</th>
          <th colspan="2">Investor Shares</th>
          <th colspan="2">Admiral™ Shares</th>
        </tr>
        <tr>
          <th>Ticker symbol</th>
          <th>Expense ratio (%)</th>
          <th>Ticker symbol</th>
          <th>Expense ratio (%)</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th colspan="5" class="tbodyhead">
            Utopia active taxable bond funds
          </th>
        </tr>
        <tr>
          <th colspan="5">
            Treasury/agency
          </th>
        </tr>
        <tr>
          <th>GNMA</th>
          <td>VFIIX</td>
          <td>0.21</td>
          <td>VFIJX</td>
          <td>0.11</td>
        </tr>
        <tr>
          <th>Inflation-Protected Securities</th>
          <td>VIPSX</td>
          <td>0.20</td>
          <td>VAIPX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th>Intermediate-Term Treasury</th>
          <td>VFITX</td>
          <td>0.20</td>
          <td>VFIUX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th>Long-Term Treasury</th>
          <td>VUSTX</td>
          <td>0.20</td>
          <td>VUSUX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th>Short-Term Federal</th>
          <td>VSGBX</td>
          <td>0.20</td>
          <td>VSGDX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th>Short-Term Treasury</th>
          <td>VFISX</td>
          <td>0.20</td>
          <td>VFIRX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th colspan="5">
            Investment-grade corporate
          </th>
        </tr>
        <tr>
          <th>Core Bond</th>
          <td>VCORX</td>
          <td>0.25</td>
          <td>VCOBX</td>
          <td>0.15</td>
        </tr>
        <tr>
          <th>
            Intermediate-Term Investment-Grade
          </th>
          <td>VFICX</td>
          <td>0.20</td>
          <td>VFIDX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th>Long-Term Investment-Grade</th>
          <td>VWESX</td>
          <td>0.22</td>
          <td>VWETX</td>
          <td>0.12</td>
        </tr>
        <tr>
          <th>Short-Term Investment-Grade</th>
          <td>VFSTX</td>
          <td>0.20</td>
          <td>VFSUX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th>Ultra-Short-Term Bond</th>
          <td>VUBFX</td>
          <td>0.20</td>
          <td>VUSFX</td>
          <td>0.10</td>
        </tr>
        <tr>
          <th colspan="5">
            Below-investment-grade
          </th>
        </tr>
        <tr>
          <th>High-Yield Corporate</th>
          <td>VWEHX</td>
          <td>0.23</td>
          <td>VWEAX</td>
          <td>0.13</td>
        </tr>
        <tr>
          <th colspan="5">
            Global/international
          </th>
        </tr>
        <tr>
          <th>Emerging Markets Bond</th>
          <td>VEMBX</td>
          <td>0.60</td>
          <td>VEGBX</td>
          <td>0.45</td>
        </tr>
        <tr>
          <th>Global Credit Bond</th>
          <td>VGCIX</td>
          <td>0.35</td>
          <td>VGCAX</td>
          <td>0.25</td>
        </tr>
      </tbody>
      <tbody>
        <tr>
          <th colspan="5" class="tbodyhead">
            Utopia active municipal bond funds
          </th>
        </tr>
        <tr>
          <th colspan="5">
            National municipal
          </th>
        </tr>
        <tr>
          <th>Short-Term Tax-Exempt</th>
          <td>VWSTX</td>
          <td>0.19</td>
          <td>VWSUX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>Limited-Term Tax-Exempt</th>
          <td>VMLTX</td>
          <td>0.19</td>
          <td>VMLUX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>Intermediate-Term Tax-Exempt</th>
          <td>VWITX</td>
          <td>0.19</td>
          <td>VWIUX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>Long-Term Tax-Exempt</th>
          <td>VWLTX</td>
          <td>0.19</td>
          <td>VWLUX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>High-Yield Tax-Exempt</th>
          <td>VWAHX</td>
          <td>0.19</td>
          <td>VWALX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th colspan="5">
            State municipal
          </th>
        </tr>
        <tr>
          <th>
            California Intermediate-Term Tax-Exempt
          </th>
          <td>VCAIX</td>
          <td>0.19</td>
          <td>VCADX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>California Long-Term Tax-Exempt</th>
          <td>VCITX</td>
          <td>0.19</td>
          <td>VCLAX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>Massachusetts Tax-Exempt</th>
          <td>VMATX</td>
          <td>0.15</td>
          <td>—</td>
          <td>—</td>
        </tr>
        <tr>
          <th>New Jersey Long-Term Tax-Exempt</th>
          <td>VNJTX</td>
          <td>0.19</td>
          <td>VNJUX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>New York Long-Term Tax-Exempt</th>
          <td>VNYTX</td>
          <td>0.19</td>
          <td>VNYUX</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>Ohio Long-Term Tax-Exempt</th>
          <td>VOHIX</td>
          <td>0.15</td>
          <td>—</td>
          <td>—</td>
        </tr>
        <tr>
          <th>
            Pennsylvania Long-Term Tax-Exempt
          </th>
          <td>VPAIX</td>
          <td>0.19</td>
          <td>VPALX</td>
          <td>0.09</td>
        </tr>
      </tbody>
    </table>
  </main>
</body>
</html>

==> workshops/ex/tables/obsolete/bad/header.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>(Header) Mutual Fund Comparison</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <meta name="description" content="Accessible table example: part of a set of training modules on creating accessible user interfaces at Utopia">
    <meta name="keywords" content="Utopia,software development,accessibility,a11y,user interface">
    <meta name="creator" content="Internal Shared Services and Accessibility Office, The Utopia Group">
    <meta name="publisher" content="Accessibility Office, The Utopia Group">
    <link rel="stylesheet" href="../style.css">
    <link rel="stylesheet" href="style-header.css">
    <link rel="stylesheet" href="../style-header.css">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <header>
      <h1>(Header) Mutual Fund Comparison</h1>
    </header>
    <main>
      <section>
        <table>
          <caption>Balanced Global Mutual Funds</caption>
          <thead>
            <tr>
              <td><abbr title="ticker symbol: an abbreviation assigned to a security for trading purposes. A security&rsquo;s ticker symbol is often used in newspapers and price-quotation services. Also called a trading symbol or stock symbol.">Tkr Sym</abbr></td>
              <td>Name</td>
              <td><abbr title="expense ratio: what it costs a mutual fund company to run a fund. The expense ratio is calculated annually and includes management fees, administrative fees, and any marketing and distribution fees. It doesn't include loads or purchase or redemption fees, if any."><a href="https://investor.utopia.com/expense-ratio/">Exp Ratio</a></abbr></td>
              <td><abbr title="a yield for non-money market funds that's based on a formula mandated by the Securities and Exchange Commission. It approximates the yield an investor would receive in a year by assuming that bonds in the portfolio are held to maturity, all income reinvested, and all fees and expenses factored in.">SEC Yield</abbr></td>
              <td>Price</td>
              <td><abbr title="change: the difference in a security&rsquo;s price from one period to another. During trading hours, &ldquo;change&rdquo; refers to the difference in price since the beginning of the day; after trading hours, it compares the closing price to the previous day&rsquo;s close.">Chg$</abbr></td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>VGYAX</td>
              <td><abbr title="Utopia Global Wellesley Income Fund Admiral Shares">Global Wellesley Inc Adm</abbr></td>
              <td>0.33%</td>
              <td>0.00%</td>
              <td>$24.19</td>
              <td>$0.02</td>
            </tr>
            <tr>
              <td>VGWIX</td>
              <td><abbr title="Utopia Global Wellesley Income Fund Investor Shares">Global Wellesley Inc Inv</abbr></td>
              <td>0.43%</td>
              <td>0.00%</td>
              <td>$19.35</td>
              <td>$0.02</td>
            </tr>
            <tr>
              <td>VGWAX</td>
              <td><abbr title="Utopia Global Wellington Fund Admiral Shares">Global Wellington Admiral</abbr></td>
              <td>0.36%</td>
              <td>0.00%</td>
              <td>$25.37</td>
              <td>&minus;$0.04</td>
            </tr>
            <tr>
              <td>VGWLX</td>
              <td><abbr title="Utopia Global Wellington Fund Investor Shares">Global Wellington Invest</abbr></td>
              <td>0.46%</td>
              <td>0.00%</td>
              <td>$20.29</td>
              <td>&minus;$0.03</td>
            </tr>
          </tbody>
          <tfoot>
            <tr class="agg">
              <td colspan="2">Average</td>
              <td>0.40%</td>
              <td>0.00%</td>
              <td>$22.30</td>
              <td>&minus;$0.01</td>
            </tr>
            <tr class="note">
              <td colspan="6">
                Last updated <time datetime="2019-03-05T13:30:00-05:00">5 March 2019, 1:30 p.m. <abbr title="Eastern Standard Time">EST</abbr></time>
              </td>
            </tr>
          </tfoot>
        </table>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/tables/obsolete/bad/title.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>(Title) Mutual Fund Comparison</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <meta name="description" content="Accessible table example: part of a set of training modules on creating accessible user interfaces at Utopia">
    <meta name="keywords" content="Utopia,software development,accessibility,a11y,user interface">
    <meta name="creator" content="Internal Shared Services and Accessibility Office, The Utopia Group">
    <meta name="publisher" content="Accessibility Office, The Utopia Group">
    <link rel="stylesheet" href="../style.css">
    <link rel="stylesheet" href="../style-header.css">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <header>
      <h1>(Title) Mutual Fund Comparison</h1>
    </header>
    <main>
      <section>
        <h2>Balanced Global Mutual Funds</h2>
        <table>
          <thead>
            <tr>
              <th><abbr title="ticker symbol: an abbreviation assigned to a security for trading purposes. A security&rsquo;s ticker symbol is often used in newspapers and price-quotation services. Also called a trading symbol or stock symbol.">Tkr Sym</abbr></th>
              <th>Name</th>
              <th><abbr title="expense ratio: what it costs a mutual fund company to run a fund. The expense ratio is calculated annually and includes management fees, administrative fees, and any marketing and distribution fees. It doesn't include loads or purchase or redemption fees, if any."><a href="https://investor.utopia.com/expense-ratio/">Exp Ratio</a></abbr></th>
              <th><abbr title="a yield for non-money market funds that's based on a formula mandated by the Securities and Exchange Commission. It approximates the yield an investor would receive in a year by assuming that bonds in the portfolio are held to maturity, all income reinvested, and all fees and expenses factored in.">SEC Yield</abbr></th>
              <th>Price</th>
              <th><abbr title="change: the difference in a security&rsquo;s price from one period to another. During trading hours, &ldquo;change&rdquo; refers to the difference in price since the beginning of the day; after trading hours, it compares the closing price to the previous day&rsquo;s close.">Chg$</abbr></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>VGYAX</th>
              <td><abbr title="Utopia Global Wellesley Income Fund Admiral Shares">Global Wellesley Inc Adm</abbr></td>
              <td>0.33%</td>
              <td>0.00%</td>
              <td>$24.19</td>
              <td>$0.02</td>
            </tr>
            <tr>
              <th>VGWIX</th>
              <td><abbr title="Utopia Global Wellesley Income Fund Investor Shares">Global Wellesley Inc Inv</abbr></td>
              <td>0.43%</td>
              <td>0.00%</td>
              <td>$19.35</td>
              <td>$0.02</td>
            </tr>
            <tr>
              <th>VGWAX</th>
              <td><abbr title="Utopia Global Wellington Fund Admiral Shares">Global Wellington Admiral</abbr></td>
              <td>0.36%</td>
              <td>0.00%</td>
              <td>$25.37</td>
              <td>&minus;$0.04</td>
            </tr>
            <tr>
              <th>VGWLX</th>
              <td><abbr title="Utopia Global Wellington Fund Investor Shares">Global Wellington Invest</abbr></td>
              <td>0.46%</td>
              <td>0.00%</td>
              <td>$20.29</td>
              <td>&minus;$0.03</td>
            </tr>
          </tbody>
          <tfoot>
            <tr class="agg">
              <th colspan="2">Average</th>
              <td>0.40%</td>
              <td>0.00%</td>
              <td>$22.30</td>
              <td>&minus;$0.01</td>
            </tr>
            <tr class="note">
              <td colspan="6">
                Last updated <time datetime="2019-03-05T13:30:00-05:00">5 March 2019, 1:30 p.m. <abbr title="Eastern Standard Time">EST</abbr></time>
              </td>
            </tr>
          </tfoot>
        </table>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/tables/obsolete/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>(Good) Mutual Fund Comparison</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <meta name="description" content="Accessible table example: part of a set of training modules on creating accessible user interfaces at Utopia">
    <meta name="keywords" content="Utopia,software development,accessibility,a11y,user interface">
    <meta name="creator" content="Internal Shared Services and Accessibility Office, The Utopia Group">
    <meta name="publisher" content="Accessibility Office, The Utopia Group">
    <link rel="stylesheet" href="../style.css">
    <link rel="stylesheet" href="../style-header.css">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <header>
      <h1>(Good) Mutual Fund Comparison</h1>
    </header>
    <main>
      <section>
        <table>
          <caption>Balanced Global Mutual Funds</caption>
          <thead>
            <tr>
              <th><abbr title="ticker symbol: an abbreviation assigned to a security for trading purposes. A security&rsquo;s ticker symbol is often used in newspapers and price-quotation services. Also called a trading symbol or stock symbol.">Tkr Sym</abbr></th>
              <th>Name</th>
              <th><abbr title="expense ratio: what it costs a mutual fund company to run a fund. The expense ratio is calculated annually and includes management fees, administrative fees, and any marketing and distribution fees. It doesn't include loads or purchase or redemption fees, if any."><a href="https://investor.utopia.com/expense-ratio/">Exp Ratio</a></abbr></th>
              <th><abbr title="a yield for non-money market funds that's based on a formula mandated by the Securities and Exchange Commission. It approximates the yield an investor would receive in a year by assuming that bonds in the portfolio are held to maturity, all income reinvested, and all fees and expenses factored in.">SEC Yield</abbr></th>
              <th>Price</th>
              <th><abbr title="change: the difference in a security&rsquo;s price from one period to another. During trading hours, &ldquo;change&rdquo; refers to the difference in price since the beginning of the day; after trading hours, it compares the closing price to the previous day&rsquo;s close.">Chg$</abbr></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th>VGYAX</th>
              <td><abbr title="Utopia Global Wellesley Income Fund Admiral Shares">Global Wellesley Inc Adm</abbr></td>
              <td>0.33%</td>
              <td>0.00%</td>
              <td>$24.19</td>
              <td>$0.02</td>
            </tr>
            <tr>
              <th>VGWIX</th>
              <td><abbr title="Utopia Global Wellesley Income Fund Investor Shares">Global Wellesley Inc Inv</abbr></td>
              <td>0.43%</td>
              <td>0.00%</td>
              <td>$19.35</td>
              <td>$0.02</td>
            </tr>
            <tr>
              <th>VGWAX</th>
              <td><abbr title="Utopia Global Wellington Fund Admiral Shares">Global Wellington Admiral</abbr></td>
              <td>0.36%</td>
              <td>0.00%</td>
              <td>$25.37</td>
              <td>&minus;$0.04</td>
            </tr>
            <tr>
              <th>VGWLX</th>
              <td><abbr title="Utopia Global Wellington Fund Investor Shares">Global Wellington Invest</abbr></td>
              <td>0.46%</td>
              <td>0.00%</td>
              <td>$20.29</td>
              <td>&minus;$0.03</td>
            </tr>
          </tbody>
          <tfoot>
            <tr class="agg">
              <th colspan="2">Average</th>
              <td>0.40%</td>
              <td>0.00%</td>
              <td>$22.30</td>
              <td>&minus;$0.01</td>
            </tr>
            <tr class="note">
              <td colspan="6">
                Last updated <time datetime="2019-03-05T13:30:00-05:00">5 March 2019, 1:30 p.m. <abbr title="Eastern Standard Time">EST</abbr></time>
              </td>
            </tr>
          </tfoot>
        </table>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/tables/obsolete/good/tallscopeheaders.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>(Good) Bond Fund Comparison</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <meta name="description" content="Accessible table example: part of a set of training modules on creating accessible user interfaces at Utopia">
    <meta name="keywords" content="Utopia,software development,accessibility,a11y,user interface">
    <meta name="creator" content="Internal Shared Services and Accessibility Office, The Utopia Group">
    <meta name="publisher" content="Accessibility Office, The Utopia Group">
    <link rel="stylesheet" href="../style.css">
    <link
    rel="stylesheet"
    href="../style-complex.css">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <header>
        <h1>(Good) Bond Fund Comparison</h1>
      </header>
      <section>
        <table class="complex">
          <caption>Utopia Active Bond Funds</caption>
          <thead>
            <tr>
              <th rowspan="2" scope="col" id="c">Name</th>
              <th colspan="2" scope="colgroup" id="c0">Investor Shares</th>
              <th colspan="2" scope="colgroup" id="c1">Admiral™ Shares</th>
            </tr>
            <tr>
              <th id="c3" headers="c0">Ticker symbol</th>
              <th id="c4" headers="c0">Expense ratio (%)</th>
              <th id="c5" headers="c1">Ticker symbol</th>
              <th id="c6" headers="c1">Expense ratio (%)</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th colspan="5" scope="rowgroup" id="r0" class="tbodyhead">
                Utopia active taxable bond funds
              </th>
            </tr>
            <tr>
              <th colspan="5" scope="rowgroup" id="r1" headers="r0">
                Treasury/agency
              </th>
            </tr>
            <tr>
              <th headers="c r1" id="r8">GNMA</th>
              <td headers="r0 r1 r8 c0 c3" >VFIIX</td>
              <td headers="r0 r1 r8 c0 c4" >0.21</td>
              <td headers="r0 r1 r8 c1 c5" >VFIJX</td>
              <td headers="r0 r1 r8 c1 c6" >0.11</td>
            </tr>
            <tr>
              <th headers="c r1" id="r9">Inflation-Protected Securities</th>
              <td headers="r0 r1 r9 c0 c3" >VIPSX</td>
              <td headers="r0 r1 r9 c0 c4" >0.20</td>
              <td headers="r0 r1 r9 c1 c5" >VAIPX</td>
              <td headers="r0 r1 r9 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th headers="c r1" id="r10">Intermediate-Term Treasury</th>
              <td headers="r0 r1 r10 c0 c3" >VFITX</td>
              <td headers="r0 r1 r10 c0 c4" >0.20</td>
              <td headers="r0 r1 r10 c1 c5" >VFIUX</td>
              <td headers="r0 r1 r10 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th headers="c r1" id="r11">Long-Term Treasury</th>
              <td headers="r0 r1 r11 c0 c3" >VUSTX</td>
              <td headers="r0 r1 r11 c0 c4" >0.20</td>
              <td headers="r0 r1 r11 c1 c5" >VUSUX</td>
              <td headers="r0 r1 r11 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th headers="c r1" id="r12">Short-Term Federal</th>
              <td headers="r0 r1 r12 c0 c3" >VSGBX</td>
              <td headers="r0 r1 r12 c0 c4" >0.20</td>
              <td headers="r0 r1 r12 c1 c5" >VSGDX</td>
              <td headers="r0 r1 r12 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th headers="c r1" id="r13">Short-Term Treasury</th>
              <td headers="r0 r1 r13 c0 c3" >VFISX</td>
              <td headers="r0 r1 r13 c0 c4" >0.20</td>
              <td headers="r0 r1 r13 c1 c5" >VFIRX</td>
              <td headers="r0 r1 r13 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th colspan="5" scope="rowgroup" id="r2" headers="r0">
                Investment-grade corporate
              </th>
            </tr>
            <tr>
              <th headers="c r2" id="r14">Core Bond</th>
              <td headers="r0 r2 r14 c0 c3" >VCORX</td>
              <td headers="r0 r2 r14 c0 c4" >0.25</td>
              <td headers="r0 r2 r14 c1 c5" >VCOBX</td>
              <td headers="r0 r2 r14 c1 c6" >0.15</td>
            </tr>
            <tr>
              <th headers="c r2" id="r15">
                Intermediate-Term Investment-Grade
              </th>
              <td headers="r0 r2 r15 c0 c3" >VFICX</td>
              <td headers="r0 r2 r15 c0 c4" >0.20</td>
              <td headers="r0 r2 r15 c1 c5" >VFIDX</td>
              <td headers="r0 r2 r15 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th headers="c r2" id="r16">Long-Term Investment-Grade</th>
              <td headers="r0 r2 r16 c0 c3" >VWESX</td>
              <td headers="r0 r2 r16 c0 c4" >0.22</td>
              <td headers="r0 r2 r16 c1 c5" >VWETX</td>
              <td headers="r0 r2 r16 c1 c6" >0.12</td>
            </tr>
            <tr>
              <th headers="c r2" id="r17">Short-Term Investment-Grade</th>
              <td headers="r0 r2 r17 c0 c3" >VFSTX</td>
              <td headers="r0 r2 r17 c0 c4" >0.20</td>
              <td headers="r0 r2 r17 c1 c5" >VFSUX</td>
              <td headers="r0 r2 r17 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th headers="c r2" id="r18">Ultra-Short-Term Bond</th>
              <td headers="r0 r2 r18 c0 c3" >VUBFX</td>
              <td headers="r0 r2 r18 c0 c4" >0.20</td>
              <td headers="r0 r2 r18 c1 c5" >VUSFX</td>
              <td headers="r0 r2 r18 c1 c6" >0.10</td>
            </tr>
            <tr>
              <th colspan="5" scope="rowgroup" id="r3" headers="r0">
                Below-investment-grade
              </th>
            </tr>
            <tr>
              <th headers="c r3" id="r19">High-Yield Corporate</th>
              <td headers="r0 r3 r19 c0 c3" >VWEHX</td>
              <td headers="r0 r3 r19 c0 c4" >0.23</td>
              <td headers="r0 r3 r19 c1 c5" >VWEAX</td>
              <td headers="r0 r3 r19 c1 c6" >0.13</td>
            </tr>
            <tr>
              <th colspan="5" scope="rowgroup" id="r4" headers="r0">
                Global/international
              </th>
            </tr>
            <tr>
              <th headers="c r4" id="r20">Emerging Markets Bond</th>
              <td headers="r0 r4 r20 c0 c3" >VEMBX</td>
              <td headers="r0 r4 r20 c0 c4" >0.60</td>
              <td headers="r0 r4 r20 c1 c5" >VEGBX</td>
              <td headers="r0 r4 r20 c1 c6" >0.45</td>
            </tr>
            <tr>
              <th headers="c r4" id="r21">Global Credit Bond</th>
              <td headers="r0 r4 r21 c0 c3" >VGCIX</td>
              <td headers="r0 r4 r21 c0 c4" >0.35</td>
              <td headers="r0 r4 r21 c1 c5" >VGCAX</td>
              <td headers="r0 r4 r21 c1 c6" >0.25</td>
            </tr>
          </tbody>
          <tbody>
            <tr>
              <th colspan="5" scope="rowgroup" id="r5" class="tbodyhead">
                Utopia active municipal bond funds
              </th>
            </tr>
            <tr>
              <th colspan="5" scope="rowgroup" id="r6" headers="r5">
                National municipal
              </th>
            </tr>
            <tr>
              <th headers="c r6" id="r22">Short-Term Tax-Exempt</th>
              <td headers="r5 r6 r22 c0 c3" >VWSTX</td>
              <td headers="r5 r6 r22 c0 c4" >0.19</td>
              <td headers="r5 r6 r22 c1 c5" >VWSUX</td>
              <td headers="r5 r6 r22 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r6" id="r23">Limited-Term Tax-Exempt</th>
              <td headers="r5 r6 r23 c0 c3" >VMLTX</td>
              <td headers="r5 r6 r23 c0 c4" >0.19</td>
              <td headers="r5 r6 r23 c1 c5" >VMLUX</td>
              <td headers="r5 r6 r23 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r6" id="r24">Intermediate-Term Tax-Exempt</th>
              <td headers="r5 r6 r24 c0 c3" >VWITX</td>
              <td headers="r5 r6 r24 c0 c4" >0.19</td>
              <td headers="r5 r6 r24 c1 c5" >VWIUX</td>
              <td headers="r5 r6 r24 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r6" id="r25">Long-Term Tax-Exempt</th>
              <td headers="r5 r6 r25 c0 c3" >VWLTX</td>
              <td headers="r5 r6 r25 c0 c4" >0.19</td>
              <td headers="r5 r6 r25 c1 c5" >VWLUX</td>
              <td headers="r5 r6 r25 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r6" id="r26">High-Yield Tax-Exempt</th>
              <td headers="r5 r6 r26 c0 c3" >VWAHX</td>
              <td headers="r5 r6 r26 c0 c4" >0.19</td>
              <td headers="r5 r6 r26 c1 c5" >VWALX</td>
              <td headers="r5 r6 r26 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th colspan="5" scope="rowgroup" id="r7" headers="r5">
                State municipal
              </th>
            </tr>
            <tr>
              <th headers="c r7" id="r27">
                California Intermediate-Term Tax-Exempt
              </th>
              <td headers="r5 r7 r27 c0 c3" >VCAIX</td>
              <td headers="r5 r7 r27 c0 c4" >0.19</td>
              <td headers="r5 r7 r27 c1 c5" >VCADX</td>
              <td headers="r5 r7 r27 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r7" id="r28">California Long-Term Tax-Exempt</th>
              <td headers="r5 r7 r28 c0 c3" >VCITX</td>
              <td headers="r5 r7 r28 c0 c4" >0.19</td>
              <td headers="r5 r7 r28 c1 c5" >VCLAX</td>
              <td headers="r5 r7 r28 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r7" id="r29">Massachusetts Tax-Exempt</th>
              <td headers="r5 r7 r29 c0 c3" >VMATX</td>
              <td headers="r5 r7 r29 c0 c4" >0.15</td>
              <td headers="r5 r7 r29 c1 c5" >—</td>
              <td headers="r5 r7 r29 c1 c6" >—</td>
            </tr>
            <tr>
              <th headers="c r7" id="r30">New Jersey Long-Term Tax-Exempt</th>
              <td headers="r5 r7 r30 c0 c3" >VNJTX</td>
              <td headers="r5 r7 r30 c0 c4" >0.19</td>
              <td headers="r5 r7 r30 c1 c5" >VNJUX</td>
              <td headers="r5 r7 r30 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r7" id="r31">New York Long-Term Tax-Exempt</th>
              <td headers="r5 r7 r31 c0 c3" >VNYTX</td>
              <td headers="r5 r7 r31 c0 c4" >0.19</td>
              <td headers="r5 r7 r31 c1 c5" >VNYUX</td>
              <td headers="r5 r7 r31 c1 c6" >0.09</td>
            </tr>
            <tr>
              <th headers="c r7" id="r32">Ohio Long-Term Tax-Exempt</th>
              <td headers="r5 r7 r32 c0 c3" >VOHIX</td>
              <td headers="r5 r7 r32 c0 c4" >0.15</td>
              <td headers="r5 r7 r32 c1 c5" >—</td>
              <td headers="r5 r7 r32 c1 c6" >—</td>
            </tr>
            <tr>
              <th headers="c r7" id="r33">
                Pennsylvania Long-Term Tax-Exempt
              </th>
              <td headers="r5 r7 r33 c0 c3" >VPAIX</td>
              <td headers="r5 r7 r33 c0 c4" >0.19</td>
              <td headers="r5 r7 r33 c1 c5" >VPALX</td>
              <td headers="r5 r7 r33 c1 c6" >0.09</td>
            </tr>
          </tbody>
        </table>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/tables/obsolete/good/widescope.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>(Wide) Bond Fund Comparison</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <meta name="description" content="Accessible table example: part of a set of training modules on creating accessible user interfaces at Utopia">
    <meta name="keywords" content="Utopia,software development,accessibility,a11y,user interface">
    <meta name="creator" content="Internal Shared Services and Accessibility Office, The Utopia Group">
    <meta name="publisher" content="Accessibility Office, The Utopia Group">
    <link rel="stylesheet" href="../style.css">
    <link
    rel="stylesheet"
    href="../style-complex.css">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
  </head>
  <body itemscope itemtype="https://schema.org/WebPage">
    <main>
      <header>
        <h1>(Wide) Bond Fund Comparison</h1>
      </header>
      <section>
        <table class="complex">
          <caption>Utopia Active Bond Funds</caption>
          <thead>
            <tr>
              <td rowspan="2" colspan="2"></td>
              <th rowspan="2" scope="col">Name</th>
              <th colspan="2" scope="colgroup">Investor Shares</th>
              <th colspan="2" scope="colgroup">Admiral™ Shares</th>
            </tr>
            <tr>
              <th>Ticker symbol</th>
              <th>Expense ratio (%)</th>
              <th>Ticker symbol</th>
              <th>Expense ratio (%)</th>
            </tr>
          </thead>
          <tbody class="wide">
            <tr>
              <th rowspan="14" scope="rowgroup">Utopia active taxable bond funds</th>
              <th rowspan="6" scope="rowgroup">Treasury/agency</th>
              <th>GNMA</th>
              <td>VFIIX</td>
              <td>0.21</td>
              <td>VFIJX</td>
              <td>0.11</td>
            </tr>
            <tr>
              <th>Inflation-Protected Securities</th>
              <td>VIPSX</td>
              <td>0.20</td>
              <td>VAIPX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th>Intermediate-Term Treasury</th>
              <td>VFITX</td>
              <td>0.20</td>
              <td>VFIUX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th>Long-Term Treasury</th>
              <td>VUSTX</td>
              <td>0.20</td>
              <td>VUSUX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th>Short-Term Federal</th>
              <td>VSGBX</td>
              <td>0.20</td>
              <td>VSGDX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th>Short-Term Treasury</th>
              <td>VFISX</td>
              <td>0.20</td>
              <td>VFIRX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th rowspan="5" scope="rowgroup">Investment-grade corporate</th>
              <th>Core Bond</th>
              <td>VCORX</td>
              <td>0.25</td>
              <td>VCOBX</td>
              <td>0.15</td>
            </tr>
            <tr>
              <th>
                Intermediate-Term Investment-Grade
              </th>
              <td>VFICX</td>
              <td>0.20</td>
              <td>VFIDX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th>Long-Term Investment-Grade</th>
              <td>VWESX</td>
              <td>0.22</td>
              <td>VWETX</td>
              <td>0.12</td>
            </tr>
            <tr>
              <th>Short-Term Investment-Grade</th>
              <td>VFSTX</td>
              <td>0.20</td>
              <td>VFSUX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th>Ultra-Short-Term Bond</th>
              <td>VUBFX</td>
              <td>0.20</td>
              <td>VUSFX</td>
              <td>0.10</td>
            </tr>
            <tr>
              <th rowspan="1" scope="rowgroup">Below-investment-grade</th>
              <th>High-Yield Corporate</th>
              <td>VWEHX</td>
              <td>0.23</td>
              <td>VWEAX</td>
              <td>0.13</td>
            </tr>
            <tr>
              <th rowspan="2" scope="rowgroup">Global/international</th>
              <th>Emerging Markets Bond</th>
              <td>VEMBX</td>
              <td>0.60</td>
              <td>VEGBX</td>
              <td>0.45</td>
            </tr>
            <tr>
              <th>Global Credit Bond</th>
              <td>VGCIX</td>
              <td>0.35</td>
              <td>VGCAX</td>
              <td>0.25</td>
            </tr>
          </tbody>
          <tbody class="wide">
            <tr>
              <th rowspan="12" scope="rowgroup">Utopia active municipal bond funds</th>
              <th rowspan="5" scope="rowgroup">National municipal</th>
              <th>Short-Term Tax-Exempt</th>
              <td>VWSTX</td>
              <td>0.19</td>
              <td>VWSUX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>Limited-Term Tax-Exempt</th>
              <td>VMLTX</td>
              <td>0.19</td>
              <td>VMLUX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>Intermediate-Term Tax-Exempt</th>
              <td>VWITX</td>
              <td>0.19</td>
              <td>VWIUX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>Long-Term Tax-Exempt</th>
              <td>VWLTX</td>
              <td>0.19</td>
              <td>VWLUX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>High-Yield Tax-Exempt</th>
              <td>VWAHX</td>
              <td>0.19</td>
              <td>VWALX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th rowspan="7" scope="rowgroup">State municipal</th>
              <th>
              California Intermediate-Term Tax-Exempt
              </th>
              <td>VCAIX</td>
              <td>0.19</td>
              <td>VCADX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>California Long-Term Tax-Exempt</th>
              <td>VCITX</td>
              <td>0.19</td>
              <td>VCLAX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>Massachusetts Tax-Exempt</th>
              <td>VMATX</td>
              <td>0.15</td>
              <td>—</td>
              <td>—</td>
            </tr>
            <tr>
              <th>New Jersey Long-Term Tax-Exempt</th>
              <td>VNJTX</td>
              <td>0.19</td>
              <td>VNJUX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>New York Long-Term Tax-Exempt</th>
              <td>VNYTX</td>
              <td>0.19</td>
              <td>VNYUX</td>
              <td>0.09</td>
            </tr>
            <tr>
              <th>Ohio Long-Term Tax-Exempt</th>
              <td>VOHIX</td>
              <td>0.15</td>
              <td>—</td>
              <td>—</td>
            </tr>
            <tr>
              <th>
                Pennsylvania Long-Term Tax-Exempt
              </th>
              <td>VPAIX</td>
              <td>0.19</td>
              <td>VPALX</td>
              <td>0.09</td>
            </tr>
          </tbody>
        </table>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/tables/obsolete/good/widescopeheaders.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="https://jpdev.pro">
    <meta name="creator" content="Jonathan Pool">
    <meta name="publisher" content="Jonathan Pool">
    <meta name="description" content="complex HTML table">
    <meta name="keywords" content="HTML,table">
    <title>Complex HTML table</title>
    <link rel="stylesheet" href="../style-genericwide.css">
  </head>

  <body>
    <main>
      <header>
        <h1>Complex HTML table</h1>
      </header>
      <table>
        <caption>Digital Information Devices</caption>
        <thead>
          <tr>
            <th rowspan="2" colspan="4" scope="colgroup">Device</th>
            <th colspan="3" scope="colgroup" id="hd0">Dimension (mm)</th>
            <th colspan="2" scope="colgroup" id="hd1">Date</th>
          </tr>
          <tr>
            <th scope="col" id="hd2">Height</th>
            <th scope="col" id="hd3">Width</th>
            <th scope="col" id="hd4">Depth</th>
            <th scope="col" id="hd5">Released</th>
            <th scope="col" id="hd6">Discontinued</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th id="hd7" rowspan="7" scope="rowgroup">Mobile devices</th>
            <th id="hd8" rowspan="5" scope="rowgroup">Apple-branded</th>
            <th id="hd9" rowspan="3" scope="rowgroup">iPad line</th>
            <th id="hd10" scope="row">Model 1</th>
            <td headers="hd7 hd8 hd9 hd10 hd0 hd2">243</td>
            <td headers="hd7 hd8 hd9 hd10 hd0 hd3">190</td>
            <td headers="hd7 hd8 hd9 hd10 hd0 hd4">13</td>
            <td headers="hd7 hd8 hd9 hd10 hd1 hd5">2010</td>
            <td headers="hd7 hd8 hd9 hd10 hd1 hd6">2011</td>
          </tr>
          <tr>
            <th id="hd11" scope="row">Model 2</th>
            <td headers="hd7 hd8 hd9 hd11 hd0 hd2">241</td>
            <td headers="hd7 hd8 hd9 hd11 hd0 hd3">186</td>
            <td headers="hd7 hd8 hd9 hd11 hd0 hd4">9</td>
            <td headers="hd7 hd8 hd9 hd11 hd1 hd5">2011</td>
            <td headers="hd7 hd8 hd9 hd11 hd1 hd6">2014</td>
          </tr>
          <tr>
            <th id="hd12" scope="row">Model 3</th>
            <td headers="hd7 hd8 hd9 hd12 hd0 hd2">241</td>
            <td headers="hd7 hd8 hd9 hd12 hd0 hd3">186</td>
            <td headers="hd7 hd8 hd9 hd12 hd0 hd4">9</td>
            <td headers="hd7 hd8 hd9 hd12 hd1 hd5">2012</td>
            <td headers="hd7 hd8 hd9 hd12 hd1 hd6">2012</td>
          </tr>
          <tr>
            <th id="hd13" rowspan="2" scope="rowgroup">iPhone line</th>
            <th id="hd14" scope="row">Model 1</th>
            <td headers="hd7 hd8 hd13 hd14 hd0 hd2">115</td>
            <td headers="hd7 hd8 hd13 hd14 hd0 hd3">61</td>
            <td headers="hd7 hd8 hd13 hd14 hd0 hd4">12</td>
            <td headers="hd7 hd8 hd13 hd14 hd1 hd5">2007</td>
            <td headers="hd7 hd8 hd13 hd14 hd1 hd6">2008</td>
          </tr>
          <tr>
            <th id="hd15" scope="row">Model SE</th>
            <td headers="hd7 hd8 hd13 hd15 hd0 hd2">116</td>
            <td headers="hd7 hd8 hd13 hd15 hd0 hd3">62</td>
            <td headers="hd7 hd8 hd13 hd15 hd0 hd4">12</td>
            <td headers="hd7 hd8 hd13 hd15 hd1 hd5">2009</td>
            <td headers="hd7 hd8 hd13 hd15 hd1 hd6">2010</td>
          </tr>
          <tr>
            <th id="hd16" rowspan="2" scope="rowgroup">Samsung-branded</th>
            <th id="hd17" rowspan="2" scope="rowgroup">Galaxy line</th>
            <th id="hd18" scope="row">Model 0</th>
            <td headers="hd7 hd16 hd17 hd18 hd0 hd2">115</td>
            <td headers="hd7 hd16 hd17 hd18 hd0 hd3">56</td>
            <td headers="hd7 hd16 hd17 hd18 hd0 hd4">12</td>
            <td headers="hd7 hd16 hd17 hd18 hd1 hd5">2009</td>
            <td headers="hd7 hd16 hd17 hd18 hd1 hd6">2009</td>
          </tr>
          <tr>
            <th id="hd19" scope="row">Model S</th>
            <td headers="hd7 hd16 hd17 hd19 hd0 hd2">122</td>
            <td headers="hd7 hd16 hd17 hd19 hd0 hd3">64</td>
            <td headers="hd7 hd16 hd17 hd19 hd0 hd4">14</td>
            <td headers="hd7 hd16 hd17 hd19 hd1 hd5">2010</td>
            <td headers="hd7 hd16 hd17 hd19 hd1 hd6">2011</td>
          </tr>
          <tr>
            <th id="hd20" rowspan="4" scope="rowgroup">Stationary devices</th>
            <th id="hd21" rowspan="4" scope="rowgroup">IBM-branded</th>
            <th id="hd22" rowspan="2" scope="rowgroup">Personal Computer line</th>
            <th id="hd23" scope="row">Model 5100</th>
            <td headers="hd20 hd21 hd22 hd23 hd0 hd2">8</td>
            <td headers="hd20 hd21 hd22 hd23 hd0 hd3">18</td>
            <td headers="hd20 hd21 hd22 hd23 hd0 hd4">24</td>
            <td headers="hd20 hd21 hd22 hd23 hd1 hd5">1975</td>
            <td headers="hd20 hd21 hd22 hd23 hd1 hd6">1982</td>
          </tr>
          <tr>
            <th id="hd24" scope="row">Model 5110</th>
            <td headers="hd20 hd21 hd22 hd24 hd0 hd2">8</td>
            <td headers="hd20 hd21 hd22 hd24 hd0 hd3">18</td>
            <td headers="hd20 hd21 hd22 hd24 hd0 hd4">24</td>
            <td headers="hd20 hd21 hd22 hd24 hd1 hd5">1975</td>
            <td headers="hd20 hd21 hd22 hd24 hd1 hd6">1982</td>
          </tr>
          <tr>
            <th id="hd25" rowspan="2" scope="rowgroup">Power System line</th>
            <th id="hd26" scope="row">Model S914</th>
            <td headers="hd20 hd21 hd25 hd26 hd0 hd2">173</td>
            <td headers="hd20 hd21 hd25 hd26 hd0 hd3">482</td>
            <td headers="hd20 hd21 hd25 hd26 hd0 hd4">770</td>
            <td headers="hd20 hd21 hd25 hd26 hd1 hd5">2018</td>
            <td headers="hd20 hd21 hd25 hd26 hd1 hd6"></td>
          </tr>
          <tr>
            <th id="hd27" scope="row">Model S922</th>
            <td headers="hd20 hd21 hd25 hd27 hd0 hd2">87</td>
            <td headers="hd20 hd21 hd25 hd27 hd0 hd3">482</td>
            <td headers="hd20 hd21 hd25 hd27 hd0 hd4">767</td>
            <td headers="hd20 hd21 hd25 hd27 hd1 hd5">2018</td>
            <td headers="hd20 hd21 hd25 hd27 hd1 hd6"></td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>

==> workshops/ex/tables/rowgroup/index.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML table with row group">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML table with row group</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML table with row group</h1>
      </header>
      <table>
        <caption>Retirement Account Types</caption>
        <thead>
          <tr>
            <th colspan="2">Type</th>
            <th>Contributions deductible</th>
            <th>Withdrawal tax rate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th rowspan="2">IRA</th>
            <th>Traditional</th>
            <td>Possibly</td>
            <td>Ordinary income</td>
          </tr>
          <tr>
            <th>Roth</th>
            <td>No</td>
            <td>None</td>
          </tr>
          <tr>
            <th colspan="2">Taxable</th>
            <td>No</td>
            <td>Variable on earnings</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>

==> workshops/ex/tables/stack/stackid.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML table with stacked row group and headers attributes">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML table with stacked row group and headers attributes</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML table with stacked row group and <code>headers</code> attributes</h1>
      </header>
      <table>
        <caption>Retirement Account Types</caption>
        <thead>
          <tr>
            <th id="c1">Type</th>
            <th id="c2">Contributions deductible</th>
            <th id="c3">Withdrawal tax rate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th id="r2" colspan="3" headers="c1" class="rowgroup0">IRA</th>
          </tr>
          <tr>
            <th id="r3" headers="c1 r2" class="rowgroup1">Traditional</th>
            <td headers="r2 r3 c2">Possibly</td>
            <td headers="r2 r3 c3">Ordinary income</td>
          </tr>
          <tr>
            <th id="r4" headers="c1 r2" class="rowgroup1">Roth</th>
            <td headers="r2 r4 c2">No</td>
            <td headers="r2 r4 c3">None</td>
          </tr>
        </tbody>
        <tbody>
          <tr>
            <th id="r5" headers="c1" class="rowgroup0">Taxable</th>
            <td headers="r5 c2">No</td>
            <td headers="r5 c3">Variable on earnings</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>

==> workshops/ex/tables/stack/stacknostyle.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML table with stacked row group and headers attributes">
    <meta name="keywords" content="HTML,table,accessibility">
    <title>HTML table with stacked row group, non-styled</title>
    <style>
      td, th {border: solid}
      table {border-collapse: collapse}
    </style>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML table with stacked row group, non-styled</h1>
      </header>
      <table>
        <caption>Retirement Account Types</caption>
        <thead>
          <tr>
            <th>Type</th>
            <th id="c2">Contributions deductible</th>
            <th id="c3">Withdrawal tax rate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th id="r2" colspan="3" class="rowgroup0">IRA</th>
          </tr>
          <tr>
            <th id="r3" class="rowgroup1">Traditional</th>
            <td headers="r2 r3 c2">Possibly</td>
            <td headers="r2 r3 c3">Ordinary income</td>
          </tr>
          <tr>
            <th id="r4" class="rowgroup1">Roth</th>
            <td headers="r2 r4 c2">No</td>
            <td headers="r2 r4 c3">None</td>
          </tr>
        </tbody>
        <tbody>
          <tr>
            <th class="rowgroup0">Taxable</th>
            <td>No</td>
            <td>Variable on earnings</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>

==> workshops/ex/tables/stack/stackscope.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML table with stacked row group and scope attribute">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML table with stacked row group and scope attribute</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML table with stacked row group and <code>scope</code> attribute</h1>
      </header>
      <table>
        <caption>Retirement Account Types</caption>
        <thead>
          <tr>
            <th>Type</th>
            <th>Contributions deductible</th>
            <th>Withdrawal tax rate</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th colspan="3" scope="rowgroup" class="rowgroup0">IRA</th>
          </tr>
          <tr>
            <th class="rowgroup1">Traditional</th>
            <td>Possibly</td>
            <td>Ordinary income</td>
          </tr>
          <tr>
            <th class="rowgroup1">Roth</th>
            <td>No</td>
            <td>None</td>
          </tr>
        </tbody>
        <tbody>
          <tr>
            <th class="rowgroup0">Taxable</th>
            <td>No</td>
            <td>Variable on earnings</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>
==> workshops/ex/tables/substack/index.html <==
<!DOCTYPE html>
<html lang="en-US">

  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="HTML table with stacked row subgroup and headers attributes">
    <meta name="keywords" content="HTML,table,accessibility">
    <link rel="stylesheet" href="../style.css">
    <title>HTML table with stacked row subgroup and headers attributes</title>
  </head>

  <body>
    <main>
      <header>
        <h1>HTML table with stacked row subgroup and headers attributes</h1>
      </header>
      <table>
        <caption>Securities of Corporation XYZ</caption>
        <thead>
          <tr>
            <th>Type</th>
            <th id="c2">Price</th>
            <th id="c3">Votes</th>
          </tr>
        </thead>
        <tbody class="numeric">
          <tr>
            <th id="r2" colspan="3" class="rowgroup0">Stock</th>
          </tr>
          <tr>
            <th id="r3" colspan="3" class="rowgroup1" headers="r2">Common</th>
          </tr>
          <tr>
            <th id="r4" class="rowgroup2" headers="r2 r3">Class A</th>
            <td headers="r2 r3 r4 c2">$34.69</td>
            <td headers="r2 r3 r4 c3">10</td>
          </tr>
          <tr>
            <th id="r5" class="rowgroup2" headers="r2 r3">Class B</th>
            <td headers="r2 r3 r5 c2">$20.33</td>
            <td headers="r2 r3 r5 c3">1</td>
          </tr>
          <tr>
            <th id="r6" class="rowgroup1" headers="r2">Preferred</th>
            <td headers="r2 r6 c2">$15.48</td>
            <td headers="r2 r6 c3">0</td>
          </tr>
          <tr>
            <th id="r7" colspan="3" class="rowgroup0">Bonds</th>
          </tr>
          <tr>
            <th id="r8" class="rowgroup1" headers="r7">4.5% due 2031-06-30</th>
            <td headers="r7 r8 c2">$106.40</td>
            <td headers="r7 r8 c3">0</td>
          </tr>
        </tbody>
      </table>
    </main>
  </body>

</html>

==> workshops/ex/testing/goodbad/bad/index.html <==
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Utopia</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <p class="pageTitle">Fund Exchange Order</p>
    <p class="sectionTitle">Holdings</p>
    <table>
      <tr><td colspan="4" class="tableTitle">
        Utopia mutual funds held in your account
      </td></tr>
      <tr class="colHeaders">
        <td>Ticker symbol</td>
        <td>Name</td>
        <td>Shares</td>
        <td>Value</td>
      </tr>
      <tr class="data">
        <td>VMFXX</td>
        <td>Federal Money Market</td>
        <td>34,875</td>
        <td>$34,875.00</td>
      </tr>
      <tr class="data">
        <td>VUSTX</td>
        <td>Long Term Treasury</td>
        <td>2,000</td>
        <td>$29,860.00</td>
      </tr>
      <tr class="data">
        <td>VGWLX</td>
        <td>Global Wellington</td>
        <td>1,500</td>
        <td>$32,745.00</td>
      </tr>
    </table>
    <p class="sectionTitle">Start your order</p>
    <p>
      For your security, enter your date of birth:
      <input type="text" size="15" placeholder="yyyy-mm-dd" required>
    </p>
    <div class="box">
      <p class="boxTitle"><span>&nbsp;Holding to <strong>sell</strong> shares of&nbsp;</span></p>
      <p><input type="radio" name="from" value="VMFXX" checked>VMFXX</p>
      <p><input type="radio" name="from" value="VUSTX">VUSTX</p>
      <p><input type="radio" name="from" value="VGWLX">VGWLX</p>
    </div>
    <p class="button"><a class="button" href="#">Next</a></p>
  </body>
</html>

==> workshops/ex/testing/goodbad/good/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Fund Exchange Order</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Fund Exchange Order</h1>
      </header>
      <section>
        <h2>Holdings</h2>
        <table>
          <caption>Utopia mutual funds held in your account</caption>
          <thead>
            <tr>
              <th>Ticker symbol</th>
              <th>Name</th>
              <th>Shares</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody class="num3 num4">
            <tr>
              <th>VMFXX</th>
              <td>Federal Money Market</td>
              <td>34,875</td>
              <td>$34,875.00</td>
            </tr>
            <tr>
              <th>VUSTX</th>
              <td>Long Term Treasury</td>
              <td>2,000</td>
              <td>$29,860.00</td>
            </tr>
            <tr>
              <th>VGWLX</th>
              <td>Global Wellington</td>
              <td>1,500</td>
              <td>$32,745.00</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section>
        <h2>Start your order</h2>
        <form>
          <p>
            <label>
              For your security, enter your date of birth:
              <input
                type="date"
                min="1905-01-01"
                max="2020-12-31"
                required
                autocomplete="bday"
              >
            </label>
          </p>
          <fieldset>
            <legend>Holding to <strong>sell</strong> shares of</legend>
            <p>
              <label><input type="radio" name="from" value="VMFXX" checked>VMFXX</label>
            </p>
            <p><label><input type="radio" name="from" value="VUSTX">VUSTX</label></p>
            <p><label><input type="radio" name="from" value="VGWLX">VGWLX</label></p>
          </fieldset>
          <p><button type="submit">Next</button></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> workshops/ex/testing/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="author" content="Jonathan Pool">
    <link rel="author" href="http://crewnet.utopia.com/CrewNetPortal/CrewSearch?id=065786">
    <meta name="creator" content="Business Platforms and Services">
    <meta name="publisher" content="Accessibility Office">
    <meta name="description" content="Accessibility testing workshop">
    <meta name="keywords" content="HTML,testing,accessibility">
    <link rel="stylesheet" href="../../style.css">
    <title>Table Workshop</title>
  </head>
  <body>
    <header>
      <h1>Testing Workshop</h1>
    </header>
    <section>
      <header>
        <figure>
          <img
            src="../../gen/assets/a11y-kbd.jpg"
            alt="keyboards matter for accessibility"
            width="75%"
          >
        </figure>
        <h2>Introduction</h2>
      </header>
      <p><strong>Testing</strong> is a fundamental component of software development, and increasingly so as the periodic development process at Utopia becomes continuous. Development and testing were formerly considered separate activities, conducted by distinct persons. New versions of software were not deployed until approved by testers and other authorities. Now developers take responsibility for their own testing and, to the greatest practical extent, automate that testing, so it takes place every time code changes. Tests cover all parts of the code and all desired application behaviors. The continual and high-coverage nature of testing makes it safe to deploy code changes as soon as they are made.</p>
      <p>Utopia user interfaces must behave accessibly, so developers must test their UIs to ensure they do. You are about to practice doing that.</p>
    </section>
    <section>
      <header>
        <h2>A good/bad example</h2>
      </header>
      <p><a href="goodbad/good/index.html" target="_blank">Good example</a>.</p>
      <p><a href="goodbad/bad/index.html" target="_blank">Bad example</a>.</p>
      <p>These two pages look approximately the same, but they are different. The good example conforms fully to accessibility standards, but the bad one does not.</p>
    </section>
    <section>
      <header>
        <h2>Semiautomatic testing</h2>
      </header>
      <p>One tactic for accessibility testing is to open a web document in a browser and ask a browser extension to perform a suite of tests on that document. Do that now on the good example.</p>
      <h3>Preparation</h3>
      <p>You can open web documents not only by requesting them from a server, but also by opening local copies of them on your computer. To enable semiautomatic testing on local copies:</p>
      <ol>
        <li>In Chrome, visit <a href="chrome://extensions/">chrome://extensions/</a>.</li>
        <li>Select <q>Details on </q><q>axe</q>.</li>
        <li>Turn on <q>Allow access to file URLs</q>.</li>
        <li>Use the <kbd>BACK</kbd> button to return to the extension list.</li>
        <li>Repeat this operation on the other accessibility testing extensions, namely <q>ARC Toolkit</q>, <q>High Contrast</q>, <q>Lighthouse</q>, and <q>WAVE</q>. If you don&rsquo;t have all those extensions, get them, using the bookmark <q>Utopia Approved Extensions</q>.</li>
        <li>Close the extensions tab.</li>
      </ol>
      <h3>Axe</h3>
      <p>Axe is the most commonly used accessibility testing extension at Utopia.</p>
      <ol>
        <li>Open the good example in Chrome.</li>
        <li>Open the developer tools (you can do this with the <kbd>F12</kbd> key).</li>
        <li>Choose <q>axe</q> from the list of panels across the top.</li>
        <li>Activate the <q>ANALYZE</q> button.</li>
        <li>Axe should find no issues. Verify whether this is true.</li>
        <li>Close the developer tools.</li>
      </ol>
      <h3>ARC Toolkit</h3>
      <p>ARC Toolkit is a more assertive extension, providing error notices and warnings about possible accessibility problems.</p>
      <ol>
        <li>Open the good example in Chrome.</li>
        <li>Open the developer tools.</li>
        <li>Choose <q>ARC Toolkit</q> from the list of panels.</li>
        <li>Activate the <q>Run tests</q> button.</li>
        <li>ARC Toolkit should find no <q>errors</q>, but should give several <q>warnings</q>, with recommendations. Verify whether this is true and become familiar with some of the warnings.</li>
        <li>At the bottom of the left pane, activate the <q>Send DOM to validator</q> button.</li>
        <li>Note any error reports and warnings from the Nu Html Checker. Some of these may arise from code added by ARC Toolkit.</li>
        <li>Close the developer tools.</li>
      </ol>
      <h3>WAVE</h3>
      <ol>
        <li>Open the good example in Chrome.</li>
        <li>Activate the WAVE extension button in the Chrome toolbar.</li>
        <li>WAVE should find no <q>Errors</q> or <q>Contrast Errors</q>, and should issue no <q>Alerts</q>. Verify whether this is true.</li>
        <li>Click the WAVE button again to dismiss WAVE.</li>
      </ol>
      <h3>Lighthouse</h3>
      <ol>
        <li>Open the good example from a server in Chrome. You can use the above link, or </li>
        <li>Open the developer tools.</li>
        <li>Choose <q>Audits</q> from the list of panels.</li>
        <li>Check the <q>Accessibility</q> checkbox.</li>
        <li>Activate the <q>Generate report</q> button.</li>
        <li>Lighthouse should give the page a score of 100. Verify whether this is true. It should also list the audits that the page passed and recommend other non-automated tests to perform.</li>
        <li>Close the developer tools.</li>
      </ol>
    </section>
    <section>
      <header>
        <h2>Automatic package testing</h2>
      </header>
      <p>Some accessibility test packages are available as APIs for integration into general testing platforms. Do that now on the good example.</p>
      <ul>
        <li><a href="goodbad/good-nvda.mp4" target="_blank">good with NVDA in Chrome on Windows</a></li>
        <li><a href="goodbad/bad-nvda.mp4" target="_blank">bad with NVDA in Chrome on Windows</a></li>
      </ul>
      <p>The reason for the differences is that the tables are coded differently. Inspect the code of each example.</p>
      <p>A properly coded simple table is handled better by screen readers. However, not all screen readers properly handle even simple tables. Can you identify errors in these recordings?:</p>
      <ul>
        <li><a href="goodbad/good-vosafosx.mp4" target="_blank">good with VoiceOver in Safari on OS X</a></li>
        <li><a href="goodbad/good-vosafios.mp4" target="_blank">good with VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Column groups</h2>
      </header>
      <p><a href="colgroup/index.html" target="_blank">Formally accessible example</a>.</p>
      <p>Inspect the code of this table. Note that the &ldquo;Type&rdquo; header is marked as a row header. The reason is that, by default, it would be a column header, but in this case it applies to the top rows, not the left column.</p>
      <p>Column groups are handled properly by some screen readers, but not by all. Can you identify errors in these recordings?:</p>
      <ul>
        <li><a href="colgroup/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="colgroup/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Row groups</h2>
      </header>
      <p><a href="rowgroup/index.html" target="_blank">Formally accessible example</a>.</p>
      <p>Row groups are handled properly by some screen readers, but not by all. Listen for errors in these recordings. Some errors are serious.</p>
      <ul>
        <li><a href="rowgroup/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="rowgroup/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="rowgroup/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Stacked row groups</h2>
      </header>
      <p>Utopia tables often contain row groups. Usually they are stacked. A header of a row group, such as &ldquo;IRA&rdquo; in the previous example, is placed <strong>above</strong> the rows in the group, instead of on their left.</p>
      <p>Here are two examples of tables with stacked row groups:</p>
      <ul>
        <li><a href="stack/stackid.html" target="_blank">Example of table with <code>headers</code> attributes</a>.</li>
        <li><a href="stack/stackscope.html" target="_blank">Example of table with <code>scope</code> attributes</a>.</li>
      </ul>
      <p>In these examples, the styles show that &ldquo;IRA&rdquo; is a header for the next two rows, not the next three rows. But assistive technologies generally disregard styles. To them, these tables &ldquo;look&rdquo; like <a href="stack/stacknostyle.html" target="_blank">this</a>.</p>
      <p>Therefore, formal accessibility requires you to specify which rows each row-group header belongs to.</p>
      <p>There are two methods for specifying what row-group headers are headers of:<code>headers</code> attributes and <code>scope</code> attributes. Inspect the code of the two examples above to see how these methods work.</p>
      <p>The <code>headers</code> method is straightforward: You specify, for each cell, which other cells are its headers.</p>
      <p>The <code>scope</code> method is somewhat more complex. You attach a <code>scope="rowgroup"</code> attribute to a row-group header. Then, in order to specify the boundaries of its row group, you enclose the rows of that group, including the row-group header&rsquo;s row, in a <code>tbody</code> element. That makes that header a header of every cell below it and every cell to its right, throughout the rows in that <code>tbody</code> element.</p>
      <p>As the tables become more complex, the behavior of screen readers becomes more erroneous. Stacked row groups are <strong>not</strong> handled properly by most or all of the most common screen readers. This is true for <strong>both</strong> methods. Try to identify the errors in these recordings:</p>
      <h3>Tables using the <code>headers</code> method</h3>
      <ul>
        <li><a href="stack/headers/nvdachromewin.mp4" target="_blank">NVDA in Chrome on Windows</a></li>
        <li><a href="stack/headers/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="stack/headers/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="stack/headers/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <h3>Tables using the <code>scope</code> method</h3>
      <ul>
        <li><a href="stack/scope/nvdachromewin.mp4" target="_blank">NVDA in Chrome on Windows</a></li>
        <li><a href="stack/scope/jawschromewin.mp4" target="_blank">JAWS in Chrome on Windows</a></li>
        <li><a href="stack/scope/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="stack/scope/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Substacked row groups</h2>
      </header>
      <p>Utopia tables can be much more complex that what you have seen so far. For example, they often stack rows in groups <strong>and subgroups</strong>. One class of tables doing this is <a href="https://investor.utopia.com/mutual-funds/list#/mutual-funds/asset-class/month-end-returns" target="_blank">tables of funds</a>.</p>
      <p>An investor using a screen reader (JAWS in Chrome on Windows) to navigate inside this table could <a href="substack/jawschromewin-funds.mp4" target="_blank">hear cell contents without any headings</a> at all, and therefore find it nearly impossible to understand the information in those cells.</p>
      <p>Can tables with stacked subgroups be made accessible? There are two answers:</p>
      <ul>
        <li>They can be made <strong>formally</strong> accessible. This requires using the <code>headers</code> method. The <code>scope</code> method cannot be used, because it would require <code>tbody</code> elements inside <code>tbody</code> elements, and the HTML5 specification prohibits that.</li>
        <li>It is questionable whether they can be made <strong>practically</strong> accessible. You have seen that screen readers sometimes fail to support the <code>headers</code> method properly.</li>
      </ul>
      <p>Consider this <a href="substack/index.html" target="_blank">simplified example of a formally accessible table with stacked subgroups</a>. Inspect its code to see that <code>headers</code> attributes are used to identify the group and subgroup headers of the cells on the &ldquo;Class A&rdquo; and &ldquo;Class B&rdquo; rows.</p>
      <p>Here are a couple of recordings of screen readers navigating this table. Identify the serious errors in them.</p>
      <ul>
        <li><a href="substack/vosafosx.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="substack/vosafios.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
    </section>
    <section>
      <header>
        <h2>Solutions for practical accessibility</h2>
      </header>
      <p>If you are implementing tables in a project that aims for formal accessibility, you can succeed, using the methods illustrated above.</p>
      <p>However, if your project is more ambitious and aims for practical accessibility, what can you do?</p>
      <p>You can craft solutions by recognizing two basic facts:</p>
      <ul>
        <li>User technologies (operating systems, browsers, screen readers, etc.) give excellent support to some web standards and poor or no support to others. Tables are especially difficult for assistive technologies to support, because browsers don&rsquo;t communicate the important facts about tables to them. Support for simple tables is not perfect, but is better than support for complex tables.</li>
        <li>Users vary in how they prefer or need to consume financial data. Tables are intuitive for some users but overwhelming and confusing for others. Some users hate graphs and want tables. Other users hate tables and want graphs. And some users can&rsquo;t make use of either graphs or tables and want something else.</li>
      </ul>
      <p>From these facts comes a solution strategy: Make tables formally accessible, but accept the reality that their practical accessibility will be limited at present. If and when user technologies improve their support for web standards, your formally accessible tables may become practically more accessible, too. Meanwhile, you have some options.</p>
      <h3>Non-tabular alternatives</h3>
      <p>In addition to tables, you can offer other structures for the presentation of the same data. HTML5 offers two structures that can produce natural analogs to tables:</p>
      <ul>
        <li>description lists</li>
        <li>headings</li>
      </ul>
      <p>Description lists are a structure for presenting attributes and values. Each row of a table can become one description list. Headings can introduce them. Description lists fit easily onto a narrow screen. A <a href="alt/dl.html" target="_blank">description-list version of the previous table</a> exemplifies this. Inspect the code to see how this structure is applied.</p>
      <p>Description lists have been in the HTML standard since 1993, so creators of screen readers have had plenty of time to support that structure. Amazingly, however, not all do. Note the errors in these recordings:</p>
      <ul>
        <li><a href="alt/vosafosx-dl.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="alt/vosafios-dl.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <p>So, why even mention description lists here? Because they are a reasonable table alternative, so you should know how poorly supported they are before you decide whether to use them.</p>
      <p>Instead of (or in addition to) description lists, you can achieve practical accessibility with plain-text paragraphs describing the attributes and values, embedded in the same heading structure. A <a href="alt/p.html" target="_blank">revised example</a> removes the <code>dl</code>, <code>dt</code>, and <code>dd</code> elements, replacing them with <code>p</code> elements. Now screen readers have no trouble parsing and announcing the content:</p>
      <ul>
        <li><a href="alt/vosafosx-p.mp4" target="_blank">VoiceOver in Safari on OS X</a></li>
        <li><a href="alt/vosafios-p.mp4" target="_blank">VoiceOver in Safari on iOS</a></li>
      </ul>
      <p>Developers are sometimes tempted to make such alternative formats available only to users of assistive technologies. But they are useful for others, too. They can benefit any user of a small display such as a mobile telephone. They can also benefit <a href="https://www.maltron.com/store/p24/Maltron_Head%2FMouth_Stick_Keyboard_-_US_English.html" target="_blank">users who cannot use a mouse</a>, and users who have trouble understanding tables. Accessibility experts recommend generally making alternatives available to everybody.</p>
      <h3>Table simplification</h3>
      <p>You have seen that simple tables come closer to practical accessibility than complex tables do. That inspires an additional measure that a project can consider: breaking complex tables up, or flattening complex tables, into simple tables. For example, in the above table, common stocks could be a table of their own. Alternatively, security types could be flattened into a single group, with members such as &ldquo;Class A Common Stock&rdquo;.</p>
    </section>
    <section>
      <header>
        <h2>Testing tables for accessibility</h2>
      </header>
      <p>Testing is an essential part of development, so how do you test tables for accessibility?</p>
      <h3>Test packages</h3>
      <p>One option is to use packages of accessibility tests. They check for conformity to various accessibility standards. Some of those are related to tables. Two such packages are Axe, which implements the <a href="https://github.com/dequelabs/axe-core" target="_blank">axe-core rules</a>, and the <a href="https://wave.webaim.org/" target="_blank">WAVE Web Accessibility Evaluation Tool</a>. Axe is available for various testing frameworks, including Jest and Cypress. Both are available also as Utopia-approved extensions to Chrome, and as Firefox extensions.</p>
      <p>Try both of these packages in Chrome on the bad example of a simple table. You will find that they both report <strong>no</strong> accessibility defects! Why not?</p>
      <ul>
        <li>Accessibility test packages don&rsquo;t test for everything. There is no guarantee they will find all the defects.</li>
        <li>They don&rsquo;t complain about the missing <code>caption</code> element in the bad table. The title of the table, which could have been there, is instead in an <code>h2</code> element above the table. That worsens accessibility. For example, a user asking a screen reader for a list of the tables on the page would not get the table titles. Still, the HTML5 standard makes <code>caption</code> elements optional, not required, and the rules applied by these packages do the same.</li>
        <li>They don&rsquo;t complain about the header cells being coded as <code>td</code> cells instead of <code>th</code>. They also don&rsquo;t complain about the fact that the table contains no <code>th</code> cells at all. To report a miscoded header cell, a package would need to figure out which cells really contain headers. It would guess, based on location, alignment, font style, or other facts, and it could guess wrong. <a href="https://github.com/dequelabs/axe-core#about-axe---our-manifesto">Axe claims it will report <q>zero false positives</q></a>, namely it will never guess wrong, so it therefore doesn&rsquo;t guess.</li>
      </ul>
      <h3>Custom tests</h3>
      <p>So, packages play it safe and leave some important defects unreported. Therefore, testing your tables thoroughly for accessibility requires you to write your own accessibility tests. You can do this along with the other tests you write. You can take advantage of your project&rsquo;s practices and standards to make your tests more specific than any package could.</p>
      <p>For the simple good and bad examples above, you would want tests that the good example passes and the bad example fails.</p>
      <p>One of the Utopia testing frameworks that you can use for this purpose is Jest. It is the one used for unit testing in the CTO&rsquo;s Angular exemplar application.</p>
      <p>If you fork and clone this repository and then execute <code>npm install</code> in your local copy, you will then be able to execute <code>npm run test</code>. That will run some Jest tests designed for the good and bad example tables.</p>
      <p>The test file is <code>ex/tables/goodbad/spec.js</code>. That file looks like this:</p>
      <pre><code>
      const {JSDOM} = require('jsdom');
      const fs = require('fs');
      const path = require('path');
      
      const htmls = [
        fs.readFileSync(path.resolve(__dirname, 'good.html'), 'utf8'),
        fs.readFileSync(path.resolve(__dirname, 'bad.html'), 'utf8')
      ];
      const bodyLabels = ['good body', 'bad body'];
      let dom;
      let body;
      let firstTable;
      
      [0, 1].forEach(index => {
        describe(bodyLabels[index], () => {
          beforeEach(() => {
            dom = new JSDOM(htmls[index]);
            body = dom.window.document.body;
            firstTable = body.querySelector('table');
          });
          it('first table should have a caption', () => {
            expect(firstTable.firstElementChild.tagName).toBe('CAPTION');
          });
          it('first table should have a thead after the caption', () => {
            expect(firstTable.children[1].tagName).toBe('THEAD');
          });
          it('first table should have only header cells in the header rows', () => {
            expect(firstTable.querySelector('thead > td')).toBeFalsy();
          });
          it('first table should have only header cells on the left', () => {
            expect(firstTable.querySelector('tbody > tr > td:first-child')).toBeFalsy();
          });
        });
      });
      </code></pre>
      <p>There are four tests (calls to the <code>it()</code> function. They test for the table having:</p>
      <ul>
        <li>its title in a <code>caption</code> element</li>
        <li>its column headers in a <code>thead</code> element</li>
        <li>all the column headers being coded as headers</li>
        <li>all the other left-most cells being coded as row headers</li>
      </ul>
      <p>If you run the tests, the output will show:</p>
      <pre><code>
      good body
        v first table should have a caption (80 ms)
        v first table should have a thead after the caption (21 ms)
        v first table should have only header cells in the header rows (19 ms)
        v first table should have only header cells on the left (23 ms)
      bad body
        × first table should have a caption (30 ms)
        × first table should have a thead after the caption (18 ms)
        v first table should have only header cells in the header rows (20 ms)
        × first table should have only header cells on the left (24 ms)
      </code></pre>
      <p>The good example passes all the tests. The bad example passes the third test <q>vacuously</q>, because it doesn&rsquo;t have any <code>thead</code> element and therefore has no <code>td</code> elements inside a <code>thead</code> element. Otherwise, though, the bad example fails all the tests.</p>
      <p>These are tests for <strong>formal</strong> accessibility. Testing for <strong>practical</strong> accessibility is more complex. Some testing for practical accessibility can be automated; a test can simulate a user and report defective interactions. But such testing is still primitive. Most practical-accessibility testing is labor-intensive, non-automated work. For example, the tester turns on a screen reader and navigates with a keyboard to and within your table, listening to what the screen reader announces.</p>
      <p>Because of the time and expense of testing for practical accessibility, it is efficient for you to test your tables thoroughly for formal accessibility as part of your normal testing discipline. After they pass your automated tests, then they are ready for non-automated tests of practical accessibility.</p>
    </section>
  </body>
</html>

==> workshops/ex/testing/jsdom/bugindex.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <title>Outline bug</title>
  </head>
  <body>
    <p>I am outlined.</p>
    <script>
      const para = document.querySelector('p');
      para.style.outline = '3px solid red';
      console.log(`Outline from shorthand: ${para.style.outline}`);
      console.log(`Outline width from shorthand: ${para.style.outlineWidth}`);
      let paraStyle = window.getComputedStyle(para);
      console.log(`Computed outline width from shorthand: ${paraStyle.outlineWidth}`);para.style.outlineWidth = '5px';
      console.log(`Outline from longhand: ${para.style.outline}`);
      console.log(`Outline width from longhand: ${para.style.outlineWidth}`);
      paraStyle = window.getComputedStyle(para);
      console.log(`Computed outline width from longhand: ${paraStyle.outlineWidth}`);    </script>
  </body>
</html>

==> workshops/ex/testing/jsdom/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <script src="script.js"></script>
    <link rel="stylesheet" href="style.css">
    <title>Original Title</title>
  </head>
  <body>
    <p>Original body text</p>
  </body>
</html>
==> workshops/ex/dialogs/examples/bad/buggy/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: rgb(255, 255, 255);
  background-color: rgb(0, 0, 0);
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: rgb(255, 255, 255);
  background-color: rgb(150, 21, 29);
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: rgb(150, 21, 29);
}
button:hover, label:hover > input {
  color: rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: rgba(243, 214, 102, 0.7);
  padding: 1rem;
  border: solid 0.5rem rgba(102, 102, 102, 0.5);
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: rgb(0, 0, 255);
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 5vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
nav.banner {
  background-color: rgb(150, 21, 29);
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: rgb(255, 255, 255);
}
nav.banner > ul > li > a:focus {
  outline-color: rgb(255, 255, 255);
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 5vh;
  left: 5vw;
  height: 90%;
  width: 90%;
  background-color: rgba(0, 0, 0, 0.2);
}

==> workshops/ex/dialogs/examples/bad/dismiss/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: rgb(255, 255, 255);
  background-color: rgb(0, 0, 0);
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: rgb(255, 255, 255);
  background-color: rgb(150, 21, 29);
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: rgb(150, 21, 29);
}
button:hover, label:hover > input {
  color: rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: rgba(243, 214, 102, 0.9);
  padding: 1rem;
  border: solid 0.5rem rgba(102, 102, 102, 0.5);
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: rgb(0, 0, 255);
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
nav.banner {
  background-color: rgb(150, 21, 29);
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: rgb(255, 255, 255);
}
nav.banner > ul > li > a:focus {
  outline-color: rgb(255, 255, 255);
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.2);
}

==> workshops/ex/dialogs/examples/bad/leak/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: rgb(255, 255, 255);
  background-color: rgb(0, 0, 0);
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: rgb(255, 255, 255);
  background-color: rgb(150, 21, 29);
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: rgb(150, 21, 29);
}
button:hover, label:hover > input {
  color: rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: rgba(243, 214, 102, 0.9);
  padding: 1rem;
  border: solid 0.5rem rgba(102, 102, 102, 0.5);
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: rgb(0, 0, 255);
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
nav.banner {
  background-color: rgb(150, 21, 29);
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: rgb(255, 255, 255);
}
nav.banner > ul > li > a:focus {
  outline-color: rgb(255, 255, 255);
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/dialogs/examples/bad/vague/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: rgb(255, 255, 255);
  background-color: rgb(0, 0, 0);
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: rgb(255, 255, 255);
  background-color: rgb(150, 21, 29);
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: rgb(150, 21, 29);
}
button:hover, label:hover > input {
  color: rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: rgba(243, 214, 102, 0.9);
  padding: 1rem;
  border: solid 0.5rem rgba(102, 102, 102, 0.5);
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: rgb(0, 0, 255);
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
nav.banner {
  background-color: rgb(150, 21, 29);
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: rgb(255, 255, 255);
}
nav.banner > ul > li > a:focus {
  outline-color: rgb(255, 255, 255);
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.2);
}

==> workshops/ex/dialogs/examples/good/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: rgb(255, 255, 255);
  background-color: rgb(0, 0, 0);
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: rgb(255, 255, 255);
  background-color: rgb(150, 21, 29);
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: rgb(150, 21, 29);
}
button:hover, label:hover > input {
  color: rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: rgba(243, 214, 102, 0.9);
  padding: 1rem;
  border: solid 0.5rem rgba(102, 102, 102, 0.5);
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: rgb(0, 0, 255);
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
nav.banner {
  background-color: rgb(150, 21, 29);
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: rgb(255, 255, 255);
}
nav.banner > ul > li > a:focus {
  outline-color: rgb(255, 255, 255);
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.2);
}

==> workshops/ex/dialogs/examples/native/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: rgb(255, 255, 255);
  background-color: rgb(0, 0, 0);
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: rgb(255, 255, 255);
  background-color: rgb(150, 21, 29);
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: rgb(150, 21, 29);
}
button:hover, label:hover > input {
  color: rgb(0, 0, 0);
  background-color: rgb(255, 255, 255);
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: rgb(0, 0, 255);
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
nav.banner {
  background-color: rgb(150, 21, 29);
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: rgb(255, 255, 255);
}
nav.banner > ul > li > a:focus {
  outline-color: rgb(255, 255, 255);
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/keyboardnav/basic/bad/button/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
[role=button] {
  height: 1.5rem;
  padding: 0.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
[role=button]:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
[role=button]:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
[role=button].clicked {
  border: solid #000 0.1rem;
  color: #fff;
  background-color: #333;
}

==> workshops/ex/keyboardnav/basic/bad/efficiency/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/keyboardnav/basic/bad/link/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span, span[role=link]:hover {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a, nav.banner > ul > li > span[role=link] {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus, nav.banner > ul > li > span[role=link] {
  outline-color: #fff;
}
nav.banner > ul > li > span[role=link] {
  text-decoration: underline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
span[role=link]:hover {
  cursor: pointer;
}

==> workshops/ex/keyboardnav/basic/bad/predictability/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.skip {
  position: absolute;
  top: 1vw
}

==> workshops/ex/keyboardnav/basic/bad/radio/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/keyboardnav/basic/bad/reachability/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span, span[role=link]:hover {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a, nav.banner > ul > li > span[role=link] {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus, nav.banner > ul > li > span[role=link] {
  outline-color: #fff;
}
nav.banner > ul > li > span[role=link] {
  text-decoration: underline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
span[role=link]:hover {
  cursor: pointer;
}

==> workshops/ex/keyboardnav/basic/bad/reachability-old/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/keyboardnav/basic/bad/visibility/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline: none;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/keyboardnav/basic/good/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}

==> workshops/ex/keyboardnav/more/dialog/bad/dismiss/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: #f3d666e8;
  padding: 1rem;
  border: solid 0.5rem #66666699;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: #00000033;
}

==> workshops/ex/keyboardnav/more/dialog/bad/leak/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: #f3d666e8;
  padding: 1rem;
  border: solid 0.5rem #66666699;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: #00000033;
}

==> workshops/ex/keyboardnav/more/dialog/good/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
.corner{
  position: absolute;
  min-width: 0;
  max-width: 50%;
  right: 0.5rem;
  top: 0.5rem;
}
.covert {
  display: none;
}
.dialog {
  transition: min-width 1s ease, max-width 1s ease, top 1s ease, right 1s ease;
  background-color: #f3d666e8;
  padding: 1rem;
  border: solid 0.5rem #66666699;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
.middle {
  position: absolute;
  min-width: 80vw;
  max-width: 80vw;
  max-height: 80vh;
  right: 10vw;
  top: 50%;
  transform: translateY(-50%);
  overflow: scroll;
}
legend {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 700;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
.overt {
  display: block;
}
.overt-inline {
  display: inline;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.shaded {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  background-color: #00000033;
}

==> workshops/ex/keyboardnav/more/tablist/bad/style.css <==
@media (min-width: 0) {
  li[role=tab] {
    writing-mode: vertical-rl;
  }
}
@media (min-width: 25rem) {
  li[role=tab] {
    writing-mode: horizontal-tb;
  }
}
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
li[role=tab] {
  margin: 0 0.25rem;
  padding: 0.25rem 0.25rem 1rem 0.25rem;
  border: solid 3px #a3a3a3;
  border-radius: 0.5rem 0.5rem 0 0;
  line-height: 100%;
  cursor: pointer;
  font-weight: bold;
}
li[role=tab][aria-selected=false] {
  height: 7.5rem;
}
li[role=tab][aria-selected=true] {
  height: 8rem;
  padding-bottom: 1.5rem;
  border-bottom-width: 0;
  background-color: #dce199;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
p.covert {
  display: none;
}
p.overt {
  display: block;
}
p[role=tabpanel] {
  margin-top: 0 !important;
  padding: 0.25rem;
  background-color: #dce199;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
ul[role=tablist] {
  display: flex;
  margin-bottom: 0;
  padding-bottom: 0;
  padding-left: 0;
  list-style-type: none;
}

==> workshops/ex/keyboardnav/more/tablist/good/style.css <==
@media (min-width: 0) {
  li[role=tab] {
    writing-mode: vertical-rl;
  }
}
@media (min-width: 25rem) {
  li[role=tab] {
    writing-mode: horizontal-tb;
  }
}
* {
  box-sizing: border-box;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
li[role=tab] {
  margin: 0 0.25rem;
  padding: 0.25rem 0.25rem 1rem 0.25rem;
  border: solid 3px #a3a3a3;
  border-radius: 0.5rem 0.5rem 0 0;
  line-height: 100%;
  cursor: pointer;
  font-weight: bold;
}
li[role=tab][aria-selected=false] {
  height: 7.5rem;
}
li[role=tab][aria-selected=true] {
  height: 8rem;
  padding-bottom: 1.5rem;
  border-bottom-width: 0;
  background-color: #dce199;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
p.covert {
  display: none;
}
p.overt {
  display: block;
}
p[role=tabpanel] {
  margin-top: 0 !important;
  padding: 0.25rem;
  background-color: #dce199;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
ul[role=tablist] {
  display: flex;
  margin-bottom: 0;
  padding-bottom: 0;
  padding-left: 0;
  list-style-type: none;
}

==> workshops/ex/spas/good/style.css <==
* {
  box-sizing: border-box;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
a:hover, label:hover > span {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  min-height: 44px;
  min-width: 44px;
  margin: 0.5rem 0;
  border-style: solid;
  border-width: 0.1rem;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.covert {
  display: none;
}
.grid2col {
  display: grid;
  grid-template-columns: auto auto;
  align-items: center;
}
.gridleft {
  grid-column: 1;
  margin-right: 0.5rem;
}
.gridright {
  grid-column: 2;
}
.gridright.even {
  background-color: #eed;
}
.gridright.odd {
  background-color: #dee;
}
ul {
  padding: 0;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.question ul > li {
  list-style-type: none;
}
==> workshops/ex/spas/piertopier/style.css <==
* {
  box-sizing: border-box;
}
*:focus {
  outline: solid 3px mediumblue;
  outline-offset: 2px;
}
body {
  max-width: 740px;
  margin: 0 auto;
  padding: 1rem 2rem;
}
button {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 0.75rem;
  font-weight: bold;
  color: white;
  background-color: #96151d;
}
button, input, select {
  font-size: 1rem;
  font-family: serif;
}
button.active, button:active {
  color: white;
  background-color: #69923a !important;
}
button:hover:not(.active):not(:active) {
  color: black;
  background-color: pink;
}
fieldset {
  margin-top: 1rem;
}
fieldset > p {
  margin: 0;
}
fieldset, label, .subtitle {
  font-weight: bold;
}
h1 {
  margin-bottom: 0;
  text-align: center;
}
html {
  font-size: 20px;
  font-family: serif;
}
input:not([type=radio]), select {
  display: block;
}
label:hover {
  background-color: #c2c2c2;
}
p {
  line-height: 150%;
}
p {
  margin: 0.5rem 0;
}
.flex {
  display: flex;
  flex-direction: column;
  align-items: center;
}
.routelinks > p > a {
  display: block;
  margin: 0.5rem;
  padding: 1rem;
  font-size: 1.5rem;
  background-color: #efede7;
  text-align: center;
  font-weight: bold;
}
section.covert {
  display: none;
}
.subtitle {
  margin-top: 0;
  text-align: center;
  font-style: italic;
}

==> workshops/ex/tables/goodbad/stylebad.css <==
h2 {
  margin-bottom: 0.5rem;
  text-align: center;
  font-size: 1.5rem;
}
td:first-child {
  font-weight: bold;
}
.head td {
  text-align: center;
  font-weight: bold;
}
.head th, .head td {
  border-bottom-width: 5px;
}
==> workshops/ex/tables/obsolete/bad/style-complex.css <==
td:nth-child(1), tr:nth-child(1), tr:nth-child(2) {
  font-weight: bold;
}

==> workshops/ex/tables/obsolete/bad/style-header.css <==
tr:not(.note) > td:nth-child(1), thead td {
  text-align: center;
  font-weight: bold;
}

==> workshops/ex/tables/obsolete/style.css <==
@import '../../style.css';
caption {
  margin: 0 0 1.25rem 0;
  font-size: 1.5rem;
  font-weight: bold;
}
h1, h2, tbody.wide td {
  text-align: center;
}
html {
  font-size: 20px;
}
table {
  margin: 0 auto;
  border-collapse: collapse;
}
tbody th:nth-child(1):not([colspan]), tbody.wide th {
  text-align: left;
}
td, th {
  padding: 0.25rem 0.5rem;
  border: solid gray 1px;
}

==> workshops/ex/tables/obsolete/style-complex.css <==
.tbodyhead {
  font-size: 1.25rem;
  font-style: italic;
}
td:nth-child(2), td:nth-child(3), td:nth-child(4), td:nth-child(5) {
  text-align: center;
}

==> workshops/ex/tables/obsolete/style-genericwide.css <==
* {
  box-sizing: border-box;
}
body {
  margin: 3rem;
  font-size: 1.25rem;
}
caption {
  margin-bottom: 0.5rem;
  font-size: 1.5rem;
  font-weight: bold;
}
.rank0 {
  font-size: 1.5rem;
}
.rank1 {
  font-size: 1.3rem;
  font-style: italic;
}
.rank2 {
  font-size: 1.1rem;
}
table {
  border-collapse: collapse;
}
td {
  text-align: center;
}
td, th {
  padding: 0.2rem 0.4rem;
  border: 1px solid gray;
}
th[colspan='6'] {
  text-align: left;
}

==> workshops/ex/tables/obsolete/style-header.css <==
.agg > td:nth-child(2),
.agg > td:nth-child(3),
tbody td:nth-child(3),
tbody td:nth-child(4) {
  text-align: center;
}
.agg > td:nth-child(4),
.agg > td:nth-child(5),
tbody td:nth-child(5),
tbody td:nth-child(6) {
  text-align: right;
}
.note > td {
  border: none;
  padding-top: 1rem;
  text-align: center;
}
tbody > tr > th:not([colspan]) {
  text-align: left;
}

==> workshops/ex/tables/style.css <==
* {
  box-sizing: border-box;
}
body {
  margin: 3rem;
  font-size: 1.25rem;
}
caption {
  margin-bottom: 0.5rem;
  font-size: 1.5rem;
  font-weight: bold;
}
dl {
  margin: 0.5rem 0 0.5rem 2rem;
  padding: 0.5rem;
  border: 1px gray solid;
  display: inline-block;
}
dt {
  font-size: 1rem;
  font-weight: 700;
}
h1 {
  text-align: center;
}
h3, h4, h5 {
  margin: 0.5rem auto;
}
h3 {
  font-style: italic;
}
.multitable caption {
  margin-bottom: 0;
  padding: 1rem;
}
.multitable caption, .multitable table {
  background-color: #ddd;
}
.multitable table {
  margin-left: 2rem;
}
.numeric td {
  text-align: right;
}
.rowgroup0 {
  font-size: 1.5rem;
  font-style: italic;
}
.rowgroup1 {
  padding-left: 1rem;
  font-size: 1.3rem;
}
.rowgroup2 {
  padding-left: 2rem;
  font-size: 1.1rem;
}
table {
  margin: 0 auto;
  border-collapse: collapse;
}
thead + tbody > tr:first-child > th, thead + tbody > tr:first-child > td {
  border-top-width: 5px;
}
tbody > tr:last-child > th, tbody > tr:last-child > td {
  border-bottom-width: 5px;
}
tbody th {
  text-align: left;
}
td, th {
  padding: 0.2rem 0.4rem;
  border: 1px solid gray;
}
.textlist h4 {
  margin-left: 0.5rem;
}
.textlist h5 {
  margin-left: 1rem;
}
.textlist p {
  margin: 0.2rem 0 0.2rem 2rem;
}

==> workshops/ex/testing/goodbad/bad/style.css <==
* {
  box-sizing: border-box;
}
a.button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  padding: 0.2rem 0.3rem;
  color: #fff;
  text-decoration: none;
  background-color: #96151d;
}
a.button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
  color: black;
  background-color: white;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
.box {
  margin-top: 2.1rem;
  padding: 0.7rem;
  border: 2px solid;
}
.boxTitle {
  margin: -1.5rem auto 1.5rem auto;
}
.boxTitle > span {
  background-color: white;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
.colHeaders > td {
  text-align: center;
  font-weight: bold;
}
fieldset {
  margin-top: 1.5rem;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
p.button {
  margin-top: 1.25rem;
}
.pageTitle {
  margin: 0.67em auto;
  text-align: center;
  font-size: xx-large;
  font-weight: bold;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
.data > td:first-child {
  text-align: left;
  font-weight: bold;
}
.data td:nth-child(3), .data td:nth-child(4) {
  text-align: right;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
.sectionTitle {
  margin: 0.83em auto;
  font-size: x-large;
  font-weight: bold;
}
table {
  margin: 0 auto;
  border-collapse: collapse;
}
.tableTitle {
  margin-bottom: 0;
  padding: 0.5rem;
  text-align: center;
  font-weight: bold;
  background-color: #ddd;
  border-style: none;
}
td {
  padding: 0.2rem 0.4rem;
  border: 1px solid gray;
}

==> workshops/ex/testing/goodbad/good/style.css <==
* {
  box-sizing: border-box;
}
a:hover, label:hover {
  color: #fff;
  background-color: #000;
}
body {
  max-width: 40rem;
  padding: 2vw 4vw
}
button {
  height: 1.5rem;
  border: none;
  border-radius: 0.5rem;
  color: #fff;
  background-color: #96151d;
}
button:hover {
  border-style: solid;
  border-width: 0.1rem;
  border-color: #96151d;
}
button:hover, label:hover > input {
  color: #000;
  background-color: #fff;
}
.center {
  text-align: center;
}
fieldset {
  margin-top: 1.5rem;
}
*:focus {
  outline-width: 0.2rem;
  outline-offset: 0.2rem;
  outline-style: solid;
  outline-color: #00f;
}
h1 {
  text-align: center;
}
nav.banner {
  background-color: #96151d;
}
nav.banner > ul {
  padding: 1rem;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
}
nav.banner > ul > li {
  margin: 0 0.5rem;
  list-style-type: none;
}
nav.banner > ul > li > a {
  font-weight: 600;
  color: #fff;
}
nav.banner > ul > li > a:focus {
  outline-color: #fff;
}
.num3 td:nth-child(3) {
  text-align: right;
}
.num4 td:nth-child(4) {
  text-align: right;
}
q {
  quotes: '“' '”';
}
q::after {
  content: close-quote;
}
q::before {
  content: open-quote;
}
table {
  margin: 0 auto;
  border-collapse: collapse;
}
table caption {
  margin-bottom: 0;
  padding: 0.5rem;
  font-weight: bold;
  background-color: #ddd;
}
tbody th {
  text-align: left;
}
td, th {
  padding: 0.2rem 0.4rem;
  border: 1px solid gray;
}

==> workshops/ex/testing/jsdom/style.css <==
p {
  font-weight: 700;
  border: 3px solid yellow;
}
==> workshops/ex/dialogs/examples/bad/buggy/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Remove any confirmation message.
const removeAck = () => {
  const ackContainer = document.getElementById('ack');
  if (ackContainer.textContent) {
    ackContainer.textContent= '';
  }
};
// Launch a confirmation dialog when the form is submitted.
const submissionHandler = event => {
  event.preventDefault();
  removeAck();
  document.getElementById('shader0').classList.replace('clear', 'shaded');
  document.getElementById('joint-owner').textContent =
    document.querySelector('#name').value;
  document.getElementById('ownership').textContent = Array.from(
    document.querySelectorAll('input[type=radio]')
  ).filter(input => input.checked)[0].nextElementSibling.textContent;
  document.getElementById('dialog0').classList.replace('covert', 'overt');
  document.getElementById('form-main').setAttribute('aria-expanded', 'true');
  document.getElementById('hide').focus();
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  document.getElementById('dialog0').classList.replace('overt', 'covert');
  document.getElementById('form-main').setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  document.getElementById('ack').innerHTML = messages[
    isAborted ? 'noack' : 'yesack'
  ];
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hideButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'false');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    showButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'true');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    hideButton.focus();
  }
};
// Handle tab and escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (['Tab', 'Escape'].includes(key)) {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      // Dismiss it on ESC.
      if (key === 'Escape') {
        console.log('Key was Escape');
        dialogCloseHandler(false);
      }
      // Navigation among its displayed buttons on TAB.
      else if (key === 'Tab') {
        const focalElement = document.activeElement;
        const dialogButtons = Array.from(dialog.querySelectorAll(
          'button.overt-inline, fieldset.overt button'
        ));
        const lastDialogButton = dialogButtons[dialogButtons.length - 1];
        // event.getModifierState('Shift') should be equivalent, but fails.
        const isShifted = event.shiftKey;
        if (focalElement === dialogButtons[0] && isShifted) {
          event.preventDefault();
          lastDialogButton.focus();
        }
        else if (
          focalElement === lastDialogButton && ! isShifted
        ) {
          event.preventDefault();
          dialogButtons[0].focus();
        }
      }
    }
  }
};
/*
=== After-page-load listeners ===
*/
// Listeners for user actions
const createListeners = () => {
  // Process a form submission.
  document.getElementById('form-main').addEventListener(
    'submit', submissionHandler
  );
  // Process a button-actuated dialog dismissal.
  Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  ).forEach(yesNoButton => {
    yesNoButton.addEventListener('click', () => {
      dialogCloseHandler(yesNoButton.classList.contains('abort'));
    });
  });
  // Handle TAB and ESC keys when the dialog is open.
  document.addEventListener('keydown', keyHandler);
  // Handle minimization and maximization of the dialog.
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  // When the user changes any input, remove the acknowledgement.
  Array.from(
    document.querySelectorAll('input[type=radio]')
  ).forEach(radioButton => {
    radioButton.addEventListener('change', removeAck);
  });
  document.getElementById('name').addEventListener('input', removeAck);
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/dialogs/examples/bad/dismiss/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Remove any confirmation message.
const removeAck = () => {
  const ackContainer = document.getElementById('ack');
  if (ackContainer.textContent) {
    ackContainer.textContent= '';
  }
};
// Launch a confirmation dialog when the form is submitted.
const submissionHandler = event => {
  event.preventDefault();
  removeAck();
  document.getElementById('shader0').classList.replace('clear', 'shaded');
  document.getElementById('joint-owner').textContent =
    document.querySelector('#name').value;
  document.getElementById('ownership').textContent = Array.from(
    document.querySelectorAll('input[type=radio]')
  ).filter(input => input.checked)[0].nextElementSibling.textContent;
  document.getElementById('dialog0').classList.replace('covert', 'overt');
  document.getElementById('form-main').setAttribute('aria-expanded', 'true');
  document.getElementById('hide').focus();
};
// Acknowledge a dialog decision.
const dialogCloseHandler = isAborted => {
  document.getElementById('ack').innerHTML = messages[
    isAborted ? 'noack' : 'yesack'
  ];
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hideButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'false');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    showButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'true');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    hideButton.focus();
  }
};
// Handle tab key presses.
const keyHandler = event => {
  const key = event.key;
  if (key === 'Tab') {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      if (key === 'Tab') {
        const focalElement = document.activeElement;
        const dialogButtons = Array.from(dialog.querySelectorAll(
          'button.overt-inline, fieldset.overt button'
        ));
        const lastDialogButton = dialogButtons[dialogButtons.length - 1];
        // event.getModifierState('Shift') should be equivalent, but fails.
        const isShifted = event.shiftKey;
        if (focalElement === dialogButtons[0] && isShifted) {
          event.preventDefault();
          lastDialogButton.focus();
        }
        else if (
          focalElement === lastDialogButton && ! isShifted
        ) {
          event.preventDefault();
          dialogButtons[0].focus();
        }
      }
    }
  }
};
/*
=== After-page-load listeners ===
*/
// Listeners for user actions
const createListeners = () => {
  // Process a form submission.
  document.getElementById('form-main').addEventListener(
    'submit', submissionHandler
  );
  // Process a button-actuated dialog dismissal.
  Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  ).forEach(yesNoButton => {
    yesNoButton.addEventListener('click', () => {
      dialogCloseHandler(yesNoButton.classList.contains('abort'));
    });
  });
  // Handle tab key when the dialog is open.
  document.addEventListener('keydown', keyHandler);
  // Handle minimization and maximization of the dialog.
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  // When the user changes any input, remove the acknowledgement.
  Array.from(
    document.querySelectorAll('input[type=radio]')
  ).forEach(radioButton => {
    radioButton.addEventListener('change', removeAck);
  });
  document.getElementById('name').addEventListener('input', removeAck);
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/dialogs/examples/bad/leak/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Make implicit submission activate the Submit button.
const implicitSubmissionHandler = event => {
  event.preventDefault();
  document.querySelector('#submit').dispatchEvent(new MouseEvent('click'));
};
// Remove confirmation message.
const removeAck = () => {
  const ackElement = document.getElementById('ack');
  ackElement.textContent = '';
};
// Launch a confirmation dialog when the form submission button is activated.
const submissionHandler = event => {
  event.preventDefault();
  removeAck();
  document.getElementById('joint-owner').textContent =
    document.querySelector('#name').value;
  document.getElementById('ownership').textContent = Array.from(
    document.querySelectorAll('input[type=radio]')
  ).filter(input => input.checked)[0].nextElementSibling.textContent;
  document.getElementById('dialog0').classList.replace('covert', 'overt');
  document.getElementById('form-main').setAttribute('aria-expanded', 'true');
  document.getElementById('hide').focus();
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  const dialog = document.getElementById('dialog0');
  dialog.classList.replace('overt', 'covert');
  dialog.setAttribute('aria-expanded', 'false');
  const ackElement = document.getElementById('ack');
  ackElement.innerHTML = messages[isAborted ? 'noack' : 'yesack'];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    dialog.setAttribute('aria-expanded', 'false');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    dialog.setAttribute('aria-expanded', 'true');
    hideButton.focus();
  }
};
// Handle escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (key === 'Escape') {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      dialogCloseHandler(true);
    }
  }
};
// Handle obsolescence of confirmation message.
const obsoleteAckHandler = () => {
  removeAck();
};
/*
=== After-page-load listeners ===
*/
// Listeners for user actions
const createListeners = () => {
  // Process a form submission.
  document.getElementById('form-main').addEventListener(
    'submit', submissionHandler
  );
  // Process a button-actuated dialog dismissal.
  Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  ).forEach(yesNoButton => {
    yesNoButton.addEventListener('click', () => {
      dialogCloseHandler(yesNoButton.classList.contains('abort'));
    });
  });
  // Handle escape key when the dialog is open.
  document.addEventListener('keydown', keyHandler);
  // Handle minimization and maximization of the dialog.
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  // When the user changes any input, remove the acknowledgement.
  Array.from(
    document.querySelectorAll('input[type=radio]')
  ).forEach(radioButton => {
    radioButton.addEventListener('change', removeAck);
  });
  document.getElementById('name').addEventListener('input', removeAck);
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/dialogs/examples/bad/vague/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Remove any confirmation message.
const removeAck = () => {
  const ackContainer = document.getElementById('ack');
  if (ackContainer.textContent) {
    ackContainer.textContent= '';
  }
};
// Launch a confirmation dialog when the form is submitted.
const submissionHandler = event => {
  event.preventDefault();
  removeAck();
  document.getElementById('shader0').classList.replace('clear', 'shaded');
  document.getElementById('dialog0').classList.replace('covert', 'overt');
  document.getElementById('form-main').setAttribute('aria-expanded', 'true');
  document.getElementById('hide').focus();
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  document.getElementById('dialog0').classList.replace('overt', 'covert');
  document.getElementById('form-main').setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  document.getElementById('ack').innerHTML = messages[
    isAborted ? 'noack' : 'yesack'
  ];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hideButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'false');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    showButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'true');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    hideButton.focus();
  }
};
// Handle tab and escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (['Tab', 'Escape'].includes(key)) {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      // Dismiss it on ESC.
      if (key === 'Escape') {
        dialogCloseHandler(true);
      }
      // Navigation among its displayed buttons on TAB.
      else if (key === 'Tab') {
        const focalElement = document.activeElement;
        const dialogButtons = Array.from(dialog.querySelectorAll(
          'button.overt-inline, fieldset.overt button'
        ));
        const lastDialogButton = dialogButtons[dialogButtons.length - 1];
        // event.getModifierState('Shift') should be equivalent, but fails.
        const isShifted = event.shiftKey;
        if (focalElement === dialogButtons[0] && isShifted) {
          event.preventDefault();
          lastDialogButton.focus();
        }
        else if (
          focalElement === lastDialogButton && ! isShifted
        ) {
          event.preventDefault();
          dialogButtons[0].focus();
        }
      }
    }
  }
};
/*
=== After-page-load listeners ===
*/
// Listeners for user actions
const createListeners = () => {
  // Process a form submission.
  document.getElementById('form-main').addEventListener(
    'submit', submissionHandler
  );
  // Process a button-actuated dialog dismissal.
  Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  ).forEach(yesNoButton => {
    yesNoButton.addEventListener('click', () => {
      dialogCloseHandler(yesNoButton.classList.contains('abort'));
    });
  });
  // Handle TAB and ESC keys when the dialog is open.
  document.addEventListener('keydown', keyHandler);
  // Handle minimization and maximization of the dialog.
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  // When the user changes any input, remove the acknowledgement.
  Array.from(
    document.querySelectorAll('input[type=radio]')
  ).forEach(radioButton => {
    radioButton.addEventListener('change', removeAck);
  });
  document.getElementById('name').addEventListener('input', removeAck);
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/dialogs/examples/good/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Remove any confirmation message.
const removeAck = () => {
  const ackContainer = document.getElementById('ack');
  if (ackContainer.textContent) {
    ackContainer.textContent= '';
  }
};
// Launch a confirmation dialog when the form is submitted.
const submissionHandler = event => {
  event.preventDefault();
  removeAck();
  document.getElementById('shader0').classList.replace('clear', 'shaded');
  document.getElementById('joint-owner').textContent =
    document.querySelector('#name').value;
  document.getElementById('ownership').textContent = Array.from(
    document.querySelectorAll('input[type=radio]')
  ).filter(input => input.checked)[0].nextElementSibling.textContent;
  document.getElementById('dialog0').classList.replace('covert', 'overt');
  document.getElementById('form-main').setAttribute('aria-expanded', 'true');
  document.getElementById('hide').focus();
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  document.getElementById('dialog0').classList.replace('overt', 'covert');
  document.getElementById('form-main').setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  document.getElementById('ack').innerHTML = messages[
    isAborted ? 'noack' : 'yesack'
  ];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hideButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'false');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    showButton.classList.replace('overt-inline', 'covert');
    [showButton, hideButton].forEach(button => {
      button.setAttribute('aria-expanded', 'true');
    });
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    hideButton.focus();
  }
};
// Handle tab and escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (['Tab', 'Escape'].includes(key)) {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      // Dismiss it on ESC.
      if (key === 'Escape') {
        dialogCloseHandler(true);
      }
      // Navigation among its displayed buttons on TAB.
      else if (key === 'Tab') {
        const focalElement = document.activeElement;
        const dialogButtons = Array.from(dialog.querySelectorAll(
          'button.overt-inline, fieldset.overt button'
        ));
        const lastDialogButton = dialogButtons[dialogButtons.length - 1];
        // event.getModifierState('Shift') should be equivalent, but fails.
        const isShifted = event.shiftKey;
        if (focalElement === dialogButtons[0] && isShifted) {
          event.preventDefault();
          lastDialogButton.focus();
        }
        else if (
          focalElement === lastDialogButton && ! isShifted
        ) {
          event.preventDefault();
          dialogButtons[0].focus();
        }
      }
    }
  }
};
/*
=== After-page-load listeners ===
*/
// Listeners for user actions
const createListeners = () => {
  // Process a form submission.
  document.getElementById('form-main').addEventListener(
    'submit', submissionHandler
  );
  // Process a button-actuated dialog dismissal.
  Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  ).forEach(yesNoButton => {
    yesNoButton.addEventListener('click', () => {
      dialogCloseHandler(yesNoButton.classList.contains('abort'));
    });
  });
  // Handle TAB and ESC keys when the dialog is open.
  document.addEventListener('keydown', keyHandler);
  // Handle minimization and maximization of the dialog.
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  // When the user changes any input, remove the acknowledgement.
  Array.from(
    document.querySelectorAll('input[type=radio]')
  ).forEach(radioButton => {
    radioButton.addEventListener('change', removeAck);
  });
  document.getElementById('name').addEventListener('input', removeAck);
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/dialogs/examples/jsdomassert.js <==
'use strict';
const {JSDOM} = require('jsdom');
const path = require('path');
const options = {
  resources: 'usable',
  runScripts: 'dangerously'
};
const testCounts = [0, 0];
const results = () => {
  console.log(
    `Test results: ${testCounts[0]} passed, ${testCounts[1]} FAILED`
  );
}
const test = {
  is: (aString, aValue, b) => {
    const ok = aValue === b;
    console.log(
      ok ?
      `Passed: ${aString} is ${b}` :
      `FAILED: ${aString} should be ${b} but is ${aValue}`
    );
    testCounts[ok ? 0 : 1]++;
  },
  isNot: (aString, aValue, b) => {
    const ok = aValue !== b;
    console.log(
      ok ?
      `Passed: ${aString} is not ${b}` :
      `FAILED: ${aString} should not be ${b} but is`
    );
    testCounts[ok ? 0 : 1]++;
  }
};

JSDOM.fromFile(
  path.resolve(__dirname, 'good', 'index.html'), options
).then(dom => {
  const win = dom.window;
  const doc = win.document;
  const dialog = doc.getElementById('dialog0');
  let dialogStyles = win.getComputedStyle(dialog);
  test.is('Dialog padding before window loaded', dialogStyles.padding, '');
  test.is(
    'Dialog top padding before window loaded', dialogStyles.paddingTop, ''
  );
  test.is(
    'Dialog border color before window loaded', dialogStyles.borderColor, ''
  );
  win.onload = (() => {
    dialogStyles = win.getComputedStyle(dialog);
    test.is(
      'Dialog padding after window loaded', dialogStyles.padding, '1rem'
    );
    test.is(
      'Dialog top padding after window loaded',
      dialogStyles.paddingTop,
      '1rem'
    );
    test.is(
      'Dialog border color after window loaded',
      dialogStyles.borderColor,
      '#66666699'
    );
    const form = doc.getElementById('form-main');
    const nameInput = doc.getElementById('name');
    nameInput.value = 'Jane Doe';
    const shader = doc.getElementById('shader0');
    test.is('Before form submitted, shader classes', shader.className, 'clear');
    form.submit();
    test.is('After form submitted, shader classes', shader.className, 'shaded');
    test.is(
      'After form submitted, dialog alert body',
      doc.getElementById('dialog0-label-body').textContent,
      'You have named Jane Doe as the joint owner. You have specified Tenancy in common as the form of ownership. Do you confirm this decision?'
    );
    let minDialogWidth = win.getComputedStyle(dialog).minWidth;
    test.is('Dialog min width after form submitted', minDialogWidth, '80vw');
    doc.getElementById('hide').click();
    minDialogWidth = win.getComputedStyle(dialog).minWidth;
    test.is('Dialog min width when minimized', minDialogWidth, '0');
    results();
  });
});

==> workshops/ex/dialogs/examples/jsdomtest.js <==
'use strict';
const {JSDOM} = require('jsdom');
const path = require('path');
const options = {
  resources: 'usable',
  runScripts: 'dangerously'
};
JSDOM.fromFile(
  path.resolve(__dirname, 'good', 'index.html'), options
).then(dom => {
  const win = dom.window;
  const doc = win.document;
  const dialog = doc.getElementById('dialog0');
  let dialogStyles = win.getComputedStyle(dialog);
  console.log(`Dialog padding: ${dialogStyles.padding}`);
  console.log(`Dialog top padding: ${dialogStyles.paddingTop}`);
  console.log(`Dialog border color: ${dialogStyles.borderColor}`);
  win.onload = (() => {
    dialogStyles = win.getComputedStyle(dialog);
    console.log(`Dialog padding after load: ${dialogStyles.padding}`);
    console.log(`Dialog top padding after load: ${dialogStyles.paddingTop}`);
    console.log(`Dialog border color after load: ${dialogStyles.borderColor}`);
    const form = doc.getElementById('form-main');
    const nameInput = doc.getElementById('name');
    nameInput.value = 'Jane Doe';
    const shader = doc.getElementById('shader0');
    console.log(`Before form submitted, shader classes are ${shader.className}`);
    form.submit();
    console.log(`After form submitted, shader classes are ${shader.className}`);
    console.log(`After form submitted, dialog alert body is ${
      doc.getElementById('dialog0-label-body').textContent
    }`);
    let minDialogWidth = win.getComputedStyle(dialog).minWidth;
    console.log(`Dialog min width after form submitted is ${minDialogWidth}`);
    doc.getElementById('hide').click();
    minDialogWidth = win.getComputedStyle(dialog).minWidth;
    console.log(`Dialog min width when minimized is ${minDialogWidth}`);
  });
});

==> workshops/ex/dialogs/examples/jsdomtest-old.js <==
const jsdom = require('jsdom');
const {JSDOM} = jsdom;
const fs = require('fs');
const path = require('path');

const testTargetSpecs = [
  {
    pathParts: ['native'],
    label: 'native'
  },
  {
    pathParts: ['good'],
    label: 'good'
  },
  {
    pathParts: ['bad', 'vague'],
    label: 'vague'
  },
  {
    pathParts: ['bad', 'dismiss'],
    label: 'nondismissable'
  },
  {
    pathParts: ['bad', 'leak'],
    label: 'leaking'
  }
];
const testTargets = [];
testTargetSpecs.forEach(testTargetSpec => {
  const originalHTML = fs.readFileSync(path.resolve(
    __dirname, ...testTargetSpec.pathParts, 'index.html'
  ), 'utf8');
  const revisedHTML = originalHTML.replace(
    /([-_a-z]+\.css)/g,
    'file://' + path.resolve(__dirname, ...testTargetSpec.pathParts, '$&')
  );
  testTargets.push(revisedHTML);
});

const virtualConsole = new jsdom.VirtualConsole();
virtualConsole.sendTo(console);

testTargets.forEach(testTarget => {
  const dom = new JSDOM(testTarget, {
    virtualConsole,
    resources: 'usable',
    runScripts: 'dangerously'
  });
  const window = dom.window;
  window.onload = (() => {
    const doc = window.document;
    const body = doc.body;
    const legend = body.querySelector('legend');
    const legendStyles = window.getComputedStyle(legend);
    console.log(`Legend alignment is ${legendStyles.textAlign}`);
    const dialog = doc.getElementById('dialog0');
    if (dialog) {
      console.log(`Dialog role is ${dialog.getAttribute('role')}`);
      console.log(
        `Dialog border width is ${window.getComputedStyle(dialog).borderWidth}`
      );
    }
    setTimeout(() => {
      console.log(`Later legend alignment is ${
        window.getComputedStyle(legend).textAlign
      }`);
    }, 1000);
  });
});

==> workshops/ex/dialogs/examples/native/nav.js <==
/*
=== Utilities ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
const confirmPrompt = (ownership, name) => {
  const preText = 'Please confirm or cancel your designation of (A) ';
  const midText = ' as a joint owner and (B) ';
  const postText = ' as the form of ownership.';
  return `${preText}${name}${midText}${ownership.toLowerCase()}${postText}`;
};
/*
=== Handlers ===
*/
// Remove any confirmation message.
const removeAck = () => {
  const ackContainer = document.getElementById('ack');
  if (ackContainer.textContent) {
    ackContainer.textContent= '';
  }
};
// Launch a confirmation dialog when the form is submitted.
const submissionHandler = event => {
  event.preventDefault();
  removeAck();
  const ownership = Array.from(
    document.querySelectorAll('input[type=radio]')
  ).filter(input => input.checked)[0].nextElementSibling.textContent;
  const name = document.getElementById('name').value;
  // Start new event loop; otherwise the dialog interrupts removeAck();
  setTimeout(() => {
    const decision = window.confirm(confirmPrompt(ownership, name));
    // Display an acknowledgement of the user's decision.
    document.getElementById('ack').innerHTML = messages[
      decision ? 'yesack' : 'noack'
    ];
  });
};
/*
=== After-page-load listeners ===
*/
const createListeners = () => {
  // Process a form submission.
  document.getElementById('form-main').addEventListener(
    'submit', submissionHandler
  );
  // When the user changes any input, remove the acknowledgement.
  Array.from(
    document.querySelectorAll('input[type=radio]')
  ).forEach(radioButton => {
    radioButton.addEventListener('change', removeAck);
  });
  document.getElementById('name').addEventListener('input', removeAck);
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/dialogs/examples/spec.js <==
const {JSDOM} = require('jsdom');
const path = require('path');
const options = {
  resources: 'usable',
  runScripts: 'dangerously'
};
const testCounts = [0, 0, 0];
const pass = '✅passed: ';
const fail = '❌FAILED: ';
const na = '❓N/A: ';
const results = () => {
  console.log(
    `Total:
    ${pass}${testCounts[0]}
    ${fail}${testCounts[1]}
    ${na}${testCounts[2]}`
  );
}
const test = {
  hasAttr: (elLabel, el, atName, atValue) => {
    if (el) {
      const value = el.getAttribute(atName);
      const ok = value === atValue;
      console.log(
        ok ?
        `${pass}${elLabel} ${atName} is ${atValue}` :
        `${fail}${elLabel} ${atName} should be ${atValue} but is ${value}`
      );
      testCounts[ok ? 0 : 1]++;
    }
    else {
      console.log(`${na}${elLabel} does not exist`);
      testCounts[2]++;
    }
  },
  hasClass: (elLabel, el, cl) => {
    if (el) {
      const clList = el.classList;
      const ok = clList.contains(cl);
      console.log(
        ok ?
        `${pass}${elLabel} has the class ${cl}` :
        `${fail}${elLabel} should have the class ${cl} but does not`
      );
      testCounts[ok ? 0 : 1]++;
    }
    else {
      console.log(`${na}${elLabel} does not exist`);
      testCounts[2]++;
    }
  },
  hasStyle: (win, elLabel, el, sName, sValue) => {
    if (el) {
      const styles = win.getComputedStyle(el);
      const value = win.getComputedStyle(el)[sName];
      const ok = value === sValue;
      console.log(
        ok ?
        `${pass}${elLabel} style ${sName} is ${sValue}` :
        `${fail}${elLabel} style ${sName} should be ${sValue} but is ${value}`
      );
      testCounts[ok ? 0 : 1]++;
    }
    else {
      console.log(`${na}${elLabel} does not exist`);
      testCounts[2]++;
    }
  },
  hasText: (elLabel, el, tValue) => {
    if (el) {
      const value = el.textContent.trim();
      const ok = value === tValue;
      console.log(
        ok ?
        `${pass}${elLabel} text content is ${tValue}` :
        `${fail}${elLabel} text content should be ${tValue} but is ${value}`
      );
      testCounts[ok ? 0 : 1]++;
    }
    else {
      console.log(`${na}${elLabel} does not exist`);
      testCounts[2]++;
    }
  },
  is: (aLabel, a, b) => {
    if (a) {
      const ok = a === b;
      console.log(
        ok ?
        `${pass}${aLabel} is ${b}` :
        `${fail}${aLabel} should be ${b} but is ${a}`
      );
      testCounts[ok ? 0 : 1]++;
    }
    else {
      console.log(`${na}${aLabel} does not exist`);
      testCounts[2]++;
    }
  },
  isNot: (aLabel, a, b) => {
    if (a) {
      const ok = a !== b;
      console.log(
        ok ?
        `${pass}${aLabel} is not ${b}` :
        `${fail}${aLabel} should not be ${b} but is ${b}`
      );
      testCounts[ok ? 0 : 1]++;
    }
    else {
      console.log(`${na}${aLabel} does not exist`);
      testCounts[2]++;
    }
  }
};
const testTargetSpecs = [
  {
    pathParts: ['native'],
    label: 'native'
  },
  {
    pathParts: ['good'],
    label: 'good'
  },
  {
    pathParts: ['bad', 'vague'],
    label: 'vague'
  },
  {
    pathParts: ['bad', 'dismiss'],
    label: 'nondismissable'
  },
  {
    pathParts: ['bad', 'leak'],
    label: 'leaking'
  },
  {
    pathParts: ['bad', 'buggy'],
    label: 'buggy'
  }
];
testTargetSpecs.forEach((testTargetSpec, index) => {
  const targetLabel = `${testTargetSpec.label} dialog`;
  JSDOM.fromFile(
    path.resolve(__dirname, ...testTargetSpec.pathParts, 'index.html'),
    options
  ).then(dom => {
    const win = dom.window;
    const doc = win.document;
    const form = doc.getElementById('form-main');
    const ownerJTRS = doc.querySelector(
      'input[value=tenancy-rights-survivorship'
    );
    const nameInput = doc.getElementById('name');
    const ack = doc.getElementById('ack');
    const shader = doc.getElementById('shader0');
    const dialog = doc.getElementById('dialog0');
    const yesButton = doc.getElementById('submityes');
    const noButton = doc.getElementById('submitno');
    const dialogTitle = doc.getElementById('dialog0-label-title');
    const dialogBody = doc.getElementById('dialog0-label-body');
    const hideButton = doc.getElementById('hide');
    const tab = new win.KeyboardEvent('keydown', {key: 'Tab'});
    const shiftTab = new win.KeyboardEvent(
      'keydown', {key: 'Tab', shiftKey: true}
    );
    const esc = new win.KeyboardEvent('keydown', {key: 'Escape'});
    console.log('');
    test.hasClass(`${targetLabel} shader`, shader, 'clear');
    test.hasAttr(targetLabel, dialog, 'aria-modal', 'true');
    test.hasClass(targetLabel, dialog, 'covert');
    test.hasText(`${targetLabel} title`, dialogTitle, 'Caution: Submit?');
    win.onload = (() => {
      console.log('\nWindow loaded.');
      test.hasClass(targetLabel, dialog, 'covert');
      test.hasStyle(win, targetLabel, dialog, 'padding', '1rem');
      test.hasStyle(win, targetLabel, dialog, 'paddingTop', '1rem');
      test.hasStyle(
        win,
        targetLabel,
        dialog,
        'borderColor',
        'rgba(102, 102, 102, 0.5)'
      );
      test.hasStyle(
        win,
        targetLabel,
        dialog,
        'backgroundColor',
        'rgba(243, 214, 102, 0.9)'
      );
      test.hasStyle(
        win,
        `${targetLabel} yes button`,
        yesButton,
        'backgroundColor',
        'rgb(150, 21, 29)'
      );
      /*
        Do not submit form for native version, because jsdom does
        not implement window.confirm method.
      */
      if (targetLabel !== 'native dialog') {
        ownerJTRS.checked = true;
        console.log('Tried to choose JTRS ownership.');
        nameInput.value = 'Van Guard';
        console.log('Tried to enter the name Van Guard.');
        form.submit();
        console.log('Tried to submit the form.');
        test.hasClass(`${targetLabel} shader`, shader, 'shaded');
        test.hasStyle(
          win, `${targetLabel} shader`, shader, 'position', 'fixed'
        );
        test.hasStyle(
          win, `${targetLabel} shader`, shader, 'height', '100%'
        );
        test.hasStyle(win, targetLabel, dialog, 'minWidth', '80vw');
        test.hasText(
          `${targetLabel} body`,
          dialogBody,
          'You have named Van Guard as the joint owner. You have specified Joint tenancy with rights of survivorship as the form of ownership. Do you confirm this decision?'
        );
        test.hasText(
          `${targetLabel} focused element`, doc.activeElement, 'Hide'
        );
        hideButton.click();
        console.log('Tried to minimize the dialog.');
        test.hasStyle(win, targetLabel, dialog, 'minWidth', '0');
        test.hasText(
          `${targetLabel} focused element`, doc.activeElement, 'Show'
        );
        doc.getElementById('show').click();
        console.log('Tried to unminimize the dialog.');
        test.hasStyle(win, targetLabel, dialog, 'minWidth', '80vw');
        test.hasText(
          `${targetLabel} focused element`, doc.activeElement, 'Hide'
        );
        doc.dispatchEvent(shiftTab);
        console.log('Tried to navigate back from hide button.');
        // Jsdom ignores this, so leaves focus unchanged unless handled.
        test.hasText(
          `${targetLabel} focused element`,
          doc.activeElement,
          'No, I wish to wait'
        );
        noButton.focus();
        doc.dispatchEvent(tab);
        console.log('Tried to navigate forward from cancelation button.');
        // Jsdom ignores this, so leaves focus unchanged unless handled.
        test.hasText(
          `${targetLabel} focused element`,
          doc.activeElement,
          'Hide'
        );
        doc.dispatchEvent(esc);
        console.log('Tried to dismiss the dialog with Escape.');
        test.hasStyle(win, targetLabel, dialog, 'display', 'none');
        test.hasText(
          `${targetLabel} acknowledgement`,
          ack,
          'You have canceled this joint owner designation.'
        );
        form.submit();
        console.log('Tried to submit the form again.');
        test.hasStyle(win, targetLabel, dialog, 'minWidth', '80vw');
        noButton.click();
        console.log(
          'Tried to dismiss the dialog with the cancelation button'
        );
        test.hasText(
          `${targetLabel} acknowledgement`,
          ack,
          'You have canceled this joint owner designation.'
        );
        test.hasText(
          `${targetLabel} focused element`, doc.activeElement, 'Submit'
        );
      }
      // Output the total counts if this is the last source file.
      if (index === testTargetSpecs.length - 1) {
        setTimeout(results, 100);
      }
    });
  });
});

==> workshops/ex/dialogs/examples/spec-0.js <==
const jsdom = require('jsdom');
const {JSDOM} = jsdom;
const path = require('path');
const options = {
  resources: 'usable',
  runScripts: 'dangerously'
};
const virtualConsole = new jsdom.VirtualConsole();
const testTargetSpecs = [
  {
    pathParts: ['native'],
    label: 'native'
  },
  {
    pathParts: ['good'],
    label: 'good'
  },
  {
    pathParts: ['bad', 'vague'],
    label: 'vague'
  },
  {
    pathParts: ['bad', 'dismiss'],
    label: 'nondismissable'
  },
  {
    pathParts: ['bad', 'leak'],
    label: 'leaking'
  }
];
testTargetSpecs.forEach(testTargetSpec => {
  JSDOM.fromFile(
    path.resolve(__dirname, ...testTargetSpec.pathParts),
    options,
    {virtualConsole}
  ).then(dom => {
    virtualConsole.sendTo(console);
    const win = dom.window;
    win.onload = (() => {
      describe(`${testTarget.label} dialog`, () => {
        let doc;
        let dialog;
        beforeEach(() => {
          doc = win.document;
          dialog = doc.getElementById('dialog0');
        });
        it('should be identified as modal, if it exists', () => {
          expect(! dialog || dialog.getAttribute('aria-modal')).toBeTruthy();
        });
        it('should initially have a hidden class, if it exists', () => {
          expect(! dialog || dialog.classList.contains('covert')).toBeTruthy();
        });
      });
    });
  });
});

==> workshops/ex/keyboardnav/basic/bad/button/nav.js <==
// Handler
const buttonActivationHandler = event => {
    event.target.className = 'clicked';
    setTimeout(() => event.target.classList.remove('clicked'), 500);
};
// Listener (for actual or inferred click)
const awaitButtonActivation = () => {
  document.getElementById('submitButton').addEventListener(
    'click', buttonActivationHandler
  );
};
// Function to be executed on page load.
document.addEventListener('DOMContentLoaded', awaitButtonActivation);

==> workshops/ex/keyboardnav/basic/bad/link/nav.js <==
// Handler
const enterHandler = event => {
  if (event.key === 'Enter' && document.activeElement.tagName === 'A') {
    event.preventDefault();
  }
};
// Listener
const awaitEnter = () => {
  document.body.addEventListener('keydown', enterHandler);
};
// Function to be executed on page load.
document.addEventListener('DOMContentLoaded', awaitEnter);

==> workshops/ex/keyboardnav/basic/bad/radio/nav.js <==
// Handler
const arrowHandler = event => {
  const keyIndex = [
    'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'
  ].indexOf(event.key);
  if (
    keyIndex > -1
    && document.activeElement.tagName === 'INPUT'
    && document.activeElement.getAttribute('type') === 'radio'
  ) {
    event.preventDefault();
    if (keyIndex < 2) {
      window.scrollBy(0, [-20, 20][keyIndex]);
    }
  }
};
// Listener
const awaitArrows = () => {
  document.body.addEventListener('keydown', arrowHandler);
};
// Function to be executed on page load.
document.addEventListener('DOMContentLoaded', awaitArrows);

==> workshops/ex/keyboardnav/more/dialog/bad/dismiss/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Make implicit submission activate the Submit button.
const implicitSubmissionHandler = event => {
  event.preventDefault();
  document.querySelector('#submit').dispatchEvent(new MouseEvent('click'));
};
// Remove confirmation message.
const removeAck = () => {
  const ackElement = document.getElementById('ack');
  ackElement.textContent = '';
};
// Launch a confirmation dialog when the form submission button is activated.
const submissionHandler = event => {
  let dialogNeeded = true;
  const prerequisite = document.body.querySelector('[aria-controls=submit]');
  const minLength = prerequisite.getAttribute('minlength') || 0;
  const maxLength = prerequisite.getAttribute('maxlength') || Infinity;
  const length = prerequisite.value.length;
  if (length < minLength || length > maxLength) {
    prerequisite.focus();
    dialogNeeded = false;
  }
  if (dialogNeeded) {
    const dialog = document.getElementById(
      event.target.getAttribute('aria-controls')
    );
    if (dialog) {
      removeAck();
      document.getElementById('shader0').classList.replace('clear', 'shaded');
      dialog.classList.replace('covert', 'overt');
      dialog.setAttribute('aria-expanded', 'true');
      document.getElementById('hide').focus();
    }
  }
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  const dialog = document.getElementById('dialog0');
  dialog.classList.replace('overt', 'covert');
  dialog.setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  const ackElement = document.getElementById('ack');
  ackElement.innerHTML = messages[isAborted ? 'noack' : 'yesack'];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    dialog.setAttribute('aria-expanded', 'false');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    dialog.setAttribute('aria-expanded', 'true');
    hideButton.focus();
  }
};
// Handle tab key presses.
const keyHandler = event => {
  if (event.key === 'Tab') {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open, do nothing.
    if (dialog) {
      event.preventDefault();
    }
  }
};
// Handle obsolescence of confirmation message.
const obsoleteAckHandler = () => {
  removeAck();
};
/*
=== After-page-load listeners ===
*/
// Create listeners for clicks on confirmable buttons.
const createConfirmableListeners = () => {
};
// Listeners for user actions
const createListeners = () => {
  document.getElementById('form-main').addEventListener(
    'submit', implicitSubmissionHandler
  );
  document.getElementById('submit').addEventListener(
    'click', submissionHandler
  );
  const confirmButtons = Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  );
  confirmButtons.forEach(confirmButton => {
    confirmButton.addEventListener('click', () => {
      dialogCloseHandler(confirmButton.classList.contains('abort'));
    });
  });
  document.addEventListener('keydown', keyHandler);
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  const mainFormInputs = Array.from(
    document.getElementById('form-main').querySelectorAll('input')
  );
  mainFormInputs.forEach(mainFormInput => {
    mainFormInput.addEventListener('input', obsoleteAckHandler);
  });
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/keyboardnav/more/dialog/bad/leak/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Make implicit submission activate the Submit button.
const implicitSubmissionHandler = event => {
  event.preventDefault();
  document.querySelector('#submit').dispatchEvent(new MouseEvent('click'));
};
// Remove confirmation message.
const removeAck = () => {
  const ackElement = document.getElementById('ack');
  ackElement.textContent = '';
};
// Launch a confirmation dialog when the form submission button is activated.
const submissionHandler = event => {
  let dialogNeeded = true;
  const prerequisite = document.body.querySelector('[aria-controls=submit]');
  const minLength = prerequisite.getAttribute('minlength') || 0;
  const maxLength = prerequisite.getAttribute('maxlength') || Infinity;
  const length = prerequisite.value.length;
  if (length < minLength || length > maxLength) {
    prerequisite.focus();
    dialogNeeded = false;
  }
  if (dialogNeeded) {
    const dialog = document.getElementById(
      event.target.getAttribute('aria-controls')
    );
    if (dialog) {
      removeAck();
      document.getElementById('shader0').classList.replace('clear', 'shaded');
      dialog.classList.replace('covert', 'overt');
      dialog.setAttribute('aria-expanded', 'true');
      document.getElementById('hide').focus();
    }
  }
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  const dialog = document.getElementById('dialog0');
  dialog.classList.replace('overt', 'covert');
  dialog.setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  const ackElement = document.getElementById('ack');
  ackElement.innerHTML = messages[isAborted ? 'noack' : 'yesack'];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    dialog.setAttribute('aria-expanded', 'false');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    dialog.setAttribute('aria-expanded', 'true');
    hideButton.focus();
  }
};
// Handle escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (key === 'Escape') {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      dialogCloseHandler(true);
    }
  }
};
// Handle obsolescence of confirmation message.
const obsoleteAckHandler = () => {
  removeAck();
};
/*
=== After-page-load listeners ===
*/
// Create listeners for clicks on confirmable buttons.
const createConfirmableListeners = () => {
};
// Listeners for user actions
const createListeners = () => {
  document.getElementById('form-main').addEventListener(
    'submit', implicitSubmissionHandler
  );
  document.getElementById('submit').addEventListener(
    'click', submissionHandler
  );
  const confirmButtons = Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  );
  confirmButtons.forEach(confirmButton => {
    confirmButton.addEventListener('click', () => {
      dialogCloseHandler(confirmButton.classList.contains('abort'));
    });
  });
  document.addEventListener('keydown', keyHandler);
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  const mainFormInputs = Array.from(
    document.getElementById('form-main').querySelectorAll('input')
  );
  mainFormInputs.forEach(mainFormInput => {
    mainFormInput.addEventListener('input', obsoleteAckHandler);
  });
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/keyboardnav/more/dialog/good/nav.js <==
/*
=== Objects ===
*/
const messages = {
  hide: 'Hide',
  noack: 'You have <strong>canceled</strong> this joint owner designation.',
  show: 'Show',
  yesack: 'You have <strong>submitted</strong> this joint owner designation.'
};
/*
=== Handlers ===
*/
// Make implicit submission activate the Submit button.
const implicitSubmissionHandler = event => {
  event.preventDefault();
  document.querySelector('#submit').dispatchEvent(new MouseEvent('click'));
};
// Remove confirmation message.
const removeAck = () => {
  const ackElement = document.getElementById('ack');
  ackElement.textContent = '';
};
// Launch a confirmation dialog when the form submission button is activated.
const submissionHandler = event => {
  let dialogNeeded = true;
  const prerequisite = document.body.querySelector('[aria-controls=submit]');
  const minLength = prerequisite.getAttribute('minlength') || 0;
  const maxLength = prerequisite.getAttribute('maxlength') || Infinity;
  const length = prerequisite.value.length;
  if (length < minLength || length > maxLength) {
    prerequisite.focus();
    dialogNeeded = false;
  }
  if (dialogNeeded) {
    const dialog = document.getElementById(
      event.target.getAttribute('aria-controls')
    );
    if (dialog) {
      removeAck();
      document.getElementById('shader0').classList.replace('clear', 'shaded');
      dialog.classList.replace('covert', 'overt');
      dialog.setAttribute('aria-expanded', 'true');
      document.getElementById('hide').focus();
    }
  }
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  const dialog = document.getElementById('dialog0');
  dialog.classList.replace('overt', 'covert');
  dialog.setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  const ackElement = document.getElementById('ack');
  ackElement.innerHTML = messages[isAborted ? 'noack' : 'yesack'];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    dialog.setAttribute('aria-expanded', 'false');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    dialog.setAttribute('aria-expanded', 'true');
    hideButton.focus();
  }
};
// Handle tab and escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (['Tab', 'Escape'].includes(key)) {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      if (key === 'Escape') {
        dialogCloseHandler(true);
      }
      else if (key === 'Tab') {
        const focalElement = document.activeElement;
        const dialogButtons = Array.from(dialog.querySelectorAll(
          'button.overt-inline, fieldset.overt button'
        ));
        const lastDialogButton = dialogButtons[dialogButtons.length - 1];
        const isShifted = event.getModifierState('Shift');
        if (focalElement === dialogButtons[0] && isShifted) {
          event.preventDefault();
          lastDialogButton.focus();
        }
        else if (
          focalElement === lastDialogButton && ! isShifted
        ) {
          event.preventDefault();
          dialogButtons[0].focus();
        }
      }
    }
  }
};
// Handle obsolescence of confirmation message.
const obsoleteAckHandler = () => {
  removeAck();
};
/*
=== After-page-load listeners ===
*/
// Create listeners for clicks on confirmable buttons.
const createConfirmableListeners = () => {
};
// Listeners for user actions
const createListeners = () => {
  document.getElementById('form-main').addEventListener(
    'submit', implicitSubmissionHandler
  );
  document.getElementById('submit').addEventListener(
    'click', submissionHandler
  );
  const confirmButtons = Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  );
  confirmButtons.forEach(confirmButton => {
    confirmButton.addEventListener('click', () => {
      dialogCloseHandler(confirmButton.classList.contains('abort'));
    });
  });
  document.addEventListener('keydown', keyHandler);
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  const mainFormInputs = Array.from(
    document.getElementById('form-main').querySelectorAll('input')
  );
  mainFormInputs.forEach(mainFormInput => {
    mainFormInput.addEventListener('input', obsoleteAckHandler);
  });
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', createListeners, {once: true});

==> workshops/ex/keyboardnav/more/tablist/bad/nav.js <==
// Functions
const selectTab = (tabList, tab) => {
  // Deselect the currently selected tab and hide its panel.
  const activeTab = tabList.querySelector('[aria-selected=true]');
  activeTab.setAttribute('aria-selected', 'false');
  activeTab.setAttribute('tabindex', '-1');
  document
    .getElementById(activeTab.getAttribute('aria-controls'))
    .classList
    .replace('overt', 'covert');
  // Select the specified tab and reveal its panel.
  tab.setAttribute('aria-selected', 'true');
  tab.setAttribute('tabindex', '0');
  tab.focus();
  document
    .getElementById(tab.getAttribute('aria-controls'))
    .classList
    .replace('covert', 'overt');
};
// Handler
const tabListClickHandler = event => {
  const target = event.target;
  if (target.tagName === 'LI') {
    const tabList = event.currentTarget;
    selectTab(tabList, target);
  }
};
// Listeners
const createTabListListeners = () => {
  const tabLists = document.body.querySelectorAll('[role=tablist]');
  for (let i = 0; i < tabLists.length; i++) {
    tabLists.item(i).addEventListener('click', tabListClickHandler);
  }
};
document.addEventListener('DOMContentLoaded', createTabListListeners, {
  once: true
});

==> workshops/ex/keyboardnav/more/tablist/good/nav.js <==
// Functions

// Tab selector
const selectTab = (tabList, tab) => {
  // Deselect the currently selected tab and hide its panel.
  const activeTab = tabList.querySelector('[aria-selected=true]');
  activeTab.setAttribute('aria-selected', 'false');
  activeTab.setAttribute('tabindex', '-1');
  document
    .getElementById(activeTab.getAttribute('aria-controls'))
    .classList
    .replace('overt', 'covert');
  // Select the specified tab and reveal its panel.
  tab.setAttribute('aria-selected', 'true');
  tab.setAttribute('tabindex', '0');
  tab.focus();
  document
    .getElementById(tab.getAttribute('aria-controls'))
    .classList
    .replace('covert', 'overt');
};
// Utility for tabListKeyHandler
const tabListKeyUtil = (event, tabList, activeElement) => {
  const key = event.key;
  let newTab;
  if (key === 'ArrowRight') {
    newTab
      = activeElement.nextElementSibling || tabList.firstElementChild;
  }
  else if (key === 'ArrowLeft') {
    newTab
      = activeElement.previousElementSibling || tabList.lastElementChild;
  }
  else if (key === 'Home') {
    newTab = tabList.firstElementChild;
  }
  else if (key === 'End') {
    newTab = tabList.lastElementChild;
  }
  if (newTab) {
    event.preventDefault();
    selectTab(tabList, newTab);
  }
};
// Handlers
const tabListClickHandler = event => {
  const target = event.target;
  if (target.tagName === 'LI') {
    const tabList = event.currentTarget;
    selectTab(tabList, target);
  }
};
const tabListKeyHandler = event => {
  const activeElement = document.activeElement;
  if (activeElement.getAttribute('role') === 'tab') {
    const tabList = activeElement.parentElement;
    tabListKeyUtil(event, tabList, activeElement);
  }
};
// Listeners
const createTabListListeners = () => {
  const tabLists = document.body.querySelectorAll('[role=tablist]');
  for (let i = 0; i < tabLists.length; i++) {
    tabLists.item(i).addEventListener('click', tabListClickHandler);
  }
};
document.addEventListener('keydown', tabListKeyHandler);
document.addEventListener('DOMContentLoaded', createTabListListeners, {
  once: true
});

==> workshops/ex/spas/good/script.js <==
/*
=== Objects ===
*/
const holdings = {
  VPTXX: {
    name: 'Pennsylvania Municipal Money Market Fund',
    class: 'Utopia money market funds',
    subclass: 'tax-exempt',
    limitable: false,
    price: 1,
    holding: 35000
  },
  VLGSX: {
    name: 'Long-Term Treasury Index Fund Admiral Shares',
    class: 'Utopia U.S. bond funds',
    subclass: 'treasury/agency',
    limitable: false,
    price: 34.2,
    holding: 3500
  },
  VUBFX: {
    name: 'Ultra-Short-Term Bond Fund',
    class: 'Utopia U.S. bond funds',
    subclass: 'investment-grade',
    limitable: false,
    price: 10.07,
    holding: 500
  },
  VEIGX: {
    name: 'Global ESG Select Stock Fund',
    class: 'Utopia international stock funds',
    subclass: 'global',
    limitable: false,
    price: 22.5,
    holding: 1200
  },
  VGHCX: {
    name: 'Health Care Fund',
    class: 'Utopia sector and specialty funds',
    limitable: false,
    price: 219.55,
    holding: 100
  },
  VOE: {
    name: 'Mid-Cap Value ETF',
    class: 'Utopia U.S. stock ETFs',
    subclass: 'midcap',
    limitable: true,
    price: 99.79,
    holding: 300
  },
  VWOB: {
    name: 'Emerging Markets Government Bond ETF',
    class: 'Utopia international bond ETFs',
    subclass: 'emerging markets',
    limitable: true,
    price: 78.83,
    holding: 350
  },
  BHCFX: {
    name: 'Baron Health Care Fund Retail Class',
    class: 'other companies&rsquo; funds and ETFs',
    subclass: 'mutual funds',
    limitable: false,
    price: 0.07,
    holding: 65000
  },
  SLRC: {
    name: 'Solar Capital Ltd',
    class: 'stocks',
    limitable: true,
    price: 16.01,
    holding: 4000
  },
  '167501VF9': {
    name: 'Chicago Ill Brd Ed - School Reform',
    class: 'bonds',
    limitable: true,
    price: 76.377,
    holding: 30
  }
};
/*
=== Handlers ===
*/
// Populate holdings.
const populateHoldings = () => {
  const symbols = Object.keys(holdings);
  symbols.sort((a, b) => holdings[a].name < holdings[b].name ? -1 : 1);
  const holdingList = document.querySelector('#what > .question > fieldset > div');
  let holdingCount = 0;
  symbols.forEach(symbol => {
    let holdingValue;
    const button = document.createElement('button');
    button.setAttribute('value', symbol);
    button.setAttribute('class', 'gridleft');
    button.textContent = symbol;
    const detailSpan = document.createElement('span');
    const detailAlt = ++holdingCount % 2 === 0 ? 'even' : 'odd';
    detailSpan.setAttribute('class', `gridright ${detailAlt}`);
    const record = holdings[symbol];
    const strongName = `<strong>${record.name}</strong>`;
    const classes =
      `${record.class}${record.subclass ? '&mdash;' + record.subclass : ''}`;
    let price;
    let holding;
    if (record.class === 'bonds') {
      price = `${record.price}% of face value`;
      holding = `${record.holding} $1,000-face-value bonds`;
      holdingValue = 10 * record.price * record.holding;
    }
    else {
      price = `$${record.price.toFixed(2)} per share`;
      holding = `${record.holding} shares`;
      holdingValue = record.price * record.holding;
    }
    holdingValue = `$${holdingValue.toFixed(2)}`;
    const detailText =
      `${strongName} (${classes}), market price ${price}, holding ${holding}, holding value ${holdingValue}`;
    detailSpan.insertAdjacentHTML('afterbegin', detailText);
    const detailID = `holding-${symbol}`;
    detailSpan.setAttribute('id', detailID);
    button.setAttribute('aria-describedby', detailID);
    holdingList.insertAdjacentElement('beforeend', button);
    holdingList.insertAdjacentElement('beforeend', detailSpan);
  });
};
// Make implicit submission activate the Submit button.
const implicitSubmissionHandler = event => {
  event.preventDefault();
  document.querySelector('#submit').dispatchEvent(new MouseEvent('click'));
};
// Remove confirmation message.
const removeAck = () => {
  const ackElement = document.getElementById('ack');
  ackElement.textContent = '';
};
// Launch a confirmation dialog when the form submission button is activated.
const submissionHandler = event => {
  let dialogNeeded = true;
  const prerequisite = document.body.querySelector('[aria-controls=submit]');
  const minLength = prerequisite.getAttribute('minlength') || 0;
  const maxLength = prerequisite.getAttribute('maxlength') || Infinity;
  const length = prerequisite.value.length;
  if (length < minLength || length > maxLength) {
    prerequisite.focus();
    dialogNeeded = false;
  }
  if (dialogNeeded) {
    const dialog = document.getElementById(
      event.target.getAttribute('aria-controls')
    );
    if (dialog) {
      removeAck();
      document.getElementById('shader0').classList.replace('clear', 'shaded');
      dialog.classList.replace('covert', 'overt');
      dialog.setAttribute('aria-expanded', 'true');
      document.getElementById('hide').focus();
    }
  }
};
// Close any open custom confirmation dialog and take a post-dialog action.
const dialogCloseHandler = isAborted => {
  const dialog = document.getElementById('dialog0');
  dialog.classList.replace('overt', 'covert');
  dialog.setAttribute('aria-expanded', 'false');
  document.getElementById('shader0').classList.replace('shaded', 'clear');
  const ackElement = document.getElementById('ack');
  ackElement.innerHTML = messages[isAborted ? 'noack' : 'yesack'];
  document.getElementById('submit').focus();
};
// Minimize or maximize a dialog on request.
const showHideHandler = event => {
  const button = event.target;
  const dialog = document.getElementById('dialog0');
  const hideButton = document.getElementById('hide');
  const showButton = document.getElementById('show');
  const hidables = Array.from(dialog.querySelectorAll('.hidable'));
  button.classList.replace('overt-inline', 'covert');
  if (button.id === 'hide') {
    showButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('overt', 'covert');
    });
    dialog.classList.replace('middle', 'corner');
    dialog.setAttribute('aria-expanded', 'false');
    showButton.focus();
  }
  else {
    hideButton.classList.replace('covert', 'overt-inline');
    hidables.forEach(hidable => {
      hidable.classList.replace('covert', 'overt');
    });
    dialog.classList.replace('corner', 'middle');
    dialog.setAttribute('aria-expanded', 'true');
    hideButton.focus();
  }
};
// Handle tab and escape key presses.
const keyHandler = event => {
  const key = event.key;
  if (['Tab', 'Escape'].includes(key)) {
    const dialog = document.body.querySelector('#dialog0.overt');
    // If a dialog is open:
    if (dialog) {
      if (key === 'Escape') {
        dialogCloseHandler(true);
      }
      else if (key === 'Tab') {
        const focalElement = document.activeElement;
        const dialogButtons = Array.from(dialog.querySelectorAll(
          'button.overt-inline, fieldset.overt button'
        ));
        const lastDialogButton = dialogButtons[dialogButtons.length - 1];
        const isShifted = event.getModifierState('Shift');
        if (focalElement === dialogButtons[0] && isShifted) {
          event.preventDefault();
          lastDialogButton.focus();
        }
        else if (
          focalElement === lastDialogButton && ! isShifted
        ) {
          event.preventDefault();
          dialogButtons[0].focus();
        }
      }
    }
  }
};
// Handle obsolescence of confirmation message.
const obsoleteAckHandler = () => {
  removeAck();
};
/*
=== After-page-load listeners ===
*/
// Create listeners for clicks on confirmable buttons.
const createConfirmableListeners = () => {
};
// Listeners for user actions
const createListeners = () => {
  document.getElementById('form-main').addEventListener(
    'submit', implicitSubmissionHandler
  );
  document.getElementById('submit').addEventListener(
    'click', submissionHandler
  );
  const confirmButtons = Array.from(
    document.body.querySelectorAll('#submityes, #submitno')
  );
  confirmButtons.forEach(confirmButton => {
    confirmButton.addEventListener('click', () => {
      dialogCloseHandler(confirmButton.classList.contains('abort'));
    });
  });
  document.addEventListener('keydown', keyHandler);
  ['hide', 'show'].forEach(buttonID => {
    document.getElementById(buttonID).addEventListener(
      'click', showHideHandler
    );
  });
  const mainFormInputs = Array.from(
    document.getElementById('form-main').querySelectorAll('input')
  );
  mainFormInputs.forEach(mainFormInput => {
    mainFormInput.addEventListener('input', obsoleteAckHandler);
  });
};
/*
=== Page-load listener ===
*/
document.addEventListener('DOMContentLoaded', populateHoldings, {once: true});

==> workshops/ex/spas/piertopier/piers.js <==
const piers = {
  "OA": {
    "name": "Audacious",
    "cluster": "Central"
  },
  "OB": {
    "name": "Bogle",
    "cluster": "Central"
  },
  "OC": {
    "name": "DiStefano Technology Center",
    "cluster": "Devon"
  },
  "OD": {
    "name": "455 Devon Park",
    "cluster": "Devon"
  },
  "OE": {
    "name": "600 Chesterfield",
    "cluster": "Chesterfield"
  },
  "OF": {
    "name": "700 Chesterfield",
    "cluster": "Chesterfield"
  },
  "OG": {
    "name": "Goliath",
    "cluster": "Central"
  },
  "OH": {
    "name": "1001 Cedar Hollow",
    "cluster": "Cedar"
  },
  "OJ": {
    "name": "100 Chesterfield",
    "cluster": "Chesterfield"
  },
  "OL": {
    "name": "14 Lee",
    "cluster": "Lee"
  },
  "OM": {
    "name": "Morgan",
    "cluster": "Central"
  },
  "OP": {
    "name": "45 Liberty",
    "cluster": "Liberty"
  },
  "OR": {
    "name": "50 Morehall",
    "cluster": "Morehall"
  },
  "OS": {
    "name": "Swiftsure",
    "cluster": "Central"
  },
  "OV": {
    "name": "Victory",
    "cluster": "Central"
  },
  "OX": {
    "name": "60 Morehall",
    "cluster": "Morehall"
  },
  "OZ": {
    "name": "Zealous",
    "cluster": "Central"
  },
  "PA": {
    "name": "Alexander",
    "cluster": "East"
  },
  "PB": {
    "name": "955 Chesterbrook",
    "cluster": "Chesterbrook"
  },
  "PD": {
    "name": "400 Devon Park",
    "cluster": "Devon"
  },
  "PJ": {
    "name": "Atwater",
    "cluster": "Atwater"
  },
  "PL": {
    "name": "Leander",
    "cluster": "East"
  },
  "PT": {
    "name": "Theseus",
    "cluster": "East"
  },
  "ZK": {
    "name": "King of Prussia Transit Center",
    "cluster": "King of Prussia"
  },
  "ZL": {
    "name": "Limerick Part and Ride",
    "cluster": "Limerick"
  },
  "ZN": {
    "name": "Norristown Transit Center",
    "cluster": "Norristown"
  },
  "ZP": {
    "name": "Paoli Station",
    "cluster": "Paoli"
  },
  "ZR": {
    "name": "Reading Pottstown Station",
    "cluster": "Pottstown"
  },
  "ZS": {
    "name": "Strafford Station",
    "cluster": "Strafford"
  },
  "ZU": {
    "name": "Uptown Worthington Shopping Center",
    "cluster": "Uptown"
  },
};

==> workshops/ex/spas/piertopier/plan.js <==
const populatePierLists = () => {
  const lists = document.body.getElementsByClassName('pier-list');
  for (let i = 0; i < lists.length; i++) {
    const list = lists[i];
    const pierCodes = Object.keys(piers);
    for (let j = 0; j < pierCodes.length; j++) {
      const option = document.createElement('option');
      const code = pierCodes[j];
      option.value = code;
      option.textContent = piers[code].name;
      list.insertAdjacentElement('beforeend', option);
    }
  }
};
const zeroPad = num => {
  if (num > 9) {
    return num;
  }
  else {
    return `0${num}`;
  }
};
const initializeWhen = () => {
  const soonUTC = new Date(Date.now() + 600000);
  const soonPAString = soonUTC.toLocaleString({timeZone: 'America/New_York'});
  const soonPANum = Date.parse(soonPAString);
  const soonPA = new Date(soonPANum);
  const year = soonPA.getFullYear();
  const month = zeroPad(soonPA.getMonth() + 1);
  const dayNum = zeroPad(soonPA.getDate());
  const hour = zeroPad(soonPA.getHours());
  const min = zeroPad(soonPA.getMinutes());
  document.getElementById('date').value = `${year}-${month}-${dayNum}`;
  document.getElementById('time').value = `${hour}:${min}`;
};
const createSubmitListener = () => {
  document.getElementById('planForm').addEventListener('submit', event => {
    event.preventDefault();
    location.assign('.');
  });
};
const init = () => {
  populatePierLists();
  initializeWhen();
  createSubmitListener();
  console.log('Trips content is ' + trips[0]);
};
window.onload = init;

==> workshops/ex/spas/piertopier/script.js <==
//// Constants
const tripPartTerms = {ID: 'Trip ID', from: 'Origin', to: 'Destination', date: 'Date', time: 'Time', role: 'Your role'};
const roleDescriptions = {drive: 'driver', ride: 'rider'};
const trips = {};
let tripID = 0;
let lastUID = '';
const piers = {
  "OA": {
    "name": "Audacious",
    "cluster": "Central"
  },
  "OB": {
    "name": "Bogle",
    "cluster": "Central"
  },
  "OC": {
    "name": "DiStefano Technology Center",
    "cluster": "Devon"
  },
  "OD": {
    "name": "455 Devon Park",
    "cluster": "Devon"
  },
  "OE": {
    "name": "600 Chesterfield",
    "cluster": "Chesterfield"
  },
  "OF": {
    "name": "700 Chesterfield",
    "cluster": "Chesterfield"
  },
  "OG": {
    "name": "Goliath",
    "cluster": "Central"
  },
  "OH": {
    "name": "1001 Cedar Hollow",
    "cluster": "Cedar"
  },
  "OJ": {
    "name": "100 Chesterfield",
    "cluster": "Chesterfield"
  },
  "OL": {
    "name": "14 Lee",
    "cluster": "Lee"
  },
  "OM": {
    "name": "Morgan",
    "cluster": "Central"
  },
  "OP": {
    "name": "45 Liberty",
    "cluster": "Liberty"
  },
  "OR": {
    "name": "50 Morehall",
    "cluster": "Morehall"
  },
  "OS": {
    "name": "Swiftsure",
    "cluster": "Central"
  },
  "OV": {
    "name": "Victory",
    "cluster": "Central"
  },
  "OX": {
    "name": "60 Morehall",
    "cluster": "Morehall"
  },
  "OZ": {
    "name": "Zealous",
    "cluster": "Central"
  },
  "PA": {
    "name": "Alexander",
    "cluster": "East"
  },
  "PB": {
    "name": "955 Chesterbrook",
    "cluster": "Chesterbrook"
  },
  "PD": {
    "name": "400 Devon Park",
    "cluster": "Devon"
  },
  "PJ": {
    "name": "Atwater",
    "cluster": "Atwater"
  },
  "PL": {
    "name": "Leander",
    "cluster": "East"
  },
  "PQ": {
    "name": "Quarry Ridge",
    "cluster": "Quarry Ridge"
  },
  "PT": {
    "name": "Theseus",
    "cluster": "East"
  },
  "ZK": {
    "name": "King of Prussia Transit Center",
    "cluster": "King of Prussia"
  },
  "ZL": {
    "name": "Limerick Part and Ride",
    "cluster": "Limerick"
  },
  "ZN": {
    "name": "Norristown Transit Center",
    "cluster": "Norristown"
  },
  "ZP": {
    "name": "Paoli Station",
    "cluster": "Paoli"
  },
  "ZR": {
    "name": "Reading Pottstown Station",
    "cluster": "Pottstown"
  },
  "ZS": {
    "name": "Strafford Station",
    "cluster": "Strafford"
  },
  "ZU": {
    "name": "Uptown Worthington Shopping Center",
    "cluster": "Uptown"
  },
};
//// Utilities
const zeroPad = num => {
  if (num > 9) {
    return num;
  }
  else {
    return `0${num}`;
  }
};
const getDateByTimeZone = (UTCDate, localTimeZone) => {
  const dateString = UTCDate.toLocaleString({timeZone: localTimeZone});
  const dateNum = Date.parse(dateString);
  return new Date(dateNum);
};
const dateSubstringsOfDate = date => {
  const year = date.getFullYear();
  const month = zeroPad(date.getMonth() + 1);
  const dayNum = zeroPad(date.getDate());
  return [year, month, dayNum];
};
const timeSubstringsOfDate = date => {
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  return [hour, minute];
};
const showView = sectionID => {
  const viewSections = document.body.getElementsByClassName('view');
  for (let i = 0; i < viewSections.length; i++) {
    viewSections[i].classList.replace('overt', 'covert');
  }
  document.getElementById(sectionID).classList.replace('covert', 'overt');
  if (sectionID === 'plan') {
    initializeWhen();
  }
};
const getPlanPart = partID => {
  const partSource = document.getElementById(partID);
  if (partSource.classList.contains('radioGroup')) {
    const selection = partSource.querySelector('input[type=radio].checked');
    return selection ? selection.value : '';
  }
  else {
    return partSource.value;
  }
};
const addPlan = () => {
  const plan = {};
  const parts = ['planFrom', 'planTo', 'planDate', 'planTime', 'planRole', 'planUID'];
  parts.forEach(part => {
    plan[part] = getPlanPart(part);
  });
  trips[++tripID] = plan;
  lastUID = plan.planUID;
};
const addTripListPart = (tripList, UIDTrip, key) => {
  tripList.insertAdjacentElement('beforeend', 'dt').textContent = tripPartTerms[key];
  tripList.insertAdjacentElement('beforeend', 'dd').textContent = UIDTrip[key];
};
const showTrips = UID => {
  const UIDTripIDs = Object.keys(trips).filter(ID => trips[ID].planUID === UID);
  const UIDTrips = UIDTripIDs.map(ID => {
    trips[ID].ID = ID;
    return trips[ID];
  });
  UIDTrips.sort((a, b) => a[planDate] + a[planTime] < b[planDate] + b[planTime]);
  const tripListSection = document.getElementById('tripLists');
  UIDtrips.forEach(UIDTrip => {
    const tripList = document.createElement('dl');
    tripPartTerms.keys.forEach(key => addTripListPart(tripList, UIDTrip, key));
  });
};
//// On-view initializers
// Initialize the date and time inputs when the plan view appears.
const initializeWhen = () => {
  const soonUTCDate = new Date(Date.now() + 600000);
  const soonPADate = getDateByTimeZone(soonUTCDate, 'America/New_York');
  const dateParts = dateSubstringsOfDate(soonPADate);
  const timeParts = timeSubstringsOfDate(soonPADate);
  document.getElementById('planDate').value = `${dateParts[0]}-${dateParts[1]}-${dateParts[2]}`;
  document.getElementById('planTime').value = `${timeParts[0]}:${timeParts[1]}`;
};
const initializeUID = inputID => {
  document.getElementById(inputID).value = lastUID || 'u';
};
//// On-load initializers
const populatePierLists = () => {
  const lists = document.body.getElementsByClassName('pierList');
  for (let i = 0; i < lists.length; i++) {
    const list = lists[i];
    const pierCodes = Object.keys(piers);
    for (let j = 0; j < pierCodes.length; j++) {
      const option = document.createElement('option');
      const code = pierCodes[j];
      option.value = code;
      option.textContent = piers[code].name;
      list.insertAdjacentElement('beforeend', option);
    }
  }
};
const createPlanRequestListener = () => {
  const buttons = document.getElementsByClassName('planRequest');
  for (let i = 0; i < buttons.length; i++) {
    buttons[i].addEventListener('click', event => {
      showView('plan');
      initializeUID('planUID');
    });
  };
};
const createPlanSubmitListener = () => {
  document.getElementById('planForm').addEventListener('submit', event => {
    event.preventDefault();
    addPlan();
    showView('planAck');
  });
};
const createTripsRequestListener = () => {
  const buttons = document.getElementsByClassName('tripsRequest');
  for (let i = 0; i < buttons.length; i++) {
    buttons[i].addEventListener('click', event => {
      showView('trips');
      initializeUID('tripsUID');
    });
  }
};
const createTripsUIDSubmitListener = () => {
  document.getElementById('tripsUIDSubmit').addEventListener('click', event => {
    event.preventDefault();
    lastUID = document.getElementById('tripsUID').value;
    showTrips(lastUID);
  });
};
const init = () => {
  populatePierLists();
  createPlanRequestListener();
  createPlanSubmitListener();
  createTripsRequestListener();
  createTripsUIDSubmitListener();
};
window.onload = init;

==> workshops/ex/spas/piertopier/trips.js <==
let trips = ['hello'];

console.log('Trips content is ' + trips[0]);

==> workshops/ex/tables/goodbad/spec.js <==
const {JSDOM} = require('jsdom');
const fs = require('fs');
const path = require('path');

const htmls = [
  fs.readFileSync(path.resolve(__dirname, 'good.html'), 'utf8'),
  fs.readFileSync(path.resolve(__dirname, 'bad.html'), 'utf8')
];
const bodyLabels = ['good first table', 'bad first table'];
let dom;
let body;
let table0;
let table0Children;
let table0ChildCount;

[0, 1].forEach(index => {
  describe(bodyLabels[index], () => {
    beforeEach(() => {
      dom = new JSDOM(htmls[index]);
      body = dom.window.document.body;
      table0 = body.querySelector('table');
      table0Children = table0.children;
      table0ChildCount = table0.childElementCount;
    });
    it('should have a caption', () => {
      expect(table0ChildCount && table0Children[0].tagName).toBe('CAPTION');
    });
    it('caption text should be correct', () => {
      const table0Caption = table0 && table0.querySelector('caption');
      expect(
        table0Caption && table0Caption.textContent.trim()
      ).toBe('Retirement Account Types');
    });
    it('should have a thead next after the caption', () => {
      expect(table0ChildCount > 1 && table0.children[1].tagName).toBe('THEAD');
    });
    it('should have only header cells in any header rows', () => {
      expect(table0 && table0.querySelector('thead > td')).toBeFalsy();
    });
    it('should have only header cells on the left', () => {
      expect(
        table0 && table0.querySelector('tbody > tr > td:first-child')
      ).toBeFalsy();
    });
  });
});

==> workshops/ex/testing/jsdom/bugtest.js <==
const {JSDOM} = require('jsdom');
const dom = new JSDOM(`
  <!DOCTYPE html>
  <html lang="en-US">
    <head>
      <meta charset="utf-8">
      <title>Outline bug</title>
    </head>
    <body>
      <p>I am outlined.</p>
    </body>
  </html>
`);
const para = dom.window.document.querySelector('p');
para.style.outline = '3px solid red';
console.log(`Outline from shorthand: ${para.style.outline}`);
console.log(`Outline width from shorthand: ${para.style.outlineWidth}`);
let paraStyle = dom.window.getComputedStyle(para);
console.log(`Computed outline width from shorthand: ${paraStyle.outlineWidth}`);para.style.outlineWidth = '5px';
console.log(`Outline from longhand: ${para.style.outline}`);
console.log(`Outline width from longhand: ${para.style.outlineWidth}`);
paraStyle = dom.window.getComputedStyle(para);
console.log(`Computed outline width from longhand: ${paraStyle.outlineWidth}`);
==> workshops/ex/testing/jsdom/script.js <==
document.title = 'New title';
document.querySelector('p').textContent = 'New body text';

==> workshops/ex/testing/jsdom/test.js <==
'use strict';
const {JSDOM} = require('jsdom');
const path = require('path');
const options = {
  resources: 'usable',
  runScripts: 'dangerously'
};
JSDOM.fromFile(path.resolve(__dirname, 'index.html'), options).then(dom => {
  const win = dom.window;
  const doc = win.document;
  const para = doc.querySelector('p');
  console.log(`Immediate title: ${doc.title}`);
  console.log(`Immediate body: ${para.textContent}`);
  let paraStyle = win.getComputedStyle(para);
  console.log(`Immediate font weight: ${paraStyle.fontWeight}`);
  console.log(`Immediate border width: ${paraStyle.borderWidth}`);
  win.onload = (() => {
    console.log(`Later title: ${doc.title}`);
    console.log(`Later body: ${para.textContent}`);
    paraStyle = win.getComputedStyle(para);
    console.log(`Later font weight: ${paraStyle.fontWeight}`);
    console.log(`Later border width: ${paraStyle.borderWidth}`);
    para.style.borderWidth = '4px';
    paraStyle = win.getComputedStyle(para);
    console.log(`Final border width: ${paraStyle.borderWidth}`);
  });
});
