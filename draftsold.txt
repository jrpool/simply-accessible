==> old/planning/20181012/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <!--<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">-->
    <title>Improved training in accessible user interface development</title>
    <link rel="stylesheet" href="style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Improved training in accessible user interface development</h1>
        <p>Revision date: 7 October 2018</p>
        <p
          class="center"><label id="hider"><input type="checkbox" onclick="hideToggle(event)">Show notes</label></p>
      </header>
      <section id="summary">
        <h2>What&rsquo;s here?</h2>
        <p>The Accessibility Unit at Utopia helps the enterprise ensure that its external and internal digital interfaces are accessible. It does this, in part, by training.</p>
        <p>We are proposing here a new, more in-depth, more Utopia-relevant training program, focused on user-interface developers.</p>
        <p class="center">
          <img
            class="img-example"
            src="http://corpsp.utopia.com/pnd/mc/Accessibility/SiteAssets/SitePages/Personas%20-%20George%20Roda/persona-George2.jpg"
            alt="photograph of mobility-limited computer user"
          >
          <img
            class="img-example"
            src="http://corpsp.utopia.com/pnd/mc/Accessibility/SiteAssets/SitePages/Personas%20-%20Ronald%20Estrabico/persona-Ronald.jpg"
            alt="photograph of 2 elderly computer users"
          >
        </p>
      </section>
      <section>
        <h2>Introduction</h2>
        <h3>Planned improvements</h3>
        <p>We want to invest in a new, more effective training program. Its main features:</p>
        <ul>
          <li><p class="li"><strong>Reach</strong>: The program will reach a larger audience.</p></li>
          <li><p class="li"><strong>Depth</strong>: The program will offer enough technical detail for practical application.</p></li>
          <li><p class="li"><strong>Scope</strong>: Like the existing training, the program will combine know-how and know-why.</p></li>
          <li><p class="li"><strong>Focus</strong>: Module topics will be user- and function-centered, not method-centered. For example, there will be no module on drop-down lists or pie charts, because they will be covered in modules on option selection and partition data, respectively. This will help user-centered designers and developers choose methods with accessibility in mind.</p></li>
          <li><p class="li"><strong>Modularity</strong>: The program will ultimately consist of about 100 modules, each consumable in 10 to 30 minutes. They will largely be independent, enabling just-in-time learning.</p></li>
          <li><p class="li"><strong>Modality</strong>: The modules will be hybrids of documentation, selective audio and video recordings, tutorials, exercises, and automated tests. They can support self-training or be combined into an on-site or web-mediated course. We estimate that a 4-day course could cover all the topics. A course could rely on learner study of the modules, rather than lectures, followed by expert help, discussion, and collaborative practice.</p></li>
          <li>
            <p class="li"><strong>Originality</strong>: The program will leverage A11yGurus University modules and other existing resources and algorithms when possible, but will make most topics Utopia-specific and Utopia-relevant.</p>
            <p class="note covert">See OzWiki.</p>
            <p class="note covert">See <a href="https://www.boia.org/products/lms-interactive-training/">BOIA courses</a>.</p>
            <p class="note covert">See <a href="">Siteimprove Academy</a>.</p>
          </li>
          <li><p class="li"><strong>Audience</strong>: Some modules will be aimed at developers only, but others will benefit product owners, managers, designers, and testers as well.</p></li>
          <li><p class="li"><strong>Tech-first</strong>: The first modules to be placed into service will be those that impart intermediate technical know-how to developers. This decision arises in part from our success in motivating a subset of Utopia developers, who already have a basic familiarity with, but now need a better command of, accessibility techniques. An additional reason is that technical modules will be the most demanding to produce and will require the largest number of test-and-revise cycles.</p></li>
        </ul>
        <h3>Staffing</h3>
      </section>
      <section id="logo">
        <p class="center">
          <img
            class="img-example"
            src="http://corpsp.utopia.com/pnd/mc/Accessibility/PublishingImages/concept-overlapping-rolesandtesting.png"
            alt="Utopia Venn-diagram accessibility logo"
          >
        </p>
      </section>
      <section id="outline">
        <h2>Training modules</h2>
        <p>Leaf entries in this outline (i.e. entries without subentries) will be modules. Whether non-leaf entries will be mere groupings, or will also have some content and thus be modules, remains to be determined.</p>
        <p>Module titles marked &ldquo;&dagger;&rdquo; are our tentative selections for the initial technical subset. There are currently 15 modules so marked. The selections may change as we obtain recommendations from prospective users.</p>
        <p>The outline entries may seem verbose and repetitive. The reason is that each item is the title of a proposed module. It, standing alone, should describe and predict what a learner will work on when studying the module.</p>
        <ol class="list-primary">
          <li>
            <p class="li">Introduction to accessibility</p>
            <ol>
              <li>
                <p class="li">What is accessibility?</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#subjective">A11yGurus discusses accessibility versus usability</a>: &ldquo;there is a lot of overlap between accessibility and usability. What if a website is technically "accessible" (according to the guidelines) but is highly unusable? Could you really say that such a web site is accessible? It might meet a limited definition of accessibility, but it would fail to meet the implied intent of web accessibility, which is that people with disabilities can use the web site.&rdquo;</p>
              </li>
              <li><p class="li">Why accessibility matters</p></li>
              <li>
                <p class="li">Who demands accessibility?</p>
                <p class="note covert">Permanent, temporary, and situational disabilities.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/personas/cognitive">A11yGurus says cognitive disabilities are by far the most common kind</a>, but the <a href="https://nccd.cdc.gov/BRFSSPrevalence/rdPage.aspx?rdReport=DPH_BRFSS.ExploreByLocation&rdProcessAction=&SaveFileGenerated=1&irbLocationType=States&islLocation=99&islState=&islCounty=&islClass=CLASS05&islTopic=TOPIC19&islYear=2016&hidLocationType=States&hidLocation=99&hidClass=CLASS05&hidTopic=TOPIC19&hidTopicName=Disability+status&hidYear=2016&irbShowFootnotes=Show&rdICL-iclIndicators=BLIND%2cDECIDE%2cDIFFALON%2cDIFFDRES%2cDIFFWALK&iclIndicators_rdExpandedCollapsedHistory=&iclIndicators=BLIND%2cDECIDE%2cDIFFALON%2cDIFFDRES%2cDIFFWALK&hidPreviouslySelectedIndicators=&DashboardColumnCount=2&rdShowElementHistory=divTopicUpdating%3dHide%2cislTopic%3dShow%2cdivYearUpdating%3dHide%2cislYear%3dShow%2c&rdScrollX=0&rdScrollY=200&rdRnd=2207">CDC reports that mobility disabilities are more common than cognitive ones</a>, and <a href="https://disabilitycompendium.org/compendium/2017-annual-disability-statistics-compendium?page=6">the U.S. Census reports that ambulatory disabilities are more common than cognitive ones</a>.</p>
              </li>
              <li><p class="li">Who supplies accessibility?</p></li>
              <li><p class="li">Accessibility: hard or easy?</p></li>
              <li><p class="li">Accessibility: hideous or elegant?</p></li>
              <li>
                <p class="li">The future of accessibility</p>
                <p class="note covert">
                  See <a href="https://youtu.be/4c1lqFXHvqI">lecture by David Eagleman</a> about future technologies that will permit persons without a sense to teach their brains to perceive that sense&rsquo;s signals via another sense.
                </p>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Accessibility at Utopia</p>
            <ol>
              <li>
                <p class="li">Our core purpose and accessibility</p>
                <p class="note covert">Is financial illiteracy a disability?</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/personas/cognitive">A11yGurus says math anxiety and inability to solve mathematical problems are disabilities</a>.</p>
              </li>
              <li><p class="li">Inclusivity, diversity, and accessibility</p></li>
              <li><p class="li">Competing with accessibility</p></li>
              <li><p class="li">Complying with accessibility</p></li>
              <li><p class="li">Our accessibility risks and costs</p></li>
              <li><p class="li">Our accessibility opportunities</p></li>
              <li><p class="li">Utopia&rsquo;s accessibility policies</p></li>
              <li><p class="li">How we organize accessibility</p></li>
              <li><p class="li">Where you get accessibility support</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Accessibility: When is it &ldquo;done&rdquo;?</p>
            <ol>
              <li><p class="li">International standards of accessibility</p></li>
              <li><p class="li">Laws, regulations, and adjudications on accessibility</p></li>
              <li><p class="li">Utopia standards of accessibility</p></li>
              <li>
                <p class="li">Accessible UI and UX: from OK to good to great</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/summary">A11yGurus advises, &ldquo;Don't be satisfied with "good enough" or compliant.&rdquo;</a> <a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#guidelines">A11yGurus further says &ldquo;the guidelines don't cover every last aspect of accessibility.&rdquo;</a> And <a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#guidelines">it also says that WCAG underrepresents the needs of users with cognitive disabilities</a>.</p>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Our special accessibility challenges</p>
            <ol>
              <li>
                <p class="li">Communicating financial data accessibly</p>
                <p class="note covert">Success Criterion 3.1.3.</p>
                <p class="note covert"><code>abbr</code> with <code>title</code> not available for keyboard focus or disclosure, per <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/guidelines#abbr"></a>.</p>
              </li>
              <li><p class="li">Making financial transactions accessible</p></li>
              <li>
                <p class="li">Accessibly preventing and correcting errors</p>
                <p class="note covert">Success Criterion 3.3.4.</p>
              </li>
              <li>
                <p class="li">Accessible investor education</p>
                <p class="note covert">Enrico G. De Giorgi and Ola Mahmoud, <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3018421">&ldquo;How Elementary is Diversification? A Study of Children's Portfolio Choice&rdquo;</a>, 2017, found experimentally that the value of diversification in counteracting risk is not intuitive.</p>
                <p class="note covert">Rob Ranyard (ed.), <cite>Economic Psychology</cite> (Wiley, 2017), ch. 23 (&ldquo;Ageing and Economic Decision-Making&rdquo;), found (p. 377) that the efficacy of narrative formats and emotional foci increases with age, and recommended (p. 380) &ldquo;that [financial-literacy] interventions targeting older adults should take into account age-related declines in cognitive ability, experience-based knowledge, emotions, and motivation.&rdquo;</p>
              </li>
              <li><p class="li">Accessibility, privacy, and investor protection</p></li>
              <li><p class="li">Accessibility and security</p></li>
              <li>
                <p class="li">Accessibility and internationalization</p>
                <p class="note covert">
                  <code>lang</code> attribute.
                </p>
              </li>
              <li><p class="li">Making legacy interfaces accessible</p></li>
              <li><p class="li">Accessible hiring, onboarding, and crew experience</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Strategies for accessible interface production</p>
            <ol>
              <li>
                <p class="li">Inclusive, universal, and adaptive ideas of accessible design</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/universal-design#equitable-use">A11yGurus argues against separate versions for disabled users</a>, but <a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/universal-design#flexibility">it also argues for abundant optionality in interfaces</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/inclusive-design/one-interface-fits-all">A11yGurus discussion of this</a>.</p>
              </li>
              <li>
                <p class="li">Accessibly semantic HTML</p>
                <p class="note covert">HTML5 rather than <code>div</code> + ARIA.</p>
                <p class="note covert">Unique <code>id</code> values and element attributes.</p>
                <p class="note covert">Closing-tag syntax compliance.</p>
                <p class="note covert"><code>title</code> value descriptive and identical to visible title.</p>
              </li>
              <li>
                <p class="li">Accessible CSS</p>
                <p class="note covert">
                  See <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/CSS_and_JavaScript#CSS">&ldquo;CSS and JavaScript accessibility best practices&rdquo;</a>.
                </p>
                <p class="note covert">Doctrine that accessibility should be CSS-independent.</p>
              </li>
              <li>
                <p class="li">Accessible JavaScript</p>
                <p class="note covert">
                  See <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/CSS_and_JavaScript#JavaScript">&ldquo;CSS and JavaScript accessibility best practices&rdquo;</a>.
                </p>
              </li>
              <li><p class="li">Server-client cooperation for accessibility</p></li>
              <li>
                <p class="li">Making single-page applications accessible</p>
                <p class="note covert">Hiding methods.</p>
              </li>
              <li><p class="li">Managing accessible projects</p></li>
              <li><p class="li">Roles, collaboration, and specialization for accessibility</p></li>
              <li><p class="li">Remediation versus reimplementation for accessibility</p></li>
              <li><p class="li">Doing agile, NGA, Shift Left, BV@SS, and journeys accessibly</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Making layouts accessible</p>
            <ol>
              <li>
                <p class="li">Making layouts accessibly serializable</p>
                <p class="note covert">The concept of visual order: meaning?</p>
                <p class="note covert"><code>tabindex</code> values: accessibility effects of positive values.</p>
                <p class="note covert">Dimensionality and complexity in space and time (including animation, flashing, blinking). <a href="https://dequeuniversity.com/class/fundamentals2/personas/cognitive">Interferes with comprehension for users with Down syndrome</a>.</p>
              </li>
              <li>
                <p class="li">Making layout structure accessible</p>
                <p class="note covert">HTML5 structural elements (a.k.a. sections, layout elements, regions, or landmarks). See <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure">MDN Web Docs</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/audio-structural/page#ideal-landmarks">A11yGurus recommends a sparse structure</a>, typically with only 3 top-level landmarks: <code>header</code>, <code>main</code>, and <code>footer</code>, and with the <code>header</code> element containing only 2 more landmarks: <code>nav</code> and <code>search</code>.</p>
                <p class="note covert">Explain options for naming landmarks; cf. <a href="https://dequeuniversity.com/class/semantic-structure2/landmarks/creating-landmarks">A11yGurus</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/semantic-structure2/landmarks/best-practices#limit-of-type-per-page">A11yGurus advises, &ldquo;the HMTL 5 specification allows multiple instances of the equivalent landmarks: <code>header</code>, <code>main</code>, and <code>footer</code>. The official restriction is only on ARIA landmarks. Even so, it is appropriate in most web designs to have only one each of these landmarks, whether they are specified using ARIA or HTML 5.&rdquo;</a></p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/audio-structural/page#ideal-headings">A11yGurus recommends 1 <code>h1</code> element per page, treating a dialog as a page</a>.</p>
                <p class="note covert">Simplicity. <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#visual-interface">A11yGurus advises, &ldquo;Each web page should have one main task or feature&rdquo;</a>.</p>
              </li>
              <li><p class="li">Making tabular layouts accessible</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Making views accessible</p>
            <p class="note covert">Simplicity. <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#visual-interface">A11yGurus advises that &ldquo;the visual interface around [the page&rsquo;s main] task or feature should be minimal.&rdquo;</a></p>
            <ol>
              <li>
                <p class="li">&dagger;Sizing content accessibly</p>
                <p class="note covert">In the <code>meta name="viewport" content="height = u, width=v, initial-scale=w, minimum-scale=x, maximum-scale=y, user-scalable=z"</code> element,  <code>maximum-scale</code> not <code>1</code> and <code>user-scalable</code> not <code>no</code>.</p>
                <p class="note covert"><code>rem</code> sizing.</p>
                <p class="note covert">Text size doublable without impairment.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/checklist">A11yGurus says, &ldquo;Is the design optimized for all zoom states? Simplify the design as much as possible, eliminating horizontal scrolling.&rdquo;</a> But it does not say how to do that.</p>
              </li>
              <li>
                <p class="li">Making text accessible</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/personas/reading">Users with dyslexia benefit from alternative non-text</a>.</p>
                <p class="note covert">Line height.</p>
                <p class="note covert">Justification.</p>
                <p class="note covert">Letter case; all-caps, small caps.</p>
                <p class="note covert">Column width.</p>
              </li>
              <li>
                <p class="li">Making images accessible</p>
                <p class="note covert"><code>alt</code>, <code>longdesc</code> (now facing deprecation), <code>title</code> (a global attribute), <code>aria-label</code>, <code>aria-labelledby</code>, and <code>aria-describedby</code> attributes of <code>img</code> element.</p>
                <p class="note covert"><code>figure</code> element.</p>
                <p class="note covert">Conflicting preferences for image description.</p>
              </li>
              <li><p class="li">Making SVG accessible</p></li>
              <li>
                <p class="li">Making colors accessible</p>
                <p class="note covert">
                  See <a href="https://webaim.org/resources/linkcontrastchecker/">tool that checks link-color accessibility</a>.
                </p>
                <p class="note covert">Reasons for nonreliance on color for semantic representation: color-blindness, UA color calibration differences, UA hardware color rendering differences, user adjustments to contrast and monochromaticity, color perception effects of ambient light conditions.</p>
              </li>
              <li>
                <p class="li">Styling activatable elements accessibly</p>
                <p class="note covert">Size large enough to be reliably clicked or touched.</p>
              </li>
              <li>
                <p class="li">Making audio content accessible</p>
                <p class="note covert">Speech-to-text automation: <a href="https://support.google.com/docs/answer/4492226?hl=en#">Voice Typing</a>, Windows Speech Recognition, OS X Dictation, <a href="https://www.globalme.net/blog/the-present-future-of-speech-recognition">A Complete Guide to Speech Recognition Technology</a>.</p>
              </li>
              <li>
                <p class="li">Making video content accessible</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/silent-visual#multimedia">A11yGurus recommends WebVTT and format customization</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/silent-visual#sign">A11yGurus says sign language is better than captions for many deaf users</a>.</p>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Making data accessible</p>
            <p class="note covert"><a href="http://www.readabilityformulas.com/free-readability-formula-tests.php">Readability Formulas</a>.</p>
            <ol>
              <li>
                <p class="li">&dagger;Making time-series data accessible</p>
                <p class="note covert">
                  Donald J. Wheeler, <cite>Understanding Variation: The Key to Managing Chaos</cite>, 2nd edn (SPC Press, 2000), argues that people often mismanage work processes because they present time-series data (to themselves) inappropriately. He says they typically compare the latest amount with one other amount, such as the immediately prior one or the amount from a month or a year earlier, ignoring the whole series of amounts in between. By doing that, he says, they wrongly interpret the 2-item comparison as signaling progress or regress, when, most often, it merely reflects normal variation, i.e. &ldquo;noise&rdquo;. He advocates inspecting extended series of data to identify the upper and lower bounds of the noise, allowing us to pay attention only to the amounts beyond those bounds, i.e. the &ldquo;signals&rdquo;. Then we can work to diagnose signals and respond to the forces causing them.
                </p>
                <p class="note covert">
                  The pattern of 2-item comparison is common in the financial services industry, e.g. in the reporting of changes in the prices of securities.
                </p>
              </li>
              <li><p class="li">&dagger;Making partition data accessible</p></li>
              <li>
                <p class="li">&dagger;Making 2-dimensional data accessible</p>
                <p class="note covert">Table captions and sections.</p>
                <p class="note covert"><code>td</code> element headers.</p>
                <p class="note covert"><code>th</code> element scopes.</p>
                <p class="note covert">
                  Donald J. Wheeler, <cite>Understanding Variation: The Key to Managing Chaos</cite>, 2nd edn (SPC Press, 2000), on pp. 5&ndash;6 says: &ldquo;While tables of values may be used to present all of the relevant data, they are not easy to summarize. It is difficult to digest the information contained in tables of numbers. &hellip; The human mind just does not do a very good job of absorbing large amounts of data. &hellip; tables present an abundance of extraneous details. &hellip; The solution to these problems lies in a shift from a digital representation of data to a form that is more friendly to humans&mdash;graphs.&rdquo;
                </p>
                <p class="note covert">
                  However, Edward R. Tufte, <cite>The Visual Representation of Quantitative Information</cite>, 2nd edition (Graphics Press, 2001), in chapter 2 (&ldquo;Graphical Integrity&rdquo;) describes how graphical representations of quantitative information can be deceptive.
                </p>
              </li>
              <li><p class="li">&dagger;Making multi-dimensional data accessible</p></li>
              <li><p class="li">Summarizing data accessibly</p></li>
              <li><p class="li">Making data accessibly queriable</p></li>
              <li><p class="li">Choosing accessible numeric, graphic, and infographic formats</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Making interactions accessible</p>
            <ol>
              <li>
                <p class="li">Accessible interaction timing</p>
                <p class="note covert">20-second warning time for time extension per WCAG, but <a href="https://dequeuniversity.com/class/fundamentals2/personas/motor">A11yGurus recommends 120 seconds or more</a>.</p>
              </li>
              <li>
                <p class="li">Accessible multi-stage interaction</p>
                <p class="note covert">Designing processes so that users are not required to remember earlier stages.</p>
              </li>
              <li>
                <p class="li">Accessible event handling</p>
                <ol>
                  <li><p class="li">Making event handling accessibly predictable</p></li>
                  <li><p class="li">&dagger;Giving accessible notice of changed context and content</p></li>
                  <li><p class="li">&dagger;Preserving accessible user control over events</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Accessible navigation</p>
                <ol>
                  <li>
                    <p class="li">Making navigation accessibly efficient</p>
                    <p class="note covert">Ensure that the target of the skip link is focusable. If not already, give it a tabindex="-1" attribute. It can be the <code>main</code> element. <a href="https://dequeuniversity.com/class/semantic-structure2/within-pages/skip-navigation#skip-link-functinoal">A11yGurus explains why</a>.</p>
                    <p class="note covert">Benefits of durably visible skip links.</p>
                    <p class="note covert">Tables of contents, e.g. in <code>header</code> element. <a href="https://dequeuniversity.com/class/semantic-structure2/within-pages/page-toc">Recommended by A11yGurus</a>.</p>
                  </li>
                  <li>
                    <p class="li">Making navigation accessibly predictable</p>
                    <p class="note covert">A link&rsquo;s accessible name can consist of the value of the <code>alt</code> attribute of an image that is the content of the link.</p>
                    <p class="note covert">Link accessible names&rsquo; self-sufficiency.</p>
                    <p class="note covert"><a href="https://dequeuniversity.com/class/semantic-structure2/links/external-windows-files">Methods for defining link metadata</a>.</p>
                    <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/guidelines#navigation">A11yGurus recommends not deleting the current page from the navigation list, even if its link status is deleted</a>.</p>
                  </li>
                  <li>
                    <p class="li">Managing and showing focus accessibly</p>
                    <p class="note covert">Reliance on a browser focus indicator versus provision of a reliably visible one.</p>
                  </li>
                  <li><p class="li">Responding accessibly to button and link activation</p></li>
                  <li>
                    <p class="li">UI navigation, browser navigation, and accessibility</p>
                    <p class="note covert">Page: an obsolete concept?</p>
                  </li>
                  <li><p class="li">&dagger;Layers, tabs, windows, and accessibility</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Making forms accessible</p>
                <p class="note covert">Labeling. Choice among syntaxes.</p>
                <p class="note covert">Grouping controls with <code>fieldset</code> elements and labeling groups with <code>legend</code> elements.</p>
                <ol>
                  <li>
                    <p class="li">Making search accessible</p>
                    <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/tactile-structural#ideal">A11yGurus recommends using terms users will expect</a> (e.g., &ldquo;staff&rdquo; instead of &ldquo;crew&rdquo;.</p>
                  </li>
                  <li>
                    <p class="li">Making free text input accessible</p>
                    <p class="note covert">Unreliability of contrast and durability of placeholders.</p>
                  </li>
                  <li>
                    <p class="li">&dagger;Making type-constrained input accessible</p>
                    <p class="note covert">Have browser perform intra-field validation? <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#feedback">A11yGurus says</a> it is the fastest type and thus good, but may be lost on users of screen readers, and enforcement of required fields interferes with exploratory navigation.</p>
                  </li>
                  <li><p class="li">Making toggling and election accessible</p></li>
                  <li>
                    <p class="li">Making selection among options accessible</p>
                    <p class="note covert">Option grouping versus control (<code>fieldset</code>) grouping.</p>
                  </li>
                  <li>
                    <p class="li">&dagger;Making decisions about amounts accessible</p>
                    <p class="note covert">Success Criterion 3.3.4.</p>
                  </li>
                  <li><p class="li">Making partitioning accessible</p></li>
                  <li>
                    <p class="li">&dagger;Making authentication accessible</p>
                    <p class="note covert">Deliberate difficulty (e.g. CAPTCHAs) vs. cognitive and experiential disabilities.</p>
                  </li>
                  <li><p class="li">Making agency decisions accessible</p></li>
                  <li>
                    <p class="li">&dagger;Accessibly handling form-input errors</p>
                    <p class="note covert">Error diagnosis</p>
                    <p class="note covert">Error-message positioning</p>
                    <p class="note covert">Error-message notification</p>
                    <p class="note covert">Error-message styling</p>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Making documents accessible</p>
            <ol>
              <li><p class="li">Generating accessible PDF files</p></li>
              <li><p class="li">Editing PDF files for accessibility</p></li>
              <li><p class="li">Choosing document formats for accessibility</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Making communications accessible</p>
            <ol>
              <li><p class="li">Generating accessible email messages</p></li>
              <li><p class="li">Generating accessible SMS messages</p></li>
              <li><p class="li">Generating accessible social-media messages</p></li>
              <li><p class="li">Making telephone routing accessible</p></li>
              <li><p class="li">Making telephone support accessible</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Accessibility across platforms</p>
            <ol>
              <li><p class="li">&dagger;Making views accessibly responsive</p></li>
              <li><p class="li">&dagger;Making text resizable across platforms</p></li>
              <li><p class="li">&dagger;Accessibility for keyboards, mice, trackpads, and fingers</p></li>
              <li>
                <p class="li">Accessibility for the bottom billion</p>
                <p class="note covert">Slow and expensive transmission, thus video, audio, and image size limitation.</p>
              </li>
              <li>
                <p class="li">Using cross-platform development frameworks accessibly</p>
                <ol>
                  <li><p class="li">Accessible development with Angular</p></li>
                  <li><p class="li">Accessible development with React</p></li>
                  <li><p class="li">Accessible development with Vue</p></li>
                  <li><p class="li">Accessible development with Ionic</p></li>
                  <li><p class="li">Accessible development with React Native</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Leveraging accessibility features of mobile APIs</p>
                <ol>
                  <li><p class="li">Leveraging iOS API accessibility</p></li>
                  <li><p class="li">Leveraging Android API accessibility</p></li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Supporting adaptations for accessibility</p>
            <p class="note covert">
              See <a href="https://youtu.be/4c1lqFXHvqI">lecture by David Eagleman</a> about future technologies that will permit persons without a sense to teach their brains to perceive that sense&rsquo;s signals via another sense.
            </p>
            <p class="note covert">Decision whether to differentiate UI for ATs, e.g. making content announceable with screen readers but not visible.</p>
            <p class="note covert">Differentiation techniques, including positioning of text off screen on in infinitesimal boxes.</p>
            <ol>
              <li><p class="li">Supporting magnification tools</p></li>
              <li><p class="li">Supporting contrast customization</p></li>
              <li>
                <p class="li">Supporting pointerless operation</p>
                <p class="note covert">Including on touch devices.</p>
                <p class="note covert">Mouseless use precludes hovering.</p>
              </li>
              <li>
                <p class="li">Supporting screen readers</p>
                <p class="note covert">Standard assumption: If a user cannot read and needs text oralized, the producer is not responsible for doing that.</p>
                <p class="note covert"><code>lang</code> attribute.</p>
                <p class="note covert">Which text properties do screen readers announce? Italics, bold face, size, font family, decoration, indentation, justification, other position? E.g., code rendered in monospace font visually indistinguishable from code marked as <code>code</code>, but only the latter is identified by ATs (or is even it?).</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/tactile-structural#multimedia">A11yGurus says that screen readers don&rsquo;t resume descriptions after being paused</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#auditory-cues">A11yGurus warns that audio would collide with screen-reader output</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/semantic-structure2/within-pages/">A11yGurus says screen readers provide navigation help unavailable to persons not using them</a>.</p>
                <ol>
                  <li><p class="li">Supporting NVDA</p></li>
                  <li><p class="li">Supporting JAWS</p></li>
                  <li><p class="li">Supporting VoiceOver on OS X</p></li>
                  <li><p class="li">Supporting VoiceOver on iOS</p></li>
                  <li><p class="li">Supporting TalkBack</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Supporting braille output</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/tactile-structural#ideal">A11yGurus says braille reading is slower than visual reading or screen-reader hearing</a>.</p>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Standardizing accessibility</p>
            <ol>
              <li><p class="li">Developing enterprise accessibility standards</p></li>
              <li><p class="li">Baking accessibility into shared components</p></li>
              <li><p class="li">Leveraging VUI for accessibility</p></li>
              <li><p class="li">Accessible branding</p></li>
            </ol>
          </li>
          <li>
            <p class="li">Testing accessibility</p>
            <ol>
              <li>
                <p class="li">Team accessibility testing</p>
                <ol>
                  <li><p class="li">Inspecting code for accessibility</p></li>
                  <li><p class="li">Testing with device variation and simulation</p></li>
                  <li><p class="li">Testing with keyboard navigation</p></li>
                  <li><p class="li">Testing with screen readers</p></li>
                </ol>
              </li>
              <li><p class="li">End-user accessibility testing</p></li>
              <li>
                <p class="li">Automatic accessibility testing of web interfaces</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#guidelines">A11yGurus says &ldquo;the guidelines were written to be objectively testable, which means that all of the subjective aspects of accessibility were purposely excluded from the guidelines.&rdquo;</a>. But in fact some WCAG 2 guidelines are subjective.</p>
                <ol>
                  <li><p class="li">Accessibility linting</p></li>
                  <li><p class="li">Accessibility testing with browser extensions</p></li>
                  <li><p class="li">Accessibility testing with axe-core</p></li>
                  <li><p class="li">Creating unit tests for accessibility</p></li>
                  <li><p class="li">Creating integration tests for accessibility</p></li>
                  <li><p class="li">Creating end-to-end tests for accessibility</p></li>
                  <li><p class="li">Accessibility regression management in CI-CD</p></li>
                  <li><p class="li">Accessibility experimentation in production</p></li>
                  <li><p class="li">Generating and mining analytics for accessibility insights</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Automatic accessibility testing of native interfaces</p>
                <ol>
                  <li><p class="li">Testing native iOS apps for accessibility</p></li>
                  <li><p class="li">Testing native Android apps for accessibility</p></li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Accessibility under the hood</p>
            <ol>
              <li><p class="li">The DOM and the AOM</p></li>
              <li><p class="li">The accessibility API</p></li>
              <li><p class="li">The accessibility Tree</p></li>
              <li><p class="li">WCAG and ARIA</p></li>
            </ol>
          </li>
        </ol>
      </section>
    </main>
  </body>
</html>
==> old/planning/docs/new-crew-info.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <!--<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">-->
    <title>New Crew Info</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>New Crew Info</h1>
        <p>Revision date: 13 October 2018</p>
      </header>
      <section>
        <h2>What&rsquo;s here?</h2>
        <p>Topics and links in the New Crew Info app, which reportedly becomes unavailable to each crew member 1 year after hire.</p>
      </section>
      <section>
        <p>Our Core Purpose</p>
        <p><a
          href="http://crewnet.utopia.com/aboutus/ourstory/whatsetsapart/our_core_purpose.html?from=Search&amp;searchQuery=utopia%20mission%20statement&amp;searchIndex=10;our_core_purpose.html">http://crewnet.utopia.com/aboutus/ourstory/whatsetsapart/our_core_purpose.html?from=Search&amp;searchQuery=utopia%20mission%20statement&amp;searchIndex=10;our_core_purpose.html</a></p>
        <p>Utopia at a Glance</p>
        <p><a
          href="http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=aboutus">http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=aboutus</a></p>
        <p>Utopia by the numbers:</p>
        <p><a
          href="http://crewnet.utopia.com/aboutus/ourstory/quick_facts/quick_facts.html?from=BestBets&amp;searchQuery=utopia%20by%20the%20numbers">http://crewnet.utopia.com/aboutus/ourstory/quick_facts/quick_facts.html?from=BestBets&amp;searchQuery=utopia%20by%20the%20numbers</a></p>
        <p>Utopia in the News</p>
        <p><a
          href="http://corpsp.utopia.com/sites/publicrelations/vgnews/SitePages/Home.aspx">http://corpsp.utopia.com/sites/publicrelations/vgnews/SitePages/Home.aspx</a></p>
        <p>Senior staff</p>
        <p><a
          href="http://crewnet.utopia.com/aboutus/ourstory/people/senior_staff.html">http://crewnet.utopia.com/aboutus/ourstory/people/senior_staff.html</a></p>
        <p>Strategy</p>
        <p><a
          href="http://crewnet.utopia.com/aboutus/ourstory/our_company_strategy/strategy_refresh.html">http://crewnet.utopia.com/aboutus/ourstory/our_company_strategy/strategy_refresh.html</a></p>
        <p>Acronyms:</p>
        <p><a
          href="http://crewnet.utopia.com/quicklists/glossaries/acronyma.html?from=Search&amp;searchQuery=acronyms&amp;searchIndex=3;acronyma.html">http://crewnet.utopia.com/quicklists/glossaries/acronyma.html?from=Search&amp;searchQuery=acronyms&amp;searchIndex=3;acronyma.html</a></p>
        <p>Around Campus:</p>
        <p><a
          href="http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=workplace">http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=workplace</a></p>
        <p>CrewFi:</p>
        <p><a
          href="http://crewhub.utopia.com/csi/e20/wrrc/Technologies/Wi-fi.aspx">http://crewhub.utopia.com/csi/e20/wrrc/Technologies/Wi-fi.aspx</a></p>
        <p>Utopia’s Offices:</p>
        <p><a
          href="http://crewnet.utopia.com/workplace/building/directions/interactive_map.html">http://crewnet.utopia.com/workplace/building/directions/interactive_map.html</a></p>
        <p>Corporate Policies</p>
        <p><a
          href="http://crewnet.utopia.com/quicklists/policies.html?from=BestBets&amp;searchQuery=corporate%20policies&amp;searchIndex=1">http://crewnet.utopia.com/quicklists/policies.html?from=BestBets&amp;searchQuery=corporate%20policies&amp;searchIndex=1</a></p>
        <p>Common Contacts:</p>
        <p><a
          href="http://crewnet.utopia.com/directories/contacts/utopia_hotlines.html?from=Search&amp;searchQuery=utopia%20hotlines&amp;searchIndex=1;utopia_hotlines.html">http://crewnet.utopia.com/directories/contacts/utopia_hotlines.html?from=Search&amp;searchQuery=utopia%20hotlines&amp;searchIndex=1;utopia_hotlines.html</a></p>
        <p>Travel and Expenses:</p>
        <p><a
          href="http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=workplace.travel">http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=workplace.travel</a></p>
        <p>Community Stewardship: </p>
        <p><a
          href="http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=aboutus.ourcommunities.givingback.community&amp;from=BestBets&amp;searchQuery=volunteer&amp;searchIndex=1">http://crewnet.utopia.com/CrewNetPortal/mvc/DurableIndex?category=aboutus.ourcommunities.givingback.community&amp;from=BestBets&amp;searchQuery=volunteer&amp;searchIndex=1</a></p>
        <p>Crew Resource Groups:</p>
        <p><a
          href="http://crewnet.utopia.com/aboutus/ourcrew/diversity/crew_resource_groups/crg_overview.html?from=BestBets&amp;searchQuery=crg">http://crewnet.utopia.com/aboutus/ourcrew/diversity/crew_resource_groups/crg_overview.html?from=BestBets&amp;searchQuery=crg</a></p>
        <p>Shipshape:</p>
        <p><a
          href="http://crewnet.utopia.com/totalrewards/benefits/healthandwellness/fitness_weight_management/shipshape_all.html?from=Search&amp;searchQuery=ship%20shape&amp;searchIndex=1;shipshape_all.html">http://crewnet.utopia.com/totalrewards/benefits/healthandwellness/fitness_weight_management/shipshape_all.html?from=Search&amp;searchQuery=ship%20shape&amp;searchIndex=1;shipshape_all.html</a></p>
        <p>Rec leagues: </p>
        <p><a
          href="http://crewnet.utopia.com/totalrewards/benefits/healthandwellness/fitness_weight_management/recreation_leagues.html?from=Search&amp;searchQuery=sports&amp;searchIndex=2;recreation_leagues.html">http://crewnet.utopia.com/totalrewards/benefits/healthandwellness/fitness_weight_management/recreation_leagues.html?from=Search&amp;searchQuery=sports&amp;searchIndex=2;recreation_leagues.html</a></p>
      </section>
    </main>
  </body>
</html>
==> old/planning/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <!--<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">-->
    <title>Improved training in accessible user-interface development</title>
    <link rel="stylesheet" href="style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Improved training in accessible user-interface development</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 16 October 2018</p>
        <p
          class="center"><label id="hider"><input type="checkbox" onclick="hideToggle(event)">Show notes</label></p>
        <p class="note covert">Notes in this document, displayed in a small font size like this, record some related subtopics, ideas, facts, and references. They are incomplete and continue to be accumulated.</p>
      </header>
      <section id="summary">
        <h2>What&rsquo;s here?</h2>
        <p>The Accessibility Unit at Utopia helps the enterprise ensure that its external and internal digital interfaces are accessible. It does this, in part, by training.</p>
        <p>We are planning a new, more in-depth, more Utopia-relevant training program, organized into 3 sections: design, development, and testing.</p>
        <p>This document is a draft description of that program and a draft outline of the development section. Comments on these drafts are welcome and may be sent to <a href="mailto:jonathan_pool@utopia.com">Jonathan Pool</a>.</p>
        <p class="center">
          <img
            class="img-example"
            src="http://corpsp.utopia.com/pnd/mc/Accessibility/SiteAssets/SitePages/Personas%20-%20George%20Roda/persona-George2.jpg"
            alt="photograph of mobility-limited computer user"
          >
          <img
            class="img-example"
            src="http://corpsp.utopia.com/pnd/mc/Accessibility/SiteAssets/SitePages/Personas%20-%20Ronald%20Estrabico/persona-Ronald.jpg"
            alt="photograph of an elderly computer user looking closely to read the displayed contents, with help from another user"
          >
        </p>
      </section>
      <section>
        <h2>Introduction</h2>
        <p>Utopia faces increasing demands to ensure that its digital interfaces are <em>accessible</em>, i.e. usable by a broad spectrum of users, including the many with disabilities. There are competitive, reputational, regulatory, and risk-management incentives for advancing the accessibility of our external and internal interfaces.</p>
        <p>Teams that do traditional planning, design, development, and testing of interfaces, even with the intent of making them usable, elegant, and compelling, do not necessarily make them accessible. That requires special knowledge and tools.</p>
        <p>To make accessibility a component of the new normal, Utopia has created an Accessibility Unit, with a current staff of 6 crew members. The Accessibility Unit uses its own staff and external consultants to pursue its mission and has adopted a &ldquo;spot-repair and shift-left&rdquo; strategy. This means helping software teams to (1) remediate the worst accessibility problems in their <em>existing</em> interfaces, but (2) build accessibility into their <em>new</em> projects from the very start.</p>
        <h2>Strategic context</h2>
        <p>The spot-repair phase began about 3 years ago and has had a major positive impact on user experiences, but is yielding diminishing returns. When users report accessibility problems, we help teams make spot repairs, but, as a strategy of proactive accessibility, spot repairs are becoming more intricate and expensive. This makes total redevelopment of UIs increasingly attractive, bringing the shift-left phase to the fore.</p>
        <p>By itself, the Accessibility Unit cannot make all new UI projects accessible, nor monitor their development, so our shift-left strategy can succeed only if we help teams acquire, apply, and propagate accessibility knowledge. To this end, we aim to impart both <em>know-how</em> and <em>know-why</em>: a combination of accessibility techniques and accessibility acumen. The latter will, we expect, give teams an appreciation of the business value and technical excellence of accessibility, motivating them to develop accessibly even when nobody is looking.</p>
        <h2>Training</h2>
        <h3>Current inventory</h3>
        <p>Accessible-interface training at Utopia consists mainly of:</p>
        <ul>
          <li>A 2-day Utopia University course, &ldquo;Accessibility Fundamentals&rdquo;, taught by visiting experts from A11yGurus.</li>
          <li>A 2-hour accessibility segment in the Utopia University course, &ldquo;UI Boot Camp&rdquo;.</li>
          <li>Occasional 1- to 2-hour introductions offered on demand to designers, developers, and testers.</li>
          <li>Web-based modules created by A11yGurus University and made available to Utopia crew members.</li>
        </ul>
        <h3>Observed efficacy</h3>
        <p>Our current training reaches about 100 persons per year. We estimate that the potential clientele is about 2,000, so we are probably not even matching the clientele turnover rate.</p>
        <p class="note covert">There are <a href="http://crewhub.utopia.com/it/hub/Pages/ITS-by-the-Numbers.aspx">about 4,300</a> crew and contingent workers in the Information Technology and Security Division. CrewNet advanced crew searches on job skills yield about 1,400 with &ldquo;development&rdquo; and 500 with &ldquo;design&rdquo;.</p>
        <p>The current training is also too superficial. In our experience, it has not prepared designers, developers, and testers to autonomously make their interfaces accessible. Utopia crew members, although invited to train themselves with the A11yGurus modules, have rarely done so. We believe that more engaging and relevant training (in part making use of those same modules) would be more effective. We have found trainees highly attentive and engaged when we use their own and other Utopia code and interfaces as illustrative and practice material.</p>
        <h3>Planned improvements</h3>
        <p>We want to invest in a new, more effective training program. Its main features:</p>
        <ul>
          <li><p class="li"><strong>Reach</strong>: The program will reach a larger audience.</p></li>
          <li><p class="li"><strong>Depth</strong>: The program will offer enough technical detail for practical application.</p></li>
          <li><p class="li"><strong>Scope</strong>: Like the existing training, the program will combine know-how and know-why.</p></li>
          <li><p class="li"><strong>Focus</strong>: Module topics will be user- and function-centered, rather than method-centered, in anticipation of the <a href="http://crewhub.utopia.com/it/hub/Pages/IT-Goals.aspx">spread of agile and cross-functional collaboration</a>.</p></li>
          <li><p class="li"><strong>Modularity</strong>: The program will consist of topical modules, each consumable in 10 to 30 minutes. They will largely be independent, enabling just-in-time learning.</p></li>
          <li><p class="li"><strong>Modality</strong>: The modules will be hybrids of documentation, selective audio and video recordings, tutorials, exercises, and automated tests. They can support self-training or be combined into on-site or web-mediated courses. Courses, relying on learner study of modules rather than lectures, can deliver mainly expert help, discussion, and collaborative practice.</p></li>
          <li>
            <p class="li"><strong>Leverage</strong>: The program will reference and incorporate, not reinvent, A11yGurus University modules, the <a href="http://corpsp.utopia.com/pnd/mc/Accessibility/SitePages/Home.aspx">Accessibility Unit&rsquo;s SharePoint documentation</a>, and other existing resources and algorithms.</p>
            <p class="note covert">See <a href="https://www.accessibilityoz.com/ozwiki/">OzWiki</a>.</p>
            <p class="note covert">See <a href="https://www.boia.org/products/lms-interactive-training/">BOIA courses</a>.</p>
            <p class="note covert">See <a href="https://siteimprove.com/en-us/resources/e-learning-courses/">Siteimprove Academy</a>.</p>
            <p class="note covert">See <a href="https://open.edx.org/">Open edX</a> (Python-based).</p>
            <p class="note covert">See <a href="https://github.com/freeCodeCamp/freeCodeCamp/tree/master/guide/english/accessibility">FreeCodeCamp accessibility guide</a> (in 6 languages).</p>
            <p class="note covert">FreeCodeCamp offers <a href="https://search.freecodecamp.org/?q=accessibility">8 lessons on accessible development</a>.</p>
            <p class="note covert">FreeCodeCamp is open-source on Github and offers <a href="https://github.com/freeCodeCamp/freeCodeCamp/tree/master/curriculum/challenges/english/01-responsive-web-design/applied-accessibility">22 lessons on accessibility within its curriculum on responsive web design</a>. All its dependencies are npm packages.</p>
            <p class="note covert"><a href="https://www.adobe.com/products/captivate/features.html">Adobe Captivate</a> apparently has no code-evaluation feature.</p>
            <p class="note covert"><a href="https://helpcenter.elearningforce.com/hc/en-us/articles/115004265785-LMS365-Quiz-Builder-Add-in-User-Guide#a_Toc526445119">LMS365</a> supports only &ldquo;Multiple Choice, Multiple Answers, True or False, Free Text Answer, Ordering, Hot Spot, Matching, Gap Fill and Short Answer&rdquo;.</p>
          </li>
          <li><p class="li"><strong>Relevance</strong>: The program will make pervasive use of Utopia-specific and Utopia-relevant examples.</p></li>
          <li><p class="li"><strong>Audience</strong>: Modules will differ in their likely clienteles. Product planners, designers, developers, testers, product owners, and managers may all find some of the modules beneficial.</p></li>
          <li><p class="li"><strong>Iterativity</strong>: We intend to evaluate the modules by examining the results of their testing components, obtaining user judgments and suggestions, and monitoring the accessibility of interfaces before and after those who create them study accessibility with the modules. The evaluations will help us make revisions.</p></li>
        </ul>
        <h3>Staffing</h3>
        <p>The Accessibility Unit crew will contribute to this training program.</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            class="img-example"
            src="http://corpsp.utopia.com/pnd/mc/Accessibility/PublishingImages/concept-overlapping-rolesandtesting.png"
            alt="Utopia Venn-diagram accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section id="devsec">
        <h2>Development section</h2>
        <p>Accessible development will be the subject of one section of the proposed training program.</p>
        <p>One modality that developers have found particularly engaging is automated code evaluation. A learner solves problems by iteratively writing code, getting automated advice on it, and revising the code. Platforms that have achieved great popularity with this modality include <a href="https://www.freecodecamp.org">freeCodeCamp</a>, <a href="https://www.hackerrank.com">HackerRank</a>, <a href="https://www.topcoder.com">TopCoder</a>, <a href="https://www.coderbyte.com">CoderByte</a>, <a href="https://www.codewars.com">CodeWars</a>, <a href="https://leetcode.com">LeetCode</a>, and <a href="https://www.codecademy.com">Codecademy</a>. This modality may be a substantial component of the development section.</p>
        <p>Whether this modality will be developed and tested will depend on its cost. Utopia has no existing infrastructure powering internally designed automated software training. Therefore, the cost of this modality would include the cost of acquiring or developing and maintaining such an infrastructure.</p>
        <p>Developers may make use of the modules in various contexts. They may study multiple modules together for skill development. They may choose modules of interest from time to time. Or enhanced automated accessibility testing may route them to issue-pertinent modules for &ldquo;<a href="https://www.checkmarx.com/products/codebashing-enterprise-application-security-training">contextual training</a>&rdquo;.</p>
        <p class="note covert">See part 6 of Michael Herman, <a href="https://testdriven.io">Microservices</a>, a tutorial on developing a microservice (in Python and Flask) that evaluates user code.</p>
      </section>
      <section id="devoutline">
        <h2>Development section outline</h2>
        <p>In the outline below, the modules that are expected to be developed in the first round are marked with &ldquo;(1)&rdquo;.</p>
        <ol class="list-primary">
          <li>
            <p class="li">Accessibility: an introduction for developers (1)</p>
            <ol class="covert">
              <li>
                <p class="li">What is accessibility?</p>
                <p class="note covert">See <a href="https://www.deque.com/accessibility-beginners-guide">The Beginner&rsquo;s Guide to Accessibility</a>.</p>
                <p class="note covert">See <a href="https://www.w3c.org/WAI/">W3C Web Accessibility Initiative</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#subjective">A11yGurus discusses accessibility versus usability</a>: &ldquo;there is a lot of overlap between accessibility and usability. What if a website is technically "accessible" (according to the guidelines) but is highly unusable? Could you really say that such a web site is accessible? It might meet a limited definition of accessibility, but it would fail to meet the implied intent of web accessibility, which is that people with disabilities can use the web site.&rdquo;</p>
                <p class="note covert">Equality-based versus access-based definitions.</p>
              </li>
              <li><p class="li">Why accessibility matters</p></li>
              <li>
                <p class="li">Who demands accessibility?</p>
                <p class="note covert">See NoCoffee visual disability simulator. Combine with a situational simulator, e.g. bright ambient light. See also ChromeLens.</p>
                <p class="note covert">Not only people with disabilities. Everybody is an actual or potential user of ATs, if understood as intelligent automated agents that help users interact with other agents. E.g., almost nobody reads and understands prospectuses before investing, so an AT could read and summarize them and warn users of apparently worrying clauses in them.</p>
                <p class="note covert">Permanent, temporary, and situational disabilities.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/personas/cognitive">A11yGurus says cognitive disabilities are by far the most common kind</a>, but the <a href="https://nccd.cdc.gov/BRFSSPrevalence/rdPage.aspx?rdReport=DPH_BRFSS.ExploreByLocation&rdProcessAction=&SaveFileGenerated=1&irbLocationType=States&islLocation=99&islState=&islCounty=&islClass=CLASS05&islTopic=TOPIC19&islYear=2016&hidLocationType=States&hidLocation=99&hidClass=CLASS05&hidTopic=TOPIC19&hidTopicName=Disability+status&hidYear=2016&irbShowFootnotes=Show&rdICL-iclIndicators=BLIND%2cDECIDE%2cDIFFALON%2cDIFFDRES%2cDIFFWALK&iclIndicators_rdExpandedCollapsedHistory=&iclIndicators=BLIND%2cDECIDE%2cDIFFALON%2cDIFFDRES%2cDIFFWALK&hidPreviouslySelectedIndicators=&DashboardColumnCount=2&rdShowElementHistory=divTopicUpdating%3dHide%2cislTopic%3dShow%2cdivYearUpdating%3dHide%2cislYear%3dShow%2c&rdScrollX=0&rdScrollY=200&rdRnd=2207">CDC reports that mobility disabilities are more common than cognitive ones</a>, and <a href="https://disabilitycompendium.org/compendium/2017-annual-disability-statistics-compendium?page=6">the U.S. Census reports that ambulatory disabilities are more common than cognitive ones</a>.</p>
              </li>
              <li><p class="li">Who supplies accessibility?</p></li>
              <li><p class="li">Accessibility: hard or easy?</p></li>
              <li><p class="li">Accessibility: ugly or elegant?</p></li>
              <li>
                <p class="li">Inclusive, universal, and adaptive ideas of accessible design</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/universal-design#equitable-use">A11yGurus argues against separate versions for disabled users</a>, but <a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/universal-design#flexibility">it also argues for abundant optionality in interfaces</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/inclusive-design/one-interface-fits-all">A11yGurus discussion of this</a>.</p>
                <p class="note covert">Decision whether to differentiate UI for ATs, e.g. making content announceable with screen readers but not visible.</p>
                <p class="note covert">Differentiation techniques, including positioning of text off screen in infinitesimal boxes.</p>
                <p class="note covert"><a href="https://uxplanet.org/a-primer-to-web-accessibility-for-designers-2c548448c612">Primer on accessible design</a>.</p>
              </li>
              <li>
                <p class="li">The future of accessibility</p>
                <p class="note covert">
                  See <a href="https://youtu.be/4c1lqFXHvqI">lecture by David Eagleman</a> about future technologies that will permit persons without a sense to teach their brains to perceive that sense&rsquo;s signals via another sense.
                </p>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Accessible development at Utopia (1)</p>
            <ol class="covert">
              <li>
                <p class="li">Our core purpose and accessibility</p>
                <p class="note covert">Is financial illiteracy a disability?</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/personas/cognitive">A11yGurus says math anxiety and inability to solve mathematical problems are disabilities</a>.</p>
              </li>
              <li><p class="li">Inclusivity, diversity, and accessibility</p></li>
              <li><p class="li">Competing with accessibility</p></li>
              <li><p class="li">Complying with accessibility</p></li>
              <li><p class="li">Our accessibility risks and costs</p></li>
              <li><p class="li">Our accessibility opportunities</p></li>
              <li><p class="li">Utopia&rsquo;s accessibility policies</p></li>
              <li><p class="li">How we organize accessibility</p></li>
              <li><p class="li">Where you get accessibility support</p></li>
              <li>
                <p class="li">Our special accessibility challenges</p>
                <ol>
                  <li>
                    <p class="li">Communicating financial data accessibly</p>
                    <p class="note covert">Success Criterion 3.1.3.</p>
                    <p class="note covert"><code>abbr</code> with <code>title</code> not available for keyboard focus or disclosure, per <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/guidelines#abbr"></a>.</p>
                  </li>
                  <li><p class="li">Making financial transactions accessible</p></li>
                  <li>
                    <p class="li">Accessibly preventing and correcting errors</p>
                    <p class="note covert">Success Criterion 3.3.4.</p>
                  </li>
                  <li>
                    <p class="li">Accessible investor education</p>
                    <p class="note covert">Enrico G. De Giorgi and Ola Mahmoud, <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3018421">&ldquo;How Elementary is Diversification? A Study of Children's Portfolio Choice&rdquo;</a>, 2017, found experimentally that the value of diversification in counteracting risk is not intuitive.</p>
                    <p class="note covert">Rob Ranyard (ed.), <cite>Economic Psychology</cite> (Wiley, 2017), ch. 23 (&ldquo;Ageing and Economic Decision-Making&rdquo;), found (p. 377) that the efficacy of narrative formats and emotional foci increases with age, and recommended (p. 380) &ldquo;that [financial-literacy] interventions targeting older adults should take into account age-related declines in cognitive ability, experience-based knowledge, emotions, and motivation.&rdquo;</p>
                  </li>
                  <li><p class="li">Accessibility, privacy, and investor protection</p></li>
                  <li><p class="li">Accessibility and security</p></li>
                  <li>
                    <p class="li">Accessibility and internationalization</p>
                    <p class="note covert">
                      <code>lang</code> attribute.
                    </p>
                  </li>
                  <li><p class="li">Making legacy interfaces accessible</p></li>
                  <li><p class="li">Accessible hiring, onboarding, and crew experience</p></li>
                  <li><p class="li">Managing accessible projects</p></li>
                  <li><p class="li">Roles, collaboration, and specialization for accessibility</p></li>
                  <li><p class="li">Remediation versus reimplementation for accessibility</p></li>
                  <li><p class="li">Doing agile and journeys accessibly</p></li>
                  <li>
                    <p class="li">Standardizing accessibility</p>
                    <ol>
                      <li><p class="li">Developing enterprise accessibility standards</p></li>
                      <li>
                        <p class="li">Baking accessibility into shared components</p>
                        <p class="note covert">
                          <a href="https://inclusive-components.design">Inclusive Components</a> (recommended by Marcy Sutton, A11yGurus).
                        </p>
                      </li>
                      <li><p class="li">Accessible branding</p></li>
                    </ol>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Basic principles of accessible code</p>
            <p class="note covert">A11yGurus outlines developer training main topics as keyboard navigability, images, forms, and structure. Of these, keyboard navigability accounts for about 40% of accessibility problems, per Denis Boudreau, 25 October 2018.</p>
            <ol>
              <li>
                <p class="li">The rules of accessibility</p>
                <ol class="covert">
                  <li>
                    <p class="li">International standards of accessibility</p>
                    <ol class="covert">
                      <li><p class="li">The DOM and the AOM</p></li>
                      <li><p class="li">The accessibility API</p></li>
                      <li><p class="li">The accessibility Tree</p></li>
                      <li><p class="li">WCAG</p></li>
                      <li><p class="li">ARIA</p></li>
                    </ol>
                  </li>
                  <li><p class="li">Laws, regulations, and adjudications on accessibility</p></li>
                  <li><p class="li">Utopia standards of accessibility</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Best practices in accessible development</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/summary">A11yGurus advises, &ldquo;Don't be satisfied with "good enough" or compliant.&rdquo;</a> <a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#guidelines">A11yGurus further says &ldquo;the guidelines don't cover every last aspect of accessibility.&rdquo;</a> And <a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#guidelines">it also says that WCAG underrepresents the needs of users with cognitive disabilities</a>.</p>
                <p class="note covert"><a href="http://a11y-style-guide.com/">A11Y Style Guide</a>.</p>
                <ol class="covert">
                  <li>
                    <p class="li">Accessibly semantic HTML</p>
                    <p class="note covert">HTML5 rather than <code>div</code> + ARIA.</p>
                    <p class="note covert">Unique <code>id</code> values and element attributes.</p>
                    <p class="note covert">Closing-tag syntax compliance.</p>
                    <p class="note covert"><code>title</code> value descriptive and identical to visible title.</p>
                    <p class="note covert"><code>title</code> value begins with differentiator.</p>
                  </li>
                  <li>
                    <p class="li">Accessible CSS</p>
                    <p class="note covert">
                      See <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/CSS_and_JavaScript#CSS">&ldquo;CSS and JavaScript accessibility best practices&rdquo;</a>.
                    </p>
                    <p class="note covert">Doctrine that accessibility should be CSS-independent.</p>
                  </li>
                  <li>
                    <p class="li">Accessible JavaScript</p>
                    <p class="note covert">
                      See <a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/CSS_and_JavaScript#JavaScript">&ldquo;CSS and JavaScript accessibility best practices&rdquo;</a>.
                    </p>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Checking designs for accessibility</p>
            <ol>
              <li>
                <p class="li">Is the layout accessible?</p>
                <ol class="covert">
                  <li>
                    <p class="li">Accessibly serializable?</p>
                    <p class="note covert">The concept of visual order: meaning?</p>
                    <p class="note covert"><code>tabindex</code> values: accessibility effects of positive values.</p>
                    <p class="note covert">Dimensionality and complexity in space and time (including animation, flashing, blinking). <a href="https://dequeuniversity.com/class/fundamentals2/personas/cognitive">Interferes with comprehension for users with Down syndrome</a>.</p>
                  </li>
                  <li>
                    <p class="li">Structure accessible?</p>
                    <p class="note covert">HTML5 structural elements (a.k.a. sections, layout elements, regions, or landmarks). See <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure">MDN Web Docs</a>.</p>
                    <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/audio-structural/page#ideal-landmarks">A11yGurus recommends a sparse structure</a>, typically with only 3 top-level landmarks: <code>header</code>, <code>main</code>, and <code>footer</code>, and with the <code>header</code> element containing only 2 more landmarks: <code>nav</code> and <code>search</code>.</p>
                    <p class="note covert">Explain options for naming landmarks; cf. <a href="https://dequeuniversity.com/class/semantic-structure2/landmarks/creating-landmarks">A11yGurus</a>.</p>
                    <p class="note covert"><a href="https://dequeuniversity.com/class/semantic-structure2/landmarks/best-practices#limit-of-type-per-page">A11yGurus advises, &ldquo;the HMTL 5 specification allows multiple instances of the equivalent landmarks: <code>header</code>, <code>main</code>, and <code>footer</code>. The official restriction is only on ARIA landmarks. Even so, it is appropriate in most web designs to have only one each of these landmarks, whether they are specified using ARIA or HTML 5.&rdquo;</a></p>
                    <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/audio-structural/page#ideal-headings">A11yGurus recommends</a> 1 <code>h1</code> element per page, treating a dialog as a page.</p>
                    <p class="note covert"><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_HTML_sections_and_outlines#Defining_headings">MDN Web Docs</a> endorses 1 <code>h1</code> element per section, explaining that this allows sections to be arbitrarily embeddable.</p>
                    <p class="note covert">Simplicity. <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#visual-interface">A11yGurus advises, &ldquo;Each web page should have one main task or feature&rdquo;</a>.</p>
                    <p class="note covert">Simplicity. <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#visual-interface">A11yGurus also advises that &ldquo;the visual interface around [the page&rsquo;s main] task or feature should be minimal.&rdquo;</a></p>
                    <p class="note covert">Simplicity. <a href="https://dequeuniversity.com/class/visual-design2/summary">A11yGurus also advises</a> that &ldquo;The layout SHOULD have only one main visual focus&rdquo; and &ldquo;The design SHOULD draw attention to the intended visual focus.</p>
                  </li>
                  <li><p class="li">Accessibly responsive?</p></li>
                  <li><p class="li">Tabular layout accessible?</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Are the sizes accessible?</p>
                <p class="note covert">In the <code>meta name="viewport" content="height = u, width=v, initial-scale=w, minimum-scale=x, maximum-scale=y, user-scalable=z"</code> element,  <code>maximum-scale</code> not <code>1</code> and <code>user-scalable</code> not <code>no</code>.</p>
                <p class="note covert"><code>rem</code> sizing.</p>
                <p class="note covert">Text size doublable without impairment.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/checklist">A11yGurus says, &ldquo;Is the design optimized for all zoom states? Simplify the design as much as possible, eliminating horizontal scrolling.&rdquo;</a> But it does not say how to do that.</p>
                <p class="note covert">Font size an example of accessibility necessity that is ignored by WCAG. If 2 points, WCAG would let user increase it to 4 points, but still illegible. Accessibility is more than WCAG compliance.</p>
              </li>
              <li>
                <p class="li">Is the text accessible?</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/fundamentals2/personas/reading">Users with dyslexia benefit from alternative non-text</a>.</p>
                <p class="note covert">Line height.</p>
                <p class="note covert">Justification.</p>
                <p class="note covert">Letter case; all-caps, small caps.</p>
                <p class="note covert">Column width.</p>
              </li>
              <li>
                <p class="li">Are the images accessible?</p>
                <p class="note covert"><code>alt</code>, <code>longdesc</code> (now facing deprecation), <code>title</code> (a global attribute), <code>aria-label</code>, <code>aria-labelledby</code>, and <code>aria-describedby</code> attributes of <code>img</code> element.</p>
                <p class="note covert"><code>figure</code> element.</p>
                <p class="note covert">Conflicting preferences for image description.</p>
                <p class="note covert">SVG.</p>
                <p class="note covert">Background images.</p>
              </li>
              <li>
                <p class="li">Are the colors accessible?</p>
                <p class="note covert">
                  See <a href="https://webaim.org/resources/linkcontrastchecker/">tool that checks link-color accessibility</a>.
                </p>
                <p class="note covert">Reasons for nonreliance on color for semantic representation: color-blindness, UA color calibration differences, UA hardware color rendering differences, user adjustments to contrast and monochromaticity, color perception effects of ambient light conditions.</p>
              </li>
              <li>
                <p class="li">Are the links and controls accessible?</p>
                <p class="note covert">Size large enough to be reliably clicked or touched.</p>
                <p class="note covert">Labeling.</p>
              </li>
              <li>
                <p class="li">Is the audio and video content accessible?</p>
                <p class="note covert">Speech-to-text automation: <a href="https://support.google.com/docs/answer/4492226?hl=en#">Voice Typing</a>, Windows Speech Recognition, OS X Dictation, <a href="https://www.globalme.net/blog/the-present-future-of-speech-recognition">A Complete Guide to Speech Recognition Technology</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/silent-visual#multimedia">A11yGurus recommends WebVTT and format customization</a>.</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/silent-visual#sign">A11yGurus says sign language is better than captions for many deaf users</a>.</p>
                <p class="note covert">Automatic captioning in Microsoft Streams.</p>
              </li>
              <li>
                <p class="li">Are data presented accessibly?</p>
                <p class="note covert"><a href="http://www.readabilityformulas.com/free-readability-formula-tests.php">Readability formulas</a>.</p>
                <ol class="covert">
                  <li>
                    <p class="li">Time-series data</p>
                    <p class="note covert">
                      Donald J. Wheeler, <cite>Understanding Variation: The Key to Managing Chaos</cite>, 2nd edn (SPC Press, 2000), argues that people often mismanage work processes because they present time-series data (to themselves) inappropriately. He says they typically compare the latest amount with one other amount, such as the immediately prior one or the amount from a month or a year earlier, ignoring the whole series of amounts in between. By doing that, he says, they wrongly interpret the 2-item comparison as signaling progress or regress, when, most often, it merely reflects normal variation, i.e. &ldquo;noise&rdquo;. He advocates inspecting extended series of data to identify the upper and lower bounds of the noise, allowing us to pay attention only to the amounts beyond those bounds, i.e. the &ldquo;signals&rdquo;. Then we can work to diagnose signals and respond to the forces causing them.
                    </p>
                    <p class="note covert">
                      The pattern of 2-item comparison is common in the financial services industry, e.g. in the reporting of changes in the prices of securities.
                    </p>
                  </li>
                  <li><p class="li">Partition data</p></li>
                  <li>
                    <p class="li">2-dimensional data</p>
                    <p class="note covert">Captions.</p>
                    <p class="note covert">Row and column headers.</p>
                    <p class="note covert">
                      Donald J. Wheeler, <cite>Understanding Variation: The Key to Managing Chaos</cite>, 2nd edn (SPC Press, 2000), on pp. 5&ndash;6 says: &ldquo;While tables of values may be used to present all of the relevant data, they are not easy to summarize. It is difficult to digest the information contained in tables of numbers. &hellip; The human mind just does not do a very good job of absorbing large amounts of data. &hellip; tables present an abundance of extraneous details. &hellip; The solution to these problems lies in a shift from a digital representation of data to a form that is more friendly to humans&mdash;graphs.&rdquo;
                    </p>
                    <p class="note covert">
                      However, Edward R. Tufte, <cite>The Visual Representation of Quantitative Information</cite>, 2nd edition (Graphics Press, 2001), in chapter 2 (&ldquo;Graphical Integrity&rdquo;) describes how graphical representations of quantitative information can be deceptive.
                    </p>
                  </li>
                  <li><p class="li">Multi-dimensional data</p></li>
                  <li><p class="li">Summaries of data</p></li>
                  <li><p class="li">Query controls for data</p></li>
                  <li><p class="li">Choosing numeric, graphic, and infographic formats</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Are the interactions accessible?</p>
                <ol>
                  <li>
                    <p class="li">Timing</p>
                    <p class="note covert">20-second warning time for time extension per WCAG, but <a href="https://dequeuniversity.com/class/fundamentals2/personas/motor">A11yGurus recommends 120 seconds or more</a>.</p>
                  </li>
                  <li>
                    <p class="li">Multi-stage interactions</p>
                    <p class="note covert">Designing processes so that users are not required to remember earlier stages.</p>
                  </li>
                  <li>
                    <p class="li">Event handling</p>
                    <ol class="covert">
                      <li><p class="li">Making event handling accessibly predictable</p></li>
                      <li><p class="li">Giving accessible notice of changed context and content</p></li>
                      <li><p class="li">Preserving accessible user control over events</p></li>
                    </ol>
                  </li>
                  <li>
                    <p class="li">Navigation</p>
                    <ol class="covert">
                      <li>
                        <p class="li">Efficiency</p>
                        <p class="note covert">Ensure that the target of the skip link is focusable. If not already, give it a tabindex="-1" attribute. It can be the <code>main</code> element. <a href="https://dequeuniversity.com/class/semantic-structure2/within-pages/skip-navigation#skip-link-functinoal">A11yGurus explains why</a>.</p>
                        <p class="note covert">Benefits of durably visible skip links.</p>
                        <p class="note covert">Tables of contents, e.g. in <code>header</code> element. <a href="https://dequeuniversity.com/class/semantic-structure2/within-pages/page-toc">Recommended by A11yGurus</a>.</p>
                      </li>
                      <li>
                        <p class="li">Predictability</p>
                        <p class="note covert">A link&rsquo;s accessible name can consist of the value of the <code>alt</code> attribute of an image that is the content of the link.</p>
                        <p class="note covert">Link accessible names&rsquo; self-sufficiency.</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/semantic-structure2/links/external-windows-files">Methods for defining link metadata</a>.</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/guidelines#navigation">A11yGurus recommends not deleting the current page from the navigation list, even if its link status is deleted</a>.</p>
                      </li>
                      <li>
                        <p class="li">Focus</p>
                        <p class="note covert">Reliance on a browser focus indicator versus provision of a reliably visible one.</p>
                      </li>
                      <li><p class="li">Response to button and link activation</p></li>
                      <li>
                        <p class="li">UI navigation and browser navigation</p>
                        <p class="note covert">Page: an obsolete concept?</p>
                      </li>
                      <li><p class="li">Layers, tabs, and windows</p></li>
                    </ol>
                  </li>
                  <li>
                    <p class="li">Forms</p>
                    <ol class="covert">
                      <li>
                        <p class="li">Search</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/tactile-structural#ideal">A11yGurus recommends using terms users will expect</a> (e.g., &ldquo;staff&rdquo; instead of &ldquo;crew&rdquo;.</p>
                      </li>
                      <li>
                        <p class="li">Free text input</p>
                        <p class="note covert">Unreliability of contrast and durability of placeholders.</p>
                      </li>
                      <li>
                        <p class="li">Type-constrained input</p>
                        <p class="note covert">Have browser perform intra-field validation? <a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#feedback">A11yGurus says</a> it is the fastest type and thus good, but may be lost on users of screen readers, and enforcement of required fields interferes with exploratory navigation.</p>
                      </li>
                      <li><p class="li">Toggling and election</p></li>
                      <li><p class="li">Selection among options</p></li>
                      <li>
                        <p class="li">Decisions about amounts</p>
                        <p class="note covert">Success Criterion 3.3.4.</p>
                      </li>
                      <li><p class="li">Partitioning</p></li>
                      <li>
                        <p class="li">Authentication</p>
                        <p class="note covert">Deliberate difficulty (e.g. CAPTCHAs) vs. cognitive and experiential disabilities.</p>
                      </li>
                      <li><p class="li">Agency decisions</p></li>
                      <li>
                        <p class="li">Form-input error handling</p>
                        <p class="note covert">Error diagnosis</p>
                        <p class="note covert">Error-message positioning</p>
                        <p class="note covert">Error-message notification</p>
                        <p class="note covert">Error-message styling</p>
                      </li>
                    </ol>
                  </li>
                  <li>
                    <p class="li">Help</p>
                    <p class="note covert">Help icons.</p>
                    <p class="note covert">Response to help invocation.</p>
                    <p class="note covert">Telephone routing.</p>
                    <p class="note covert">Telephone support.</p>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Accessible implementation</p>
            <ol>
              <li>
                <p class="li">Providing required support for assistive technologies</p>
                <p class="note covert"><code>lang</code> attribute of <code>html</code> element.</p>
              </li>
              <li><p class="li">Server and client accessibility roles</p></li>
              <li><p class="li">Making single-page applications accessible</p></li>
              <li><p class="li">Showing and hiding accessibly</p></li>
              <li>
                <p class="li">Implementing navigation accessibly (1)</p>
                <p class="note covert"><code>tabindex</code> requirements and best practices.</p>
              </li>
              <li><p class="li">Implementing responsiveness accessibly</p></li>
              <li>
                <p class="li">Making text accessibly resizable</p>
                <p class="note covert">Making reflow happen where not natively supported. Reflow also called liquid layout.</p>
                <p class="note covert">See post by Jonathan Avila in IAAP Connections, 2018-10-13. Inter alia, &ldquo;Mobile browsers except for Dolphin on Android don't support reflow.&rdquo;</p>
              </li>
              <li>
                <p class="li">Implementing tables accessibly (1)</p>
                <p class="note covert">Conditions under which cell headings must be specified per-cell.</p>
                <p class="note covert">Captions and sections.</p>
                <p class="note covert"><code>td</code> element header references.</p>
                <p class="note covert"><code>th</code> element scopes.</p>
              </li>
              <li>
                <p class="li">Implementing forms accessibly (1)</p>
                <p class="note covert">Typed input: where to validate?</p>
                <p class="note covert">Choice among labeling syntaxes.</p>
                <p class="note covert">Grouping controls with <code>fieldset</code> elements, labeling groups with <code>legend</code> elements, and labeling option groups with <code>name</code> attributes.</p>
              </li>
              <li>
                <p class="li">Making accessibility performant</p>
                <p class="note covert">Slow and expensive transmission, thus video, audio, and image size limitation.</p>
              </li>
              <li>
                <p class="li">Choosing and using frameworks accessibly</p>
                <ol>
                  <li><p class="li">Using CSS grid and flexbox accessibly</p></li>
                  <li><p class="li">Using Bootstrap accessibly</p></li>
                  <li>
                    <p class="li">Accessible development with Angular</p>
                    <p class="note covert">Angular Material</p>
                  </li>
                  <li><p class="li">Accessible development with React</p></li>
                  <li><p class="li">Accessible development with Vue</p></li>
                  <li><p class="li">Accessible development with Ionic</p></li>
                  <li><p class="li">Accessible development with React Native</p></li>
                  <li><p class="li">Leveraging VUI for accessibility</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Leveraging accessibility features of mobile APIs</p>
                <ol class="covert">
                  <li><p class="li">iOS</p></li>
                  <li><p class="li">Android</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Generating accessible documents</p>
                <ol class="covert">
                  <li><p class="li">PDF files</p></li>
                  <li><p class="li">Editing PDF files for accessibility</p></li>
                  <li><p class="li">Choosing document formats for accessibility</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Generating accessible messages</p>
                <ol class="covert">
                  <li><p class="li">email</p></li>
                  <li><p class="li">SMS</p></li>
                  <li><p class="li">Social-media messages</p></li>
                </ol>
              </li>
            </ol>
          </li>
          <li>
            <p class="li">Verifying accessibility</p>
            <ol>
              <li>
                <p class="li">Automatic accessibility testing of web interfaces</p>
                <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/accessibility-inclusive-design/accessibility#guidelines">A11yGurus says &ldquo;the guidelines were written to be objectively testable, which means that all of the subjective aspects of accessibility were purposely excluded from the guidelines.&rdquo;</a>. But in fact some WCAG 2 guidelines are subjective.</p>
                <p class="note covert"><a href="http://webdriver.io/">WebdriverIO</a>.</p>
                <p class="note covert"><a href="https://github.com/DevExpress/testcafe">Testcafe</a>.</p>
                <p class="note covert"><a href="https://blog.hichroma.com/introducing-chromatic-ui-testing-for-react-c5cc01a79aaa">Chromatic</a>.</p>
                <p class="note covert"><a href="https://applitools.com/">Applitools</a>.</p>
                <p class="note covert"><a href="https://github.com/paypal/AATT">AATT</a>.</p>
                <p class="note covert"><a href="http://webdriver.io/">WebdriverIO</a>.</p>
                <ol class="covert">
                  <li><p class="li">Accessibility linting</p></li>
                  <li>
                    <p class="li">Accessibility testing with web services</p>
                    <p class="note covert"><a href="https://www.powermapper.com/products/sortsite/checks/accessibility-checks/">PowerMapper</a>.</p>
                  </li>
                  <li><p class="li">Accessibility testing with browser extensions</p></li>
                  <li><p class="li">Accessibility testing with axe-core</p></li>
                  <li><p class="li">Creating unit tests for accessibility</p></li>
                  <li><p class="li">Creating integration tests for accessibility</p></li>
                  <li><p class="li">Creating end-to-end tests for accessibility</p></li>
                  <li><p class="li">Accessibility regression management in CI-CD</p></li>
                  <li><p class="li">Accessibility experimentation in production</p></li>
                  <li><p class="li">Generating and mining analytics for accessibility insights</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Automatic accessibility testing of native interfaces</p>
                <ol class="covert">
                  <li><p class="li">Testing native iOS apps for accessibility</p></li>
                  <li><p class="li">Testing native Android apps for accessibility</p></li>
                </ol>
              </li>
              <li>
                <p class="li">Human accessibility testing</p>
                <ol class="covert">
                  <li><p class="li">Inspecting code for accessibility</p></li>
                  <li>
                    <p class="li">Testing with device variation and simulation</p>
                    <p class="note covert">Mouseless use precludes hovering.</p>
                  </li>
                  <li><p class="li">Testing with keyboard navigation</p></li>
                  <li>
                    <p class="li">Testing with assistive technologies</p>
                    <ol class="covert">
                      <li><p class="li">Keyboards, mice, trackpads, and fingers</p></li>
                      <li><p class="li">Magnification tools</p></li>
                      <li><p class="li">Contrast customization</p></li>
                      <li>
                        <p class="li">Screen readers</p>
                        <p class="note covert">Standard assumption: If a user cannot read and needs text oralized, the producer is not responsible for doing that.</p>
                        <p class="note covert"><code>lang</code> attribute.</p>
                        <p class="note covert">Which text properties do screen readers announce? Italics, bold face, size, font family, decoration, indentation, justification, other position? E.g., code rendered in monospace font visually indistinguishable from code marked as <code>code</code>, but only the latter is identified by ATs (or is even it?).</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/tactile-structural#multimedia">A11yGurus says that screen readers don&rsquo;t resume descriptions after being paused</a>.</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/cognitive/key-concepts#auditory-cues">A11yGurus warns that audio would collide with screen-reader output</a>.</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/semantic-structure2/within-pages/">A11yGurus says screen readers provide navigation help unavailable to persons not using them</a>.</p>
                        <ol>
                          <li><p class="li">NVDA</p></li>
                          <li><p class="li">JAWS</p></li>
                          <li><p class="li">VoiceOver on OS X</p></li>
                          <li><p class="li">VoiceOver on iOS</p></li>
                          <li><p class="li">TalkBack</p></li>
                        </ol>
                      </li>
                      <li>
                        <p class="li">Braille output</p>
                        <p class="note covert"><a href="https://dequeuniversity.com/class/ux2/affordances/tactile-structural#ideal">A11yGurus says braille reading is slower than visual reading or screen-reader hearing</a>.</p>
                      </li>
                    </ol>
                  </li>
                  <li>
                    <p class="li">End-user accessibility testing</p>
                    <p class="note covert"><a href="https://www.applause.com/usability/">Applause</a>.</p>
                  </li>
                </ol>
              </li>
            </ol>
          </li>
        </ol>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/a11y-tree-inspect/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Inspecting the Accessibility Tree</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Inspecting the Accessibility Tree</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 3 December 2018</p>
      </header>
      <section>
        <h2>Prerequisites</h2>
        <ul>
          <li>Basic knowledge of HTML</li>
          <li>Access to version xx or later of the Google Chrome browser for Windows or OS X</li>
        </ul>
      </section>
      <section>
        <h2>What is the Accessibility Tree?</h2>
        <p>When you open an HTML file in a web browser, the browser derives a document object model (DOM) from the file. It then uses the operating system&rsquo;s accessibility API to derive an Accessibility Tree from the DOM.</p>
        <p>The Accessibility Tree is a simplified version of the DOM that contains information usable by current and future assistive technologies (e.g., screen readers, eye trackers, magnifiers, search engines, form autofill agents, fraud prevention tools, portfolio rebalancers, and robotic investment advisors). They can use the Accessibility Tree to give better service to their users.</p>
        <p>Whenever the DOM changes, the Accessibility Tree may change, too, to reflect the DOM. User actions and other events can produce such changes, under the control of JavaScript scripts.</p>
      </section>
      <section>
        <h2>Using the Accessibility Tree</h2>
        <p>For you as a web developer or tester, the Accessibility Tree has potential as a testing tool. To verify that your code works well with the many assistive technologies in use would be impractically expensive. But they rely on the Accessibility Tree, so if you verify that your code does what you want to the Accessibility Tree then you know that you have &ldquo;done your part&rdquo; to make it work with assistive technologies.</p>
        <p><a href="http://wicg.github.io/aom/explainer.html">Standards are now in development</a> that will expose the Accessibility Tree to JavaScript scripts, making it practical for web developers to write tests using the Accessibility Tree.</p>
        <p>In the meantime, some accessibility features can be automatically tested, and you can also visually inspect the Accessibility Tree as a form of non-automated testing.</p>
        <p>At present, Chrome (version 65 and later) and Firefox (version 61 and later) permit inspection of the Accessibility Tree. Under OS X, XCode also permits this (so it isn&rsquo;t a feature of Safari).</p>
      </section>
      <section>
        <h2>Exercise</h2>
        <ol>
          <li>Launch the Chrome browser in Windows or OS X.</li>
          <li>Open any web page.</li>
          <li>
            Open the Chrome developer tools. You can do this in any of these ways:
            <ul>
              <li>Using the &ldquo;More tools&rdquo; submenu of the &ldquo;Customize and control Google Chrome&rdquo; menu</li>
              <li>OS X: Using the &ldquo;Developer&rdquo; item of the &ldquo;View&rdquo; menu</li>
              <li>Windows: Entering the <code>CTRL-SHIFT-i</code> command</li>
              <li>OS X: Entering the <code>CMD-SHIFT-i</code> command</li>
              <li>Entering the <code>F12</code> command</li>
            </ul>
          </li>
          <li>Ensure that the &ldquo;Elements&rdquo; panel is selected.</li>
          <li>Select the &ldquo;Accessibility&rdquo; pane of that panel.</li>
          <li>
            In the &ldquo;Elements&rdquo; panel, select any element. You can do this in either of these ways:
            <ul>
              <li>Expand expandable elements and hover over them until you find an element of interest to you is highlighted. Then select that element.</li>
              <li>Control- or right-click the first input field and select &ldquo;Inspect element&rdquo; from the contextual menu.</li>
            </ul>
          </li>
          <li>Find the Accessibility Tree at the top of the Accessibility pane.</li>
          <li>Examine the structure of the Accessibility Tree. Note that it consists of nodes, each being shown with a &ldquo;role&rdquo;. Each node is either anonymous or named. If it is named, its &ldquo;accessible name&rdquo; (also called &ldquo;label&rdquo;) appears after its role. For example, a radio button could appear as &ldquo;radio&rdquo; if anonymous, or as &ldquo;radio "index funds"&rdquo; if named.</li>
          <li>Observe any named nodes in the Accessibility Tree and find where in the DOM their names came from. There are rules for identifying any node&rsquo;s accessible name. When you learn accessible UI development, in large part you are learning how to write code that complies with those rules so that nodes will have accessible names instead of being anonymous. Named nodes are usually necessary for accessibility. If an assistive technology can tell a user only that something is a radio button, that doesn&rsquo;t do much good. If it can tell the user that it&rsquo;s a radio button labeled &ldquo;index funds&rdquo;, the user then can decide whether to select that button.</li>
          <li>Begin editing the HTML in your open copy of the page. Do this by clicking on the <code>&hellip;</code> button next to the highlighted element and selecting &ldquo;Edit as HTML&rdquo; from the contextual menu.</li>
          <li>Try to edit the HTML in a way that will change the Accessibility Tree.</li>
          <li>Commit your change by clicking outside the editing box.</li>
          <li>Check whether the change you made in the HTML caused any change in the Accessibility tree. If not, try another change.</li>
        </ol>
      </section>
      <section>
        <h2>Debriefing</h2>
        <p>Inspecting the Accessibility Tree is one of several methods for verifying that your code is as accessible as you want it to be. It is powerful because the Accessibility Tree is a gateway to several different assistive technologies. Its power is currently limited by the fact that you must write routines in C or C++ in order to interrogate the Accessibility Tree automatically. Work is in progress to change this. In the meantime, you can inspect it visually, as you did in this exercise.</p>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/button-explained/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly explained button</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly explained button</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 24 November 2018</p>
      </header>
      <section>
        <h2>The problem</h2>
        <p>You want to explain accessibly a button in a form. <a href="https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element">You can do that with <code>label</code> elements</a>, but <cite>MDN Web Docs</cite> has warned that <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#Buttons">this can interfere with assistive technologies</a>. What should you do?</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            src="../../static/a11y-logo.png"
            alt="Utopia accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section>
        <h2>Solutions</h2>
        <p>Some Utopia web pages with explained buttons:</p>
        <ul>
          <li><a href="">Name</a></li>
        </ul>
        <p>Analysis.</p>
      </section>
      <section>
        <h2>Example 1</h2>
        <p>Button with <code>label</code> elements.</p>
        <div class="example">
          <form>
            <label>
              Click this button to close your account.
              <button type="button">Proceed</button>
            </label>
          </form>
        </div>
        <p>Some accessibility features:</p>
        <ul>
          <li>Feature.</li>
        </ul>
        <p>Testing has revealed:</p>
        <ul>
          <li>Revelation.</li>
        </ul>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/control-described/bad.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Control labeling example: inaccessible</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Control labeling example:<br>inaccessible</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 1 December 2018</p>
      </header>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            Name of joint owner:
            <input type="text" size="40" maxlength="40" required>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <input type="radio" name="ownform" value="common">
              Tenancy in common
            </p>
            <p>
              <input type="radio" name="ownform" value="entirety">
              Tenancy by the entirety
            </p>
            <p>
              <input type="radio" name="ownform" value="survivorship" checked>
              Joint tenancy with rights of survivorship
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/control-described/exercise.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessible control labeling: Exercise</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessible control labeling: Exercise</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 1 December 2018</p>
      </header>
      <section>
        <h2>Prerequisites</h2>
        <p>This exercise presupposes that you have studied the wrapping and pointing techniques for labeling form controls.</p>
      </section>
      <section>
        <h2>Your task</h2>
        <ol>
          <li>Launch the Chrome browser in Windows or OS X.</li>
          <li>Open the page <a href="https://bitbucket.utopia.com:8443/pages/~UQXQ/devtrain/master/browse/modules/control-labeled/bad.html">Control labeling example: inaccessible</a>.</li>
          <li>
            Open the Chrome developer tools. You can do this in any of these ways:
            <ul>
              <li>Using the &ldquo;More tools&rdquo; submenu of the &ldquo;Customize and control Google Chrome&rdquo; menu</li>
              <li>OS X: Using the &ldquo;Developer&rdquo; item of the &ldquo;View&rdquo; menu</li>
              <li>Windows: Entering the <code>CTRL-SHIFT-i</code> command</li>
              <li>OS X: Entering the <code>CMD-SHIFT-i</code> command</li>
              <li>Entering the <code>F12</code> command</li>
            </ul>
          </li>
          <li>Ensure that the &ldquo;Elements&rdquo; panel is selected.</li>
          <li>Select the &ldquo;Accessibility&rdquo; pane of that panel.</li>
          <li>
            In the &ldquo;Elements&rdquo; panel, select the first <code>input</code> element. You can do this in either of these ways:
            <ul>
              <li>Expand the expandable elements and hover over them until you find the <code>input</code> element that highlights the first input field. Then select that element.</li>
              <li>Control- or right-click the first input field and select &ldquo;Inspect element&rdquo; from the contextual menu.</li>
            </ul>
          </li>
          <li>Note that in the Accessibility Tree (at the top of the Accessibility pane) the <code>WebArea</code> node has a name, but the <code>textbox</code> node has no name.</li>
          <li>Begin editing the HTML in your open copy of the page. Do this by clicking on the <code>&hellip;</code> button and selecting &ldquo;Edit as HTML&rdquo; from the contextual menu.</li>
          <li>Edit the HTML to associate the label with the <code>input element</code>, using either the wrapping technique or the pointing technique.</li>
          <li>Commit your change by clicking outside the editing box.</li>
          <li>Check whether the <code>textbox</code> node in the Accessibility tree now has the name &ldquo;Name of joint owner:&rdquo;. If so, you have succeeded. If not, diagnose and correct the error.</li>
          <li>Repeat the previous 6 steps (steps 6&ndash;11) on the other 3 <code>input</code> elements.</li>
          <li>
            If you want help on this task, you can compare your work with two files that contain the same form revised for accessibility:
            <ul>
              <li><a href="https://bitbucket.utopia.com:8443/pages/~UQXQ/devtrain/master/browse/modules/control-labeled/good-wrap.html">Revised with the wrapping technique</a></li>
              <li><a href="https://bitbucket.utopia.com:8443/pages/~UQXQ/devtrain/master/browse/modules/control-labeled/good-point.html">Revised with the pointing technique</a></li>
            </ul>
          </li>
          <li>If you wish, you may save your revised page and copies of the <code>style.css</code> and <code>script.js</code> files in a local directory.</li>
        </ol>
      </section>
      <section>
        <h2>Debriefing</h2>
        <p>By explicitly associating labels with form controls, you changed the Accessibility Tree to give &ldquo;accessible names&rdquo; to those controls. Current and future assistive technologies (screen readers, search engines, form autofill agents, fraud prevention tools, portfolio rebalancers, robotic asset managers, etc.) can use these names to give better service to their users.</p>
        <p>You can illustrate the impact of your work by running a screen reader, such as NVDA in Windows, VoiceOver in OS X or iOS, or TalkBack in Android, on the page. Clicking on a control, or moving to it with the <code>TAB</code> key or an arrow key, will make the screen reader announce what it knows about the control. On the original page, it won&rsquo;t know what the control is about. On your revised page, it will. A user who relies on a screen reader to understand the controls will fail on the original page, but succeed on your revised page.</p>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/control-described/exercise-0.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly labeled controls: Exercise 0</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly labeled controls: Exercise 0</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 28 November 2018</p>
      </header>
      <section>
        <h2>Your task</h2>
        <p>Edit the HTML source code of this page to use standard HTML5 elements producing accessible names for the controls in the form below.</p>
        <p>You can do this (1) within your browser&ldquo;s developer tools or (2) by saving the <code>exercise-0.html</code> and <code>style.css</code> files locally and editing the <code>exercise-0.html</code> file.</p>
      </section>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            Name of joint owner:
            <input type="text" size="40" maxlength="40" required>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <input type="radio" name="ownform" value="common">
              Tenancy in common
            </p>
            <p>
              <input type="radio" name="ownform" value="entirety">
              Tenancy by the entirety
            </p>
            <p>
              <input type="radio" name="ownform" value="survivorship" checked>
              Joint tenancy with rights of survivorship
            </p>
          </fieldset>
        </form>
      </section>
      <section>
        <h2>Check your work</h2>
        <ol>
          <li>In the &ldquo;Elements&rdquo; panel of the Chrome browser&rsquo;s developer tools, select an <code>input</code> element.</li>
          <li>In the &ldquo;Accessibility&rdquo; pane, examine the Accessibility Tree.</li>
          <li>Verify that the selected element in the Accessibility Tree (either <code>textbox</code> or <code>radio</code>) has your label as its &ldquo;accessible name&rdquo;.</li>
        </ol>
      </section>
      <section>
        <h2>Sample solution</h2>
        <p>Here is an edited version of the above form that accomplishes the task.</p>
      </section>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            <label>
              Name of joint owner
              <input type="text" size="40" maxlength="40" required>
            </label>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <label>
                <input type="radio" name="ownform" value="common">
                Tenancy in common
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="entirety">
                Tenancy by the entirety
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="survivorship" checked>
                Joint tenancy with rights of survivorship
              </label>
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/control-described/good-point.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Control labeling example: accessible (pointing technique)</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Control labeling example:<br>accessible (pointing technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 30 November 2018</p>
      </header>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            <label for="joint-owner-name">
              Name of joint owner
            </label>
            <input
              id="joint-owner-name"
              type="text"
              size="40"
              maxlength="40"
              required
            >
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <input
                id="tenancy-in-common"
                type="radio"
                name="ownform"
                value="common"
              >
              <label for="tenancy-in-common">Tenancy in common</label>
            </p>
            <p>
              <input
                id="tenancy-by-entirety"
                type="radio"
                name="ownform"
                value="entirety"
              >
              <label for="tenancy-by-entirety">Tenancy by the entirety</label>
            </p>
            <p>
              <input
                id="rights-survivorship"
                type="radio"
                name="ownform"
                value="survivorship"
                checked
              >
              <label for="rights-survivorship">
                Joint tenancy with rights of survivorship
              </label>
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/control-described/good-wrap.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Control labeling example: accessible (pointing technique)</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Control labeling example:<br>accessible (wrapping technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 30 November 2018</p>
      </header>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            <label>
              Name of joint owner
              <input type="text" size="40" maxlength="40" required>
            </label>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <label>
                <input type="radio" name="ownform" value="common">
                Tenancy in common
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="entirety">
                Tenancy by the entirety
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="survivorship" checked>
                Joint tenancy with rights of survivorship
              </label>
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/control-described/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly described controls</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly described controls</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 11 December 2018</p>
      </header>
      <section>
        <h2>The problem</h2>
        <p>You want to explain in detail and accessibly a radio button in a form. How should you do this?</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            src="../../static/a11y-logo.png"
            alt="Utopia accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section>
        <h2>Solutions</h2>
        <p>Some Utopia web pages with radio buttons explained in detail:</p>
        <ul>
          <li><a href="">Name</a></li>
        </ul>
        <p>Analysis.</p>
      </section>
      <section>
        <h2>Example 1</h2>
        <p>Radio button with a pointing label and no description.</p>
        <div class="example">
          <p>If you click this button, your account will be tentatively closed. You will be able to reopen it within 30 days.</p>
          <form>
            <p>
              <input id="close-account" type="radio" name="operation-a">
              <label for="close-account">
                Click this button to close your account.
              </label>
            </p>
          </form>
        </div>
        <p>Some accessibility features:</p>
        <ul>
          <li>Feature.</li>
        </ul>
        <p>Testing has revealed:</p>
        <ul>
          <li>Revelation.</li>
        </ul>
      </section>
      <section>
        <h2>Example 2</h2>
        <p>Radio button with both a pointing label and a description.</p>
        <div class="example">
          <p id="close-account-detail">If you click this button, your account will be tentatively closed. You will be able to reopen it within 30 days.</p>
          <form>
            <p>
              <input id="close-account" type="radio" name="operation-b" aria-describedby="close-account-detail">
              <label for="close-account">
                Click this button to close your account.
              </label>
            </p>
          </form>
        </div>
        <p>Some accessibility features:</p>
        <ul>
          <li>Feature.</li>
        </ul>
        <p>Testing has revealed:</p>
        <ul>
          <li>Revelation.</li>
        </ul>
      </section>
      <section>
        <h2>Example 3</h2>
        <p>Radio button with a pointing label and 2 descriptions.</p>
        <div class="example">
          <p id="close-account-detail-a">If you click this button, your account will be tentatively closed. You will be able to reopen it within 30 days.</p>
          <form>
            <p>
              <input id="close-account" type="radio" name="operation-c" aria-describedby="close-account-detail-a close-account-detail-b">
              <label for="close-account">
                Click this button to close your account.
              </label>
            </p>
          </form>
          <p id="close-account-detail-b">After you tentatively close your account, you can reopen it on the &ldquo;Account Maintenance&rdquo; page.</p>
        </div>
        <p>Some accessibility features:</p>
        <ul>
          <li>Feature.</li>
        </ul>
        <p>Testing has revealed:</p>
        <ul>
          <li>Revelation.</li>
        </ul>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/control-labeled/bad.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Control labeling example: inaccessible</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Control labeling example:<br>inaccessible</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 1 December 2018</p>
      </header>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            Name of joint owner:
            <input type="text" size="40" maxlength="40" required>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <input type="radio" name="ownform" value="common">
              Tenancy in common
            </p>
            <p>
              <input type="radio" name="ownform" value="entirety">
              Tenancy by the entirety
            </p>
            <p>
              <input type="radio" name="ownform" value="survivorship" checked>
              Joint tenancy with rights of survivorship
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/control-labeled/exercise.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessible control labeling: Exercise</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessible control labeling: Exercise</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 1 December 2018</p>
      </header>
      <section>
        <h2>Prerequisites</h2>
        <p>This exercise presupposes that you have studied the wrapping and pointing techniques for labeling form controls.</p>
      </section>
      <section>
        <h2>Your task</h2>
        <ol>
          <li>Launch the Chrome browser in Windows or OS X.</li>
          <li>Open the page <a href="https://bitbucket.utopia.com:8443/pages/~UQXQ/devtrain/master/browse/modules/control-labeled/bad.html">Control labeling example: inaccessible</a>.</li>
          <li>
            Open the Chrome developer tools. You can do this in any of these ways:
            <ul>
              <li>Using the &ldquo;More tools&rdquo; submenu of the &ldquo;Customize and control Google Chrome&rdquo; menu</li>
              <li>OS X: Using the &ldquo;Developer&rdquo; item of the &ldquo;View&rdquo; menu</li>
              <li>Windows: Entering the <code>CTRL-SHIFT-i</code> command</li>
              <li>OS X: Entering the <code>CMD-SHIFT-i</code> command</li>
              <li>Entering the <code>F12</code> command</li>
            </ul>
          </li>
          <li>Ensure that the &ldquo;Elements&rdquo; panel is selected.</li>
          <li>Select the &ldquo;Accessibility&rdquo; pane of that panel.</li>
          <li>
            In the &ldquo;Elements&rdquo; panel, select the first <code>input</code> element. You can do this in either of these ways:
            <ul>
              <li>Expand the expandable elements and hover over them until you find the <code>input</code> element that highlights the first input field. Then select that element.</li>
              <li>Control- or right-click the first input field and select &ldquo;Inspect element&rdquo; from the contextual menu.</li>
            </ul>
          </li>
          <li>Note that in the Accessibility Tree (at the top of the Accessibility pane) the <code>WebArea</code> node has a name, but the <code>textbox</code> node has no name.</li>
          <li>Begin editing the HTML in your open copy of the page. Do this by clicking on the <code>&hellip;</code> button and selecting &ldquo;Edit as HTML&rdquo; from the contextual menu.</li>
          <li>Edit the HTML to associate the label with the <code>input element</code>, using either the wrapping technique or the pointing technique.</li>
          <li>Commit your change by clicking outside the editing box.</li>
          <li>Check whether the <code>textbox</code> node in the Accessibility tree now has the name &ldquo;Name of joint owner:&rdquo;. If so, you have succeeded. If not, diagnose and correct the error.</li>
          <li>Repeat the previous 6 steps (steps 6&ndash;11) on the other 3 <code>input</code> elements.</li>
          <li>
            If you want help on this task, you can compare your work with two files that contain the same form revised for accessibility:
            <ul>
              <li><a href="https://bitbucket.utopia.com:8443/pages/~UQXQ/devtrain/master/browse/modules/control-labeled/good-wrap.html">Revised with the wrapping technique</a></li>
              <li><a href="https://bitbucket.utopia.com:8443/pages/~UQXQ/devtrain/master/browse/modules/control-labeled/good-point.html">Revised with the pointing technique</a></li>
            </ul>
          </li>
          <li>If you wish, you may save your revised page and copies of the <code>style.css</code> and <code>script.js</code> files in a local directory.</li>
        </ol>
      </section>
      <section>
        <h2>Debriefing</h2>
        <p>By explicitly associating labels with form controls, you changed the Accessibility Tree to give &ldquo;accessible names&rdquo; to those controls. Current and future assistive technologies (screen readers, search engines, form autofill agents, fraud prevention tools, portfolio rebalancers, robotic asset managers, etc.) can use these names to give better service to their users.</p>
        <p>You can illustrate the impact of your work by running a screen reader, such as NVDA in Windows, VoiceOver in OS X or iOS, or TalkBack in Android, on the page. Clicking on a control, or moving to it with the <code>TAB</code> key or an arrow key, will make the screen reader announce what it knows about the control. On the original page, it won&rsquo;t know what the control is about. On your revised page, it will. A user who relies on a screen reader to understand the controls will fail on the original page, but succeed on your revised page.</p>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/control-labeled/exercise-0.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly labeled controls: Exercise 0</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly labeled controls: Exercise 0</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 28 November 2018</p>
      </header>
      <section>
        <h2>Your task</h2>
        <p>Edit the HTML source code of this page to use standard HTML5 elements producing accessible names for the controls in the form below.</p>
        <p>You can do this (1) within your browser&ldquo;s developer tools or (2) by saving the <code>exercise-0.html</code> and <code>style.css</code> files locally and editing the <code>exercise-0.html</code> file.</p>
      </section>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            Name of joint owner:
            <input type="text" size="40" maxlength="40" required>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <input type="radio" name="ownform" value="common">
              Tenancy in common
            </p>
            <p>
              <input type="radio" name="ownform" value="entirety">
              Tenancy by the entirety
            </p>
            <p>
              <input type="radio" name="ownform" value="survivorship" checked>
              Joint tenancy with rights of survivorship
            </p>
          </fieldset>
        </form>
      </section>
      <section>
        <h2>Check your work</h2>
        <ol>
          <li>In the &ldquo;Elements&rdquo; panel of the Chrome browser&rsquo;s developer tools, select an <code>input</code> element.</li>
          <li>In the &ldquo;Accessibility&rdquo; pane, examine the Accessibility Tree.</li>
          <li>Verify that the selected element in the Accessibility Tree (either <code>textbox</code> or <code>radio</code>) has your label as its &ldquo;accessible name&rdquo;.</li>
        </ol>
      </section>
      <section>
        <h2>Sample solution</h2>
        <p>Here is an edited version of the above form that accomplishes the task.</p>
      </section>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            <label>
              Name of joint owner
              <input type="text" size="40" maxlength="40" required>
            </label>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <label>
                <input type="radio" name="ownform" value="common">
                Tenancy in common
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="entirety">
                Tenancy by the entirety
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="survivorship" checked>
                Joint tenancy with rights of survivorship
              </label>
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/control-labeled/good-point.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Control labeling example: accessible (pointing technique)</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Control labeling example:<br>accessible (pointing technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 30 November 2018</p>
      </header>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            <label for="joint-owner-name">
              Name of joint owner
            </label>
            <input
              id="joint-owner-name"
              type="text"
              size="40"
              maxlength="40"
              required
            >
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <input
                id="tenancy-in-common"
                type="radio"
                name="ownform"
                value="common"
              >
              <label for="tenancy-in-common">Tenancy in common</label>
            </p>
            <p>
              <input
                id="tenancy-by-entirety"
                type="radio"
                name="ownform"
                value="entirety"
              >
              <label for="tenancy-by-entirety">Tenancy by the entirety</label>
            </p>
            <p>
              <input
                id="rights-survivorship"
                type="radio"
                name="ownform"
                value="survivorship"
                checked
              >
              <label for="rights-survivorship">
                Joint tenancy with rights of survivorship
              </label>
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/control-labeled/good-wrap.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Control labeling example: accessible (pointing technique)</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Control labeling example:<br>accessible (wrapping technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 30 November 2018</p>
      </header>
      <section class="example">
        <h3>Joint account ownership information</h3>
        <form>
          <p>
            <label>
              Name of joint owner
              <input type="text" size="40" maxlength="40" required>
            </label>
          </p>
          <fieldset>
            <legend>
              Form of ownership
            </legend>
            <p>
              <label>
                <input type="radio" name="ownform" value="common">
                Tenancy in common
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="entirety">
                Tenancy by the entirety
              </label>
            </p>
            <p>
              <label>
                <input type="radio" name="ownform" value="survivorship checked">
                Joint tenancy with rights of survivorship
              </label>
            </p>
          </fieldset>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/control-labeled/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly labeled controls</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly labeled controls</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 24 November 2018</p>
      </header>
      <section>
        <h2>The problem</h2>
        <p>You want to explain accessibly a button in a form. <a href="https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element">You can do that with <code>label</code> elements</a>, but <cite>MDN Web Docs</cite> has warned that <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label#Buttons">this can interfere with assistive technologies</a>. What should you do?</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            src="../../static/a11y-logo.png"
            alt="Utopia accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section>
        <h2>Solutions</h2>
        <p>Some Utopia web pages with explained buttons:</p>
        <ul>
          <li><a href="">Name</a></li>
        </ul>
        <p>Analysis.</p>
      </section>
      <section>
        <h2>Example 1</h2>
        <p>Button with <code>label</code> elements.</p>
        <div class="example">
          <form>
            <label>
              Click this button to close your account.
              <button type="button">Proceed</button>
            </label>
          </form>
        </div>
        <p>Some accessibility features:</p>
        <ul>
          <li>Feature.</li>
        </ul>
        <p>Testing has revealed:</p>
        <ul>
          <li>Revelation.</li>
        </ul>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/ddarrows/arrows.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessible dropdown arrows</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <main>
      <header>
        <div class="title-view">
          <img class="cover" src="static/a11y-kbd.jpg" alt="">
          <h1>Accessible dropdown arrows</h1>
        </div>
        <div class="doc-info">
          <p class="head">Jonathan Pool, HR Systems and Accessibility Unit</p>
          <p class="head">Revised: 13 February 2019</p>
        </div>
      </header>
      <section>
        <header>
          <h2>Introduction</h2>
        </header>
        <p>Utopia web pages often contain lists that are initially hidden or collapsed except for their headings, and whose headings are suffixed by downward pointing triangles to symbolize that the text is a heading and that activating it will expose its list. Since the purpose of such a triangle is to point toward a hidden list, let&rsquo;s call them dropdown arrows rather than triangles.</p>
        <p>Utopia developers use various methods to render dropdown arrows. The method chosen may have implications for accessibility.</p>
      </section>
      <section>
        <header>
          <h2>CSS borders</h2>
        </header>
        <p>One method is to create a rectangular box and display only a triangular part of it by using borders that fill the box. A box has 4 borders. Imagine a square box that is 24 pixels wide and tall. Suppose its <code>box-sizing</code> attribute has the value <code>border-box</code>. That means that any borders count as part of the 24 &times; 24 size of the box. So, if it has borders that are 12 pixels thick, the borders cover the entire box. But suppose the borders differ in style, such as solid versus dashed, black versus red, or opaque versus transparent. Then any arbitrary point in the box is covered by 2 of the borders. The question arises, which border is visible? The borders are defined in a CSS style, and CSS by default joins borders with mitre corners. A diagonal straight line segment between the outer corner and the inner corner where the borders overlap delimits the areas where the borders dominate. If one of the borders is transparent, where it dominates one can see through it not to the dominated border, but to whatever is behind the box.</p>
        <p>Let&rsquo;s illustrate this by progressively creating a box that will ultimately be rendered as a downward pointing triangle. We&rsquo;ll start with a box containing 4 black borders 1 pixel thick:</p>
        <p class="allthin"></p>
        <p>Investors<span class="vgntriangle"></span></p>
      </section>
      <section>
        <header>
          <h2>Quiz results</h2>
        </header>
        <p>The course contained 26 quizzes, each containing one multiple-choice question. The responses to those questions were not recorded.</p>
        <p>In addition, pre-course and post-course quizzes were administered at the start and end, respectively, of the course. They were completed on paper and linked. Respondents were anonymous. I received 12 pairs of quiz responses.</p>
        <p>The pre-course and post-course quizzes contained questions that in principle could be answered on the basis of course content. They were designed to be equivalent in coverage and difficulty, but were not randomized, so their statistical equivalence cannot be proven.</p>
        <p>The mean score on the pre-course quiz was 3.58 (on a scale of 0 to 6). The mean score on the post-course quiz was 5.17. Thus, if the quiz results represent accessibility knowledge and the course was responsible for any change, then the course achieved 1.59 out of the 2.42 units of course-taught accessibility knowledge that attendees could have added (i.e. 66%). The counts of learners with positive, zero, and negative score changes from the pre- to the post-course quiz are:</p>
        <ul>
          <li>Positive: 7</li>
          <li>Zero: 4</li>
          <li>Negative: 1</li>
        </ul>
        <p>The least-often correctly answered pre-course question is question 5: &ldquo;A group of form inputs gets displayed with a labeled box around it if &hellip;&rdquo;. The correct answer (&ldquo;The inputs are inside a <em>fieldset</em> element with a <em>legend</em> element&rdquo;) was given by 4 respondents. The most common answer was &ldquo;The inputs are inside a <em>box</em> element with a <em>label</em> element&rdquo;.</p>
        <p>The least-often correctly answered post-course question is question 6: &ldquo;WorldSpace Attest &hellip;&rdquo;. The correct answer (&ldquo;Can be configured to test for more or fewer accessibility issues&rdquo;) was given by 6 respondents. The most common incorrect answers, given 3 times each, were &ldquo;Tests for a fixed set of accessibility issues&rdquo; and &ldquo;Does a complete accessibility test, not requiring any configuration or other testing&rdquo;.</p>
      </section>
      <section>
        <header>
          <h2>Questionnaire results</h2>
        </header>
        <p>A six-question questionnaire was administered at the end of the course. I received 12 completed questionnaires.</p>
        <p>Five of the six questions elicited opinions about how to make the course better.</p>
        <p>Question 1 asked which sections of the course should be lengthened or shortened. For each section, at least 9 learners recommended neither lengthening nor shortening the section. Sections with 2 more recommendations for one change than for the opposite change were:</p>
        <ul>
          <li>&ldquo;When to do it&rdquo;: shorten</li>
          <li>&ldquo;Whose job it is&rdquo;: shorten</li>
        </ul>
        <p>Question 2 asked how the intra-course quizzes should be improved. Of the seven improvements named in the question, only one was recommended by a majority (7) of the respondents: &ldquo;Explain why wrong answers are wrong&rdquo;. Learners giving wrong answers were advised only to &ldquo;review&rdquo;, similarly to how the A11yGurus training modules behave, but answer-specific elaborations would be possible and, according to the majority, helpful. With respect to the count of quizzes, 3 respondents recommended including more quizzes, and 1 respondent recommended including fewer of them.</p>
        <p>Question 3 asked whether we should keep or drop the three main features of this course. Each of them received &ldquo;keep&rdquo; recommendations from a majority of the respondents. 2 respondents recommended dropping paired learning, and 4 recommended dropping instructor assignment of pairs. The most popular feature was self-paced learning: Nobody recommended dropping that.</p>
        <p>Question 4 asked whether the course was too easy or too difficult. 1 responded said it was too easy, but all the others said it was about right.</p>
        <p>Question 5 asked whether the accessibility course should continue to occupy 2 hours of UI Boot Camp. 1 said it should be given more time, 1 said it should occupy less time, and all the others recommended leaving it as a 2-hour course.</p>
        <p>Question 6, in distinction from the others, asked about the respondents&rsquo; own intentions with respect to accessibility skill acquisition. 2 respondents said they did not intend to pursue more accessibility skills. The others said they did intend to. A majority (8) said they would do this by self-study. 4 said they would do this with a short team orientation offered by the Accessibility Unit. Only 1 expressed an intention to take the 15-hour accessibility course offered later in February.</p>
      </section>
      <section>
        <header>
          <h2>Conclusion</h2>
        </header>
        <p>Both the impressionistic and the quantitative evidence support the further provision of self-paced accessibility training within UI Boot Camp. It seems to engage attendees. It results in substantial learning. It is popular among enrollees. It also fits the style of learning they most prefer: self-instruction.</p>
        <p>While they deliver value to enrollees, self-paced accessibility courses in UI Boot Camp also serve as trials of independent self-paced modules. By observing and measuring their efficacy in UI Boot Camp, we can make them work better for those who will use them outside of that venue.</p>
        <p>This version of the course was entirely client-based. The bitbucket server delivered static HTML, CSS, and JavaScript files to each workstation, and thereafter the workstation executed the code. No quiz results were transmitted to any server. Because of this limitation, all three pre- and post-course instruments were administered on paper.</p>
        <p>The next UI Boot Camp accessibility course will take place on 7 March 2019. For that version I recommend revising this course to incorporate one or more of the following, as time allows:</p>
        <ul>
          <li>Server-based administration of pre- and post-course instruments</li>
          <li>Server-based collection of learner activity data</li>
          <li>Explanations of why wrong quiz answers are wrong</li>
          <li>Coverage of more accessibility issues</li>
          <li>Introduction of paired-learning optionality, including individual learning and learner-selected pairs.</li>
        </ul>
        <p>These revisions will, I expect, enrich our understanding of the learning process, permit more effective course design, and support our development of self-instruction modules covering a variety of important accessibility issues.</p>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/input-multilabeled/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Form input with multiple accessible labels</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Form input with multiple accessible labels</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 24 December 2018</p>
      </header>
      <section>
        <h2>The problem</h2>
        <p>On a web page, you want to create a form, and one of the form&rsquo;s inputs (such as a text field or checkbox) will not be understandable without an extended explanation, consisting of a few pieces of text. How should that input be implemented?</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            src="../../static/a11y-logo.png"
            alt="Utopia accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section>
        <h2>Utopia examples</h2>
        <ul>
          <li>Each checkbox on <a href="https://investor.utopia.com/mutual-funds/list#/etf/asset-class/month-end-returns">Utopia ETFs</a> has more than 1 piece of explanation. For example, the checkbox for &ldquo;Mortgage-Backed Securities ETF&rdquo; is partly explained by that phrase, but the headings &ldquo;U.S. bond ETFs&rdquo; and &ldquo;Treasury/Agency&rdquo; are also parts of its explanation.</li>
          <li>The text field on <a href="https://personal.utopia.com/us/MPEmailAddress01?OriginPage=MyHome">My accounts  »  Account maintenance  »  E-mail Address</a> has &ldquo;E-mail address&rdquo; as part of its explanation, but the instruction above it explains it more fully.</li>
        </ul>
      </section>
      <section>
        <h2>Accessibility Unit guidance</h2>
        <p>The Accessibility Unit has published <a href="http://corpsp.utopia.com/pnd/mc/Accessibility/SitePages/Labels%20or%20instructions%20for%20form%20inputs.aspx">related guidance</a> on the labeling of form inputs in general, not focused on labels with multiple parts.</p>
      </section>
      <section>
        <h2>Solutions</h2>
        <p>You can solve this problem with various techniques.</p>
        <p>This module illustrates three of the available techniques. Let&rsquo;s call these techniques the &ldquo;HTML technique&rdquo;, the &ldquo;ARIA technique&rdquo;, and the &ldquo;wrapping technique&rdquo;. These techniques all comply with applicable standards, and you can choose any of them freely.</p>
        <p>However, the three techniques will not create identical experiences for all users in all situations. The standards don&rsquo;t treat them identically, and browsers and assistive technologies don&rsquo;t all comply fully with the standards.</p>
        <p>The examples referenced below contain inputs of type <code>text</code> (i.e. text fields). The solutions apply to inputs of other types (checkboxes, radio buttons, etc.), too. In each of these examples, the explanation of the input is split among three pieces: one piece appears above the input, and the other two are below it. The purpose of each technique is to put the three pieces together to form a label that all users will understand to belong to the input.</p>
        <p>Use your browser&rsquo;s developer tools to inspect the HTML source code for the examples referenced below.</p>
      </section>
      <section>
        <h2>Example 1: <a href="label.html">HTML technique</a></h2>
        <p>The HTML technique makes use of HTML <code>label</code> elements that point to the input. Each piece of the input&rsquo;s explanation can be marked up as a <code>label</code> element. The browser should find all those <code>label</code> elements pointing to the same input and concatenate them together to form the input&rsquo;s accessible name, in the order in which the pieces appear. That name will act as the input&rsquo;s label.</p>
        <p>In addition, all pieces of the label combine with the input to form a clickable area. Clicking on any of the label&rsquo;s pieces acts like clicking on the input: The input becomes focal, so any entered text becomes the value of the input.</p>
        <p>Pointing with this technique works as follows. The input has an <code>id</code> attribute. Each <code>label</code> element has a <code>for</code> attribute. If the value of the <code>for</code> attribute is the same as the value of an input&rsquo;s <code>id</code> attribute, then the <code>label</code> element points to the input.</p>
      </section>
      <section>
        <h2>Example 2: <a href="labelledby.html">ARIA technique</a></h2>
        <p>The ARIA technique makes use of a WAI-ARIA <code>aria-labelledby</code> attribute that points to all of the pieces of the input&rsquo;s explanation. The browser should find all those pieces and concatenate them together, to form the input&rsquo;s accessible name. That name will act as the input&rsquo;s label, except that it will not be clickable.</p>
        <p>Pointing with this technique works as follows. The input has an <code>aria-labelledby</code> attribute, whose value is a string composed of space-separated substrings. If any substring in that string is the same as the value of the <code>id</code> attribute of any other element, then the input points to that other element. The concatenation of those other elements takes place in the same order as the order of the substrings.</p>
      </section>
      <section>
        <h2>Example 3: <a href="wrap.html">wrapping technique</a></h2>
        <p>The wrapping technique makes use of an HTML <code>label</code> element that contains the input and all of the pieces of its label. The browser should concatenate the pieces together, in the order in which they appear, to form the input&rsquo;s accessible name. That name will act as the input&rsquo;s label.</p>
        <p>The entire <code>label</code> element is a clickable area. Clicking on anything in it makes the input focal, so any entered text becomes the value of the input.</p>
      </section>
      <section>
        <h2>Issues</h2>
        <p>The standard treatment of clicking distinguishes the ARIA technique from the others. When you use the ARIA technique, the user cannot make the input focal by clicking on any of the labels. So the clickable area is smaller with the ARIA technique than with the HTML or wrapping technique. There is a good reason for this. The ARIA technique permits you to make a given element a piece of <strong>multiple labels</strong>. For example, if three form inputs are under a heading and that heading is part of the explanation of each of its inputs, the heading&rsquo;s <code>id</code> value can be included as a substring of the <code>aria-labelledby</code> attribute of each input. In such a case, the standard could not require a browser to make the input focal when the user clicks on the heading, since it would be part of the labels of all three inputs. The standard could have required making the first labeled input focal, but instead it doesn&rsquo;t require making anything focal.</p>
        <p>Our testing has shown success for the HTML, ARIA, and wrapping techniques with various combinations of operating systems (Windows 10, OS X, and iOS), browsers (Chrome, Firefox, Internet Explorer, Edge, Safari, and Vivaldi), and screen readers (NVDA, JAWS, VoiceOver).</p>
        <p>Not all user environments exhibit such compatibility, however. This limitation was <a href="https://developer.paciellogroup.com/blog/2012/05/notes-on-using-multiple-labels-for-a-control-using-the-label-element/">reported in 2012 by Steve Faulkner</a>.</p>
        <p>Failures of the HTML technique:</p>
        <ul>
          <li>A user of Internet Explorer 11 who is getting the label from a screen reader receives only 1 of the 3 pieces in example 1. If the sreen reader is NVDA, the user hears only the last piece (the sentence beginning with &ldquo;For a conservative&rdquo;) If it is JAWS, the user hears only the first piece (&ldquo;Expected retirement age:&rdquo;).</li>
          <li>A user of Safari on OS X, or a user of Safari, Chrome, Firefox, or Edge on iOS, who is getting the label from VoiceOver hears only the first piece in example 1.</li>
        </ul>
        <p>Failures of the ARIA technique: Although Steve Faulkner in the above-cited article reports the ARIA technique to be well-supported, testing reveals exceptions. On Windows 10, NVDA tells the user of Chrome that the label consists of only the first piece and JAWS says that it consists of only the last piece. JAWS tells the user of Internet Explorer 11 that the label in example 2 consists of only the first piece, and NVDA says that there is no label at all.</p>
        <p>Failure of the wrapping technique: NVDA on Windows 10 tells a user of Internet Explorer 11 that there is no label at all.</p>
        <p>Since the concatenation order with the ARIA technique is the order of the substrings, it is not necessarily the order of the pieces that they point to. However, it is considered a good practice to make those two orders identical. It&rsquo;s a basic accessibility principle to aim for similar experiences across types of users and situations. A user using vision to perceive an input&rsquo;s label typically encounters the label&rsquo;s pieces in a top-to-bottom order. A user using an assistive technology would be expected to want to encounter the pieces in the same order. So, if you order the substrings of an <code>aria-labelledby</code> attribute&rsquo;s value differently from the pieces they point to, be prepared to give a good reason for doing that.</p>
      </section>
      <section>
        <h2>Conclusion</h2>
        <p>You can comply with the applicable standards by using the HTML, ARIA, or wrapping technique.</p>
        <p>However, the HTML and wrapping techniques create larger clickable areas than the ARIA technique does. In addition, not all browsers and assistive technologies comply with all of the standards, so you cannot guarantee that all users will have the expected experiences.</p>
        <p>If you want to go beyond compliance with standards and improve the probability of a successful experience across the range of user and situation types, you should use the wrapping technique if you can, because browsers and assistive technologies support it most successfully and it offers a large clickable area. The wrapping technique will be available if the label pieces and the input are all adjacent.</p>
        <p>If the label pieces are not all adjacent, you can use the ARIA or HTML technique. The ARIA technique has broader support, but does not offer an enlarged clickable area. At the cost of complicating your code, you can create JavaScript event listeners for one or more of the label pieces (whichever pieces uniquely refer to the input) to make clicks on them put the focus into the input, thereby giving the ARIA technique an enlarged clickable area.</p>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/input-multilabeled/label.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Multipart input labeling (HTML technique)</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Multipart input labeling (HTML technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 23 December 2018</p>
      </header>
      <section class="example">
        <h2>Your retirement goals</h2>
        <form>
          <p class="downtight"><label for="retire-age">Expected retirement age:</label></p>
          <p class="uptight"><input id="retire-age" type="text" size="3" maxlength="3"></p>
          <p><label for="retire-age">If you expect never to retire, leave blank. Otherwise, give your expected age as a whole number of years.</label></p>
          <p class="tight"><label for="retire-age">For a conservative plan, choose the youngest age at which you are likely to retire.</label></p>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/input-multilabeled/labelledby.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Multipart input labeling (ARIA technique)</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Multipart input labeling (ARIA technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 23 December 2018</p>
      </header>
      <section class="example">
        <h2>Your retirement goals</h2>
        <form>
          <p class="downtight" id="expected-age">Expected retirement age:</p>
          <p class="uptight">
            <input
              aria-labelledby="expected-age blank-ok youngest"
              type="text"
              size="3"
              maxlength="3"
            >
          </p>
          <p id="blank-ok">If you expect never to retire, leave blank. Otherwise, give your expected age as a whole number of years.</p>
          <p class="tight" id="youngest">For a conservative plan, choose the youngest age at which you are likely to retire.</p>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/input-multilabeled/wrap.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Multipart input labeling (wrapping technique)</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Multipart input labeling (wrapping technique)</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 23 December 2018</p>
      </header>
      <section class="example">
        <h2>Your retirement goals</h2>
        <form>
          <label>
            <p class="downtight">Expected retirement age:</p>
            <p class="uptight"><input type="text" size="3" maxlength="3"></p>
            <p>If you expect never to retire, leave blank. Otherwise, give your expected age as a whole number of years.</p>
            <p class="tight">For a conservative plan, choose the youngest age at which you are likely to retire.</p>
          </label>
        </form>
      </section>
    </main>
  </body>
</html>

==> old/planning/modules/table-configurable/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly configurable table</title>
    <link rel="stylesheet" href="../style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly configurable table</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 19 November 2018</p>
      </header>
      <section>
        <h2>The problem</h2>
        <p>You want to display data accessibly in a table, giving the user some control over the contents of the table. You will offer the user one or more controls for this purpose. Where should the controls be, and how should they be implemented?</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            src="../../static/a11y-logo.png"
            alt="Utopia accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section>
        <h2>Solutions</h2>
        <p>Some Utopia web pages with user-configurable tables:</p>
        <ul>
          <li><a href="https://investor.utopia.com/etf/list#/etf/asset-class/month-end-returns">Utopia ETFs</a> (&ldquo;FILTER&rdquo;)</li>
          <li><a href="https://www.utopiacanada.ca/advisors/adv/en/product.html">Canada investment products</a> (&ldquo;Benchmark&rdquo; filter)</li>
          <li><a href="https://personal.utopia.com/us/funds/other/bytype?FundFamilyId=6080">Other fund family funds by asset class</a> (&ldquo;Fund family&rdquo;, &ldquo;Sort by &hellip;&rdquo;)</li>
          <li><a href="https://personal.utopia.com/us/SecFundsMFSBasicSearch?FROM=VAN">Mutual fund and ETF screener</a> (many controls)</li>
        </ul>
        <p>A configuration control can be located either outside or inside the table.</p>
        <p>If it is inside the table, HTML5 requires it to be in a cell in a row. You can decide whether it logically is a header of other cells in the table. If so, it should be in a <code>&lt;th&gt;</code> cell. If not, it should be in a <code>&lt;td&gt;</code> cell.</p>
        <p>Use your browser&rsquo;s developer tools to inspect the HTML, CSS, and JavaScript source code for the example below.</p>
      </section>
      <section>
        <h2>Example 1</h2>
        <p>Table with a control in a <code>&lt;td&gt;</code> cell in the head.</p>
        <div class="example">
          <table>
            <caption>Exchange-Traded ESG Funds</caption>
            <thead>
              <tr>
                <td colspan="3">
                  <label>
                    <span class="checkbox">
                      <input
                        type="checkbox"
                        onchange="toggleShow(event)"
                        onfocus="markFocusOnLabel(event)"
                        onblur="markBlurOnLabel(event)"
                      >
                    </span>
                    <span class="label">Include non-Utopia</span>
                  </label>
                </td>
              </tr>
              <tr>
                <th>Name</th>
                <th>Symbol</th>
                <th>Expense<br>ratio</th>
              </tr>
            </thead>
            <tbody>
              <tr class="row">
                <th>Utopia ESG U.S. Stock ETF</th>
                <td>ESGV</td>
                <td>0.12%</td>
              </tr>
              <tr class="row">
                <th>Utopia ESG International Stock ETF</th>
                <td>VSGX</td>
                <td>0.15%</td>
              </tr>
              <tr class="row hidable hidden">
                <th>Columbia Sustainable Global Equity Income ETF</th>
                <td>ESGW</td>
                <td>0.40%</td>
              </tr>
              <tr class="row hidable hidden">
                <th>iShares ESG MSCI EM ETF</th>
                <td>ESGE</td>
                <td>0.25%</td>
              </tr>
            </tbody>
          </table>
        </div>
        <p>The control&rsquo;s cell is in a row that spans all columns.</p>
        <p>Some accessibility features:</p>
        <ul>
          <li>Although the control is in the table&rsquo;s <code>thead</code> element, it is in a <code>td</code>, not a <code>th</code>, element. Therefore, an assistive technology will not treat it as a header for any other cells.</li>
          <li>The checkbox and the &ldquo;Include non-Utopia&rdquo; phrase are not merely next to one another. They are identified with each other by inclusion in a <code>label</code> element. So, if a user navigates to the checkbox but has not yet become aware of the phrase, an assistive technology will announce the phrase as the checkbox&rsquo;s label.</li>
          <li>When a user navigates with the <code>tab</code> key to the checkbox (gives it the focus), the entire control (checkbox and its label) becomes marked, so the user can perceive that the focus is there. That allows the user to know, in advance, that entering the <code>space</code> character will toggle the checkbox.</li>
          <li>When a user hovers over the checkbox control outside of the checkbox itself, the browser changes the cursor icon to show that the location is clickable. The checkbox by its shape identifies itself as clickable, but the space around it and its label don&rsquo;t, so the change of the cursor when the user hovers over them is necessary. Would the control be more accessible if the cursor change were uniform for the whole control, including the checkbox? <a href="https://medium.com/simple-human/buttons-shouldnt-have-a-hand-cursor-b11e99ca374b">Adam Silver argues no</a>, but opinions may differ.</li>
        </ul>
        <p>Testing has revealed two minor anomalies with this solution:</p>
        <ul>
          <li>The NVDA screen reader, used with the Chrome browser, announces &ldquo;Name&rdquo; as the header of the checkbox control cell (contrary to the HTML5 standard, which gives &ldquo;Name&rdquo; <code>auto</code> scope and thereby makes that header apply only to cells below it). (The JAWS and OS X VoiceOver screen readers do not exhibit this error.)</li>
          <li>If you repeatedly check and clear the checkbox while the NVDA or OS X VoiceOver screen reader, used with Chrome, is running with transcription (i.e. Speech Viewer in NVDA or Caption Panel in VoiceOver) turned on, the screen reader erratically reports your actions, sometimes correctly and sometimes incorrectly. If you turn the speech viewer off, then VoiceOver announces all the changes, but NVDA&rsquo;s announcements are still erratic.</li>
        </ul>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/table-of-contents/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <!--<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">-->
    <title>Table of Contents</title>
    <link rel="stylesheet" href="style.css">
    <script src="script.js"></script>
  </head>
  <body>
    <main>
      <header>
        <h1>Table of Contents</h1>
        <p>Revision date: 1 November 2018</p>
      </header>
      <section>
        <h2>What&rsquo;s here?</h2>
        <p>An example of an accessible web page that starts with a table of contents.</p>
      </section>
      <section>
        <h2>Contents</h2>
        <ul>
          <li><a href="#introduction">Introduction</a></li>
          <li><a href="#problem">The problem</a></li>
          <li><a href="#alternatives">Alternatives</a></li>
          <li><a href="#recommendation">Recommendation</a></li>
        </ul>
      </section>
      <section>
        <h2 id="introduction">Introduction</h2>
        <p>A lot of introductory text.</p>
      </section>
      <section>
        <h2 id="problem">The problem</h2>
        <p>A lot of problematic text.</p>
      </section>
      <section>
        <h2 id="alternatives">Alternatives</h2>
        <p>A lot of alternative text.</p>
      </section>
      <section>
        <h2 id="recommendation">Recommendation</h2>
        <p>A lot of recommendatory text.</p>
      </section>
    </main>
  </body>
</html>
==> old/planning/modules/table-structure/index.html <==
<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <title>Accessibly structured table</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <header>
        <h1>Accessibly structured table</h1>
        <p>Jonathan Pool</p>
        <p>Revision date: 19 November 2018</p>
      </header>
      <section>
        <h2>The problem</h2>
        <p>You want to display data accessibly in a simple table. What structural elements should it contain, and how should they be configured?</p>
      </section>
      <section id="logo">
        <p class="center">
          <img
            src="../../static/a11y-logo.png"
            alt="Utopia accessibility logo, symbolizing that all roles contribute to accessibility"
          >
        </p>
      </section>
      <section>
        <h2>Solutions</h2>
        <p>Some Utopia web pages with simple tables:</p>
        <ul>
          <li><a href="">Name</a></li>
        </ul>
        <p>An accessible table generally contains a caption, a head, column headers, and row headers. It may also contain a foot.</p>
        <p>Use your browser&rsquo;s developer tools to inspect the HTML and CSS source code for the example below.</p>
      </section>
      <section>
        <h2>Example 1</h2>
        <p>Simple table.</p>
        <div class="example">
          <table>
            <caption>Utopia Exchange-Traded ESG Funds</caption>
            <thead>
              <tr>
                <th>Name</th>
                <th>Symbol</th>
                <th>Expense ratio</th>
              </tr>
            </thead>
            <tbody>
              <tr class="row">
                <th>Utopia ESG U.S. Stock ETF</th>
                <td>ESGV</td>
                <td>0.12%</td>
              </tr>
              <tr class="row">
                <th>Utopia ESG International Stock ETF</th>
                <td>VSGX</td>
                <td>0.15%</td>
              </tr>
            </tbody>
            <tfoot>
              <tr>
                <th colspan="2">Average</th>
                <td>0.135%</td>
              </tr>
            </tfoot>
          </table>
        </div>
        <p>Some accessibility features:</p>
        <ul>
          <li>Both column and row headers are in <code>th</code> cells, so when the user navigates from cell to cell an assistive technology will identify the new cell not only by its own content, but also by whichever header(s) it has differing from the previous cell&rsquo;s headers.</li>
          <li>The table has a <code>caption</code> element, so an assistive technology will successfully identify the table&rsquo;s name.</li>
          <li>The table&rsquo;s structure is identified with <code>thead</code>, <code>tbody</code>, and <code>tfoot</code> elements. This structure allows an assistive technology to identify the header content (top row) and the summary content (bottom row). Without them, a user might initially assume that those rows merely describe 2 more funds. A user who cares only about the summary, or wants to get the summary information first, can now navigate directly to the foot.</li>
        </ul>
        <p>Testing has revealed some anomalies with this solution:</p>
        <ul>
          <li>The Worldspace Attest extension for Chrome reports no accessibility violations on this page, except for uncertainty whether the &ldquo;Name&rdquo; header is a header of any cells. It obviously is.</li>
          <li><a href="https://dequeuniversity.com/rules/worldspace/3.1/th-has-data-cells?application=attestChrome">A11yGurus</a> objects to all headers, like those in this table, that do not have a <code>scope</code> attribute. A11yGurus advises you to set <code>scope="col"</code> or <code>scope="row"</code> on the <code>th</code> elements in this table. But HTML5 contains an <a href="https://www.w3.org/TR/2017/REC-html52-20171214/tabular-data.html#forming-relationships-between-data-cells-and-header-cells">algorithm</a> that assigns headers to cells whether you do do this or not. If you don&rsquo;t, then <code>scope="auto"</code> by default. Assistive technologies&rsquo; compliance with the algorithm is erratic, but in a simple table the <code>auto</code> scope assigns column headers to the cells below them and row headers to the cells to the right of them and screen readers generally treat the headers correctly. For compatibility with older or standard-noncompliant assistive technologies, you may choose to include <code>scope="col"</code> and <code>scope="row"</code> attributes on column and row headers, respectively.</li>
          <li>If a screen reader is running and you navigate horizontally within a row of the table body, when you reach column 1 NVDA with the Chrome browser announces the fund name but not the heading &ldquo;Name&rdquo;; OS X VoiceOver with the Chrome browser announces the fund name twice: first as the row heading and then as the cell content. JAWS with the Chrome browser does not exhibit either of these problematic behaviors.</li>
          <li>If a screen reader is running and you navigate vertically within column 3 of the rows below &ldquo;Expense ratio&rdquo;, when you reach the foot NVDA with the Chrome browser announces &ldquo;Average&rdquo; twice. JAWS with the Chrome browser does not exhibit this defect.</li>
        </ul>
        <p>These anomalies may seem minor for this example, but the disregard of a header&rsquo;s header could cause harm in other cases.</p>
      </section>
    </main>
  </body>
</html>
==> old/planning/20181012/style.css <==
body {
  margin: 0;
  max-width: 680px;
}
.center {
  text-align: center;
}
code {
  font-weight: 900;
  color: #611;
}
.covert {
  display: none;
}
header, section {
  padding: 0 2rem;
}
#hider {
  border: solid 0.1rem #333;
  border-radius: 0.5rem;
  padding: 0.3rem;
}
html {
  font-size: 20px;
}
.img-example {
  max-height: 10rem;
}
.li {
  margin-top: 0;
  margin-bottom: 0;
}
.list-primary {
   list-style-type: upper-latin;
}
.list-primary > li {
  font-size: 1.2rem;
  font-weight: bold;
  color: #611;
}
.list-primary > li > ol {
  list-style-type: decimal;
  font-size: 1rem;
  font-weight: normal;
  color: black;
}
.list-primary > li > ol > li > ol {
  list-style-type: lower-latin;
  font-size: 1rem;
}
#logo {
  padding: 0.5rem 4rem;
  background-color: darkolivegreen;
}
.note {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  font-size: 0.7rem;
  font-weight: normal;
  color: #111;
}
#outline {
  padding: 0.5rem 2rem;
  background-color: #eee;
}
.overt {
  display: block;
}
#summary {
  padding: 0.5rem 4rem 1rem 4rem;
  font-size: 1.1rem;
  font-weight: bold;
  background-color: linen;
}
==> old/planning/modules/ddarrows/style.css <==
@media (max-width: 649px) {
  .title-view > h1 {
    left: 10%;
    right: 50%;
    padding: 0 1vw;
    font-size: 7vw;
  }
  section > header > h1 {
    padding: 25vw 0;
    font-size: 7vw;
  }
}
@media (min-width: 650px) {
  .title-view > h1 {
    left: 65px;
    right: 325px;
    padding: 0 6px;
    font-size: 45px;
  }
  section > header > h1 {
    padding: 155px 0;
    font-size: 60px;
  }
}
* {
  box-sizing: border-box;
}
.allthin {
  border-width: 1px;
  border-color: black;
}
.allthin, .topleft {
  box-sizing: border-box;
  width: 24px;
  height: 24px;
  border-style: solid;
}
body {
  max-width: 690px;
  margin: 0 auto;
  padding: 1rem 2rem;
  background-color: #efede7;
}
code {
  color: maroon;
}
.doc-info {
  margin: 10vw 0;
}
.doc-info > p {
  margin: 0;
  padding: 1rem 0;
  line-height: 100%;
  text-align: center;
  font-size: 1.1rem;
  font-weight: 600;
}
h1 {
  margin-bottom: 0.5rem;
}
html {
  font-size: 16px;
}
li {
  line-height: 140%;
}
p {
  line-height: 150%;
}
section > header > h1 {
  text-align: center;
  border-radius: 0.5rem;
  background-color: #96151d;
  color: white;
}
.title-view {
  position: relative;
}
.title-view > h1 {
  position: absolute;
  top: 0;
  left: 2rem;
  max-width: 250px;
  border-radius: 0.5rem;
  background-color: #efede7d0;
}
.title-view > h2 {
  position: absolute;
  top: 0;
  max-width: 250px;
  border-radius: 0.5rem;
  background-color: #efede7d0;
}
.topleft {
  border-width: 12px 0 0 12px;
  border-top-color: #ff000080;
  border-left-color: black;
}
.vgntriangle {
  display: inline-block;
  width: 0;
  height: 0;
  border: 4px solid transparent;
  border-bottom-width: 2px;
  border-top-color: #333;
  margin-left: 3px;
}
==> old/planning/modules/style.css <==
* {
  box-sizing: border-box;
}
a:focus, .focal {
  border: solid 2px darkblue;
}
a {
  padding: 4px 3px;
  border: solid 2px #ffffff00;
}
body {
  max-width: 650px;
  padding: 0 0 1rem 0;
  background-color: #eee;
}
.box {
  padding: 0.5rem;
  border: solid black 1px;
}
caption {
  margin-bottom: 0.5rem;
  font-size: 1.2rem;
  font-weight: bold;
}
.center {
  text-align: center;
}
.checkbox {
  background-color: white;
}
code {
  font-weight: 900;
  color: #611;
}
.downtight, .tight {
  margin-bottom: 0;
}
.example {
  margin-top: 1rem;
  padding: 0.5rem 0.5rem 1.5rem 0.5rem;
  border: double green 9px;
  border-radius: 1rem;
}
*:focus {
  border: solid mediumblue 3px;
}
h1 {
  margin-bottom: 0.5rem;
  font-size: 1.75rem;
}
header, section {
  margin: 0 2rem;
}
header > p {
  margin: 0;
}
.hidden {
  display: none;
}
html {
  font-size: 20px;
}
label > span {
  padding: 2px 3px;
  cursor: pointer;
}
.label {
  background-color: black;
  color: white;
}
li, p {
  line-height: 150%;
}
#logo {
  padding: 0.1vw 0;
  background-color: darkolivegreen;
}
#logo img {
  height: 20vw;
  max-height: 8rem;
}
table {
  border-collapse: collapse;
}
tbody th {
  text-align: left;
}
tbody tr {
  border-bottom: 1px solid lightgray;
}
thead {
  background-color: lightgray;
}
td {
  padding: 0 1rem;
}
th, thead td {
  padding: 0.5rem;
}
th, thead td {
  border: none;
}
tr.shown {
  display: table-row;
}
.uptight, .tight {
  margin-top: 0;
}

==> old/planning/style.css <==
body {
  margin: 0;
  max-width: 680px;
}
.center {
  text-align: center;
}
code {
  font-weight: 900;
  color: #611;
}
.covert {
  display: none;
}
header, section {
  padding: 0 2rem;
}
#hider {
  border: solid 0.1rem #333;
  border-radius: 0.5rem;
  padding: 0.3rem;
}
html {
  font-size: 20px;
}
.img-example {
  max-height: 10rem;
}
.li {
  margin-top: 0;
  margin-bottom: 0;
}
.list-primary {
   list-style-type: upper-latin;
}
.list-primary > li {
  font-size: 1.2rem;
  font-weight: bold;
  color: #611;
}
.list-primary > li > ol {
  list-style-type: decimal;
}
.list-primary > li > ol > li > ol {
  list-style-type: lower-latin;
}
#logo {
  padding: 0.5rem 4rem;
  background-color: darkolivegreen;
}
.note {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  font-weight: normal;
  color: #111;
}
ol {
  font-size: 1rem;
  font-weight: normal;
  color: black;
}
#outline {
  padding: 0.5rem 2rem;
  background-color: #eee;
}
.overt, .overt ol {
  display: block;
  font-size: 0.7rem;
}
#summary {
  padding: 0.5rem 4rem 1rem 4rem;
  font-size: 1.1rem;
  font-weight: bold;
  background-color: linen;
}
==> old/planning/20181012/script.js <==
const hideToggle = event => {
  const showingWanted = event.target.checked;
  const togglees
    = document.getElementsByClassName(showingWanted ? 'covert' : 'overt');
  /*
    Toggle each element to be toggled and update the list of them, until
   none remains.
  */
  while (togglees.length) {
    const classList = togglees[0].classList;
    classList.remove(showingWanted ? 'covert' : 'overt');
    classList.add(showingWanted ? 'overt' : 'covert');
  }
};
==> old/planning/modules/button-explained/script.js <==
const markBlurOnLabel = event => {
  event.target.parentElement.parentElement.classList.remove('focal');
};
const markFocusOnLabel = event => {
  event.target.parentElement.parentElement.classList.add('focal');
};
const toggleShow = event => {
  const checkbox = event.target;
  const wantsToShow = checkbox.checked;
  const checkboxSpanClassList = checkbox.parentElement.classList;
  checkboxSpanClassList.remove(wantsToShow ? 'clear' : 'checked');
  checkboxSpanClassList.add(wantsToShow ? 'checked' : 'clear');
  const hidables = document.getElementsByClassName('hidable');
  for (let i = 0; i < hidables.length; i++) {
    const hidable = hidables[i];
    const hidableClassList = hidable.classList;
    hidableClassList.remove(wantsToShow ? 'hidden' : 'shown');
    hidableClassList.add(wantsToShow ? 'shown' : 'hidden');
  };
};

==> old/planning/modules/control-described/script.js <==
const markBlurOnLabel = event => {
  event.target.parentElement.parentElement.classList.remove('focal');
};
const markFocusOnLabel = event => {
  event.target.parentElement.parentElement.classList.add('focal');
};
const toggleShow = event => {
  const checkbox = event.target;
  const wantsToShow = checkbox.checked;
  const checkboxSpanClassList = checkbox.parentElement.classList;
  checkboxSpanClassList.remove(wantsToShow ? 'clear' : 'checked');
  checkboxSpanClassList.add(wantsToShow ? 'checked' : 'clear');
  const hidables = document.getElementsByClassName('hidable');
  for (let i = 0; i < hidables.length; i++) {
    const hidable = hidables[i];
    const hidableClassList = hidable.classList;
    hidableClassList.remove(wantsToShow ? 'hidden' : 'shown');
    hidableClassList.add(wantsToShow ? 'shown' : 'hidden');
  };
};

==> old/planning/modules/control-labeled/script.js <==
const markBlurOnLabel = event => {
  event.target.parentElement.parentElement.classList.remove('focal');
};
const markFocusOnLabel = event => {
  event.target.parentElement.parentElement.classList.add('focal');
};
const toggleShow = event => {
  const checkbox = event.target;
  const wantsToShow = checkbox.checked;
  const checkboxSpanClassList = checkbox.parentElement.classList;
  checkboxSpanClassList.remove(wantsToShow ? 'clear' : 'checked');
  checkboxSpanClassList.add(wantsToShow ? 'checked' : 'clear');
  const hidables = document.getElementsByClassName('hidable');
  for (let i = 0; i < hidables.length; i++) {
    const hidable = hidables[i];
    const hidableClassList = hidable.classList;
    hidableClassList.remove(wantsToShow ? 'hidden' : 'shown');
    hidableClassList.add(wantsToShow ? 'shown' : 'hidden');
  };
};

==> old/planning/modules/table-configurable/script.js <==
const markBlurOnLabel = event => {
  event.target.parentElement.parentElement.classList.remove('focal');
};
const markFocusOnLabel = event => {
  event.target.parentElement.parentElement.classList.add('focal');
};
const toggleShow = event => {
  const checkbox = event.target;
  const wantsToShow = checkbox.checked;
  const checkboxSpanClassList = checkbox.parentElement.classList;
  checkboxSpanClassList.remove(wantsToShow ? 'clear' : 'checked');
  checkboxSpanClassList.add(wantsToShow ? 'checked' : 'clear');
  const hidables = document.getElementsByClassName('hidable');
  for (let i = 0; i < hidables.length; i++) {
    const hidable = hidables[i];
    const hidableClassList = hidable.classList;
    hidableClassList.remove(wantsToShow ? 'hidden' : 'shown');
    hidableClassList.add(wantsToShow ? 'shown' : 'hidden');
  };
};

==> old/planning/script.js <==
const hideToggle = event => {
  const showingWanted = event.target.checked;
  const togglees
    = document.getElementsByClassName(showingWanted ? 'covert' : 'overt');
  /*
   Toggle each element to be toggled and update the list of them, until
   none remains.
  */
  while (togglees.length) {
    const classList = togglees[0].classList;
    classList.remove(showingWanted ? 'covert' : 'overt');
    classList.add(showingWanted ? 'overt' : 'covert');
  }
};
==> old/planning/20180926-training-dev.txt <==
Accessibility Unit

Training in Accessible User Interface Development

Utopia faces increasing demands to ensure that its digital user interfaces are accessible for users with disabilities. There are competitive, reputational, regulatory, and risk-management incentives for doing this.

However, hiring a contractor to make this happen could cost Utopia tens of millions of dollars, and the other usability issues with Utopia's interfaces would remain unresolved.

Instead, the Accessibility Unit pursues a "spot-repair and shift-left" accessibility strategy. This means helping software teams to (1) remediate the worst accessibility problems in their existing interfaces, but (2) build accessibility into their new projects from the very start.

The spot-repair phase began about 4 years ago and is reaching the end of its useful life. Spot repairs are becoming more intricate and expensive, and Utopia teams are embracing new web- and app-development paradigms. Both of these trends make total redevelopment of UIs increasingly attractive.

Although many developers across the enterprise are learning new front-end frameworks, libraries, and teamwork modalities, only a few (about 100, or 5%, per year) are learning to develop accessible interfaces, and even that is at a superficial level.

We want to change this. We want to share more deeply and with a larger audience our know-how and our know-why. We can't monitor every new front-end project's accessibility, so we want UI developers to acquire not only accessibility techniques, but also accessibility acumen: an appreciation of the business value and technical excellence of accessibility.

One element of our strategy is multimodal training. Below we outline the topics of a possible training program. Each item is the title of a possible module. The modules could constitute a course, but they could also be used as stand-alone lessons or reference sources. There are about 100 items; at an average of 20 minutes per item, including practice and testing, a course could occupy about 4 days. An on-site course could enhance learners' experience with the modules by offering expert help, discussion, and inter-learner collaboration.

Current accessible-development training at Utopia consists mainly of:

(1) Half of a 2-day Utopia University course, "Accessibility Fundamentals", taught by visiting experts from A11yGurus.

(2) A 2-hour segment in the Utopia University course, "UI Boot Camp".

(3) Occasional 1- or 2-hour introductions offered on demand to development teams.

(4) Modules created by A11yGurus University and made available to Utopia crew members.

In our experience, these offerings have not prepared developers to autonomously make their interfaces accessible. Utopia developers, although invited to train themselves with the A11yGurus modules, have rarely done so. We believe that more engaging and relevant training (in part making use of those same modules) would be more effective.

The new modules would:

(1) Be as independent as practically possible, not requiring each other as prerequisites.

(2) In part be beneficial to managers, designers, and testers, as well as developers.

(3) Include practice exercises and knowledge tests.

(4) Insofar as possible, refer and link to (not replace) existing documents and training resources.

(5) Be Utopia-specific and Utopia-relevant.

(6) Offer enough technical detail for practical application.

While learning styles vary, experienced software-development trainers typically argue that nobody learns to code without coding. We accordingly favor packaging the modules mostly as documents plus code: explanations with accompanying exercises that automatically check the learner's input, in the manner of FreeCodeCamp or HackerRank. As appropriate, there would be some audio and/or video content, too, such as recordings of assistive devices reading content out loud or users with disabilities navigating interfaces.

=========================

Outline of modules in accessible development

1. Introduction to accessibility
1.1. What is accessibility?
1.2. Why accessibility matters
1.3. Who demands accessibility?
1.4. Who supplies accessibility?
1.5. Accessibility: hard and hideous, or easy and elegant?
1.6. Expanding and competing concepts of accessibility
1.7. Evolving technologies of accessibility
2. Accessibility at Utopia
2.1. Our core purpose and accessibility
2.2. Competing with accessibility
2.3. Complying with accessibility
2.4. Our accessibility risks and costs
2.5. Our accessibility opportunities
2.6. How we organize accessibility
2.7. Where you get accessibility support
3. Accessibility: When is it "done"?
3.1. International standards of accessibility
3.2. Laws, regulations, and adjudications on accessibility
3.3. Utopia standards of accessibility
3.4. Accessible UI and UX: from OK to good to great
4. Our special accessibility challenges
4.1. Communicating financial data accessibly
4.2. Making financial transactions accessible
4.3. Accessibly preventing and correcting errors
4.4. Accessible investor education
4.5. Reconciling accessibility with privacy
4.6. Reconciling accessibility with security
4.7. Being international and accessible
4.8. Making legacy interfaces accessible
4.9. Ensuring an accessible crew experience
5. Strategies for accessible interface production
5.1. Inclusive, universal, and adaptive design
5.2. Accessibly semantic HTML
5.3. Accessible CSS
5.4. Server-client cooperation for accessibility
5.5. Doing agile, NGA, Shift Left, and BV@SS accessibly
6. Making views accessible
6.1. Sizing content accessibly
6.2. Making text accessible
6.3. Making graphics accessible
6.4. Making colors accessible
6.5. Styling activatable elements accessibly
6.6. Making audio and video content accessible
7. Making layouts accessible
7.1. Making layout serialization accessible
7.2. Making layout structure accessible
7.3. Making page constants accessible
8. Making tables accessible
8.1. Accessible tabular layout
8.2. Accessible tabular data
8.3. Tables, graphs, and accessibility
9. Making interactions accessible
9.1. Accessible event handling
9.1.1. Making event handling predictable
9.1.2. Ensuring notice of changed context and content
9.2. Accessible navigation
9.2.1. Managing and showing focus accessibly
9.2.2. Responding accessibly to button and link activation
9.2.3. UI navigation, browser navigation, and accessibility
9.2.4. Layers, tabs, windows, and accessibility
9.3. Making forms accessible
9.3.1. Making free text input accessible
9.3.2. Making typed text input accessible
9.3.3. Making toggling and election accessible
9.3.4. Making selection accessible
9.3.5. Making partitioning accessible
9.3.6. Making authentication accessible
10. Making documents accessible
10.1. Generating accessible PDF files
10.2. Editing PDF files for accessibility
10.3. Choosing document formats for accessibility
11. Accessibility across platforms
11.1. Making views accessibly responsive
11.2. Making text resizable across platforms
11.3. Accessibility for keyboards, mice, trackpads, and fingers
11.3. Using cross-platform development frameworks accessibly
11.3.1. Accessible development with Angular
11.3.2. Accessible development with React
11.3.3. Accessible development with Vue
11.3.4. Accessible development with Ionic
11.3.5. Accessible development with React Native
11.4. Leveraging accessibility features of mobile APIs
11.4.1. Leveraging iOS API accessibility
11.4.2. Leveraging Android API accessibility
12. Supporting adaptations for accessibility
12.1. Supporting magnification tools
12.2. Supporting contrast customization
12.3. Supporting pointerless operation
12.4. Supporting screen readers
13. Standardizing accessibility
13.1. Developing enterprise accessibility standards
13.2. Baking accessibility into shared components
13.3. Leveraging VUI for accessibility
14. Testing accessibility
14.1. Human accessibility testing
14.1.1. Accessibility testing by code inspection
14.1.2. Youser (you playing user) testing for accessibility
14.1.3. User testing for accessibility
14.2. Automatic accessibility testing
14.2.1. Accessibility linting
14.2.2. Accessibility testing with browser extensions
14.2.3. Accessibility testing with axe-core
14.2.4. Creating accessibility tests with Cucumber/Gherkin
14.2.5. Accessibility testing in CI-CD
14.2.6. Extending the reach of automated accessibility testing

=======================

Details not in outline:

2.2.1. Physical facilities.
2.2.2. Conversational customer support.
2.2.6. Paper documents.
5.1. Branding.
5.2. Consistency.
5.3. Aesthetics.

-It would be helpful to have a one page summary of your current state and future state, along with estimated timing expectations � and ideally what you�re hoping to get from the session with VU.

-Provide insight on the type of resources you have internally to build out the training.

-Confirmation of the learning audience(s). Maybe offer a simple description of their role(s) and how they would use the learning.

-Performance objectives. What will crew be doing on the job and how does it align to business goals?

-An overview of the content. Not everything, but, in general, is it technical, knowledge based, etc?

-What is the learning experience? (How long is it? Are crew taking it all at once? Are there reinforcement activities during and after? If so, what are they?)

-Providing a link to the external provider would be helpful along with any other access to content for a quick preview.

-If there�s any existing crew feedback from prior sessions, that�s always helpful as well.


==> old/planning/devtrainfix.txt <==
Mention FCC and HackerRank in proposal. Tell when done.

Start with impactful example(s) of (in)a11y on the web and what developers can do about it.
